# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ManagerUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# pyuic5 -x ManagerUI.ui -o ManagerUI.py
# pyinstaller ManagerUI.py --noconsole
import pymysql
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QDialog, QLabel, QLineEdit, QPushButton, QVBoxLayout, QHBoxLayout, QApplication, QScrollArea, QWidget, QComboBox, QMainWindow, QMessageBox, QProgressDialog
from SQL import MySQLDatabase
from PyQt5.QtCore import Qt, QTimer, QThread, pyqtSignal
from SQL import insertManagerDataInToSql, insertUserDataInToSql, insertCityDataInToSql, insertSiteDataInToSql, insertHotelDataInToSql, insertRestaurantDataInToSql, insertViewDataInToSql, insertActivityDataInToSql, insertRouteDataInToSql, insertTripDataInToSql, insertRecordTripDataInToSql, insertTravelDataInToSql, insertRecordTravelDataInToSql, insertRecordViewDataInToSql
from SQL import updateManagerDataInToSql, updateUserDataInToSql, updateCityDataInToSql, updateSiteDataInToSql, updateHotelDataInToSql, updateRestaurantDataInToSql, updateViewDataInToSql, updateActivityDataInToSql, updateRouteDataInToSql, updateTripDataInToSql, updateRecordTripDataInToSql, updateTravelDataInToSql, updateRecordTravelDataInToSql, updateRecordViewDataInToSql
from SQL import deleteManagerDataInToSql, deleteUserDataInToSql, deleteCityDataInToSql, deleteSiteDataInToSql, deleteHotelDataInToSql, deleteRestaurantDataInToSql, deleteViewDataInToSql, deleteActivityDataInToSql, deleteRouteDataInToSql, deleteTripDataInToSql, deleteRecordTripDataInToSql, deleteTravelDataInToSql, deleteRecordTravelDataInToSql, deleteRecordViewDataInToSql
from Crawler import crawler_update_weather_data, crawler_update_table_data, initialize
import os
import re

class Ui_Form(QMainWindow):
    def __init__(self):
        super().__init__()
        self.db = MySQLDatabase(host='127.0.0.1', user='root', password='', database='city')
        self.type_classes = self.db.execute_query("SELECT * FROM `type_classes`")

    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1600, 900)
        if Form.layout():
            QtWidgets.QWidget().setLayout(Form.layout())
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(Form)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.verticalLayout_13 = QtWidgets.QVBoxLayout()
        self.verticalLayout_13.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.verticalLayout_13.setContentsMargins(-1, -1, 0, -1)
        self.verticalLayout_13.setSpacing(0)
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        self.horizontalLayout_3.addLayout(self.verticalLayout_13)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(15)
        self.verticalLayout.setObjectName("verticalLayout")
        self.Manager_Button = QtWidgets.QPushButton(Form)
        self.Manager_Button.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Manager_Button.sizePolicy().hasHeightForWidth())
        self.Manager_Button.setSizePolicy(sizePolicy)
        self.Manager_Button.setObjectName("Manager_Button")
        self.verticalLayout.addWidget(self.Manager_Button)
        self.User_Button = QtWidgets.QPushButton(Form)
        self.User_Button.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.User_Button.sizePolicy().hasHeightForWidth())
        self.User_Button.setSizePolicy(sizePolicy)
        self.User_Button.setObjectName("User_Button")
        self.verticalLayout.addWidget(self.User_Button)
        self.City_Button = QtWidgets.QPushButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.City_Button.sizePolicy().hasHeightForWidth())
        self.City_Button.setSizePolicy(sizePolicy)
        self.City_Button.setMinimumSize(QtCore.QSize(0, 0))
        self.City_Button.setObjectName("City_Button")
        self.verticalLayout.addWidget(self.City_Button)
        self.Site_Button = QtWidgets.QPushButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Site_Button.sizePolicy().hasHeightForWidth())
        self.Site_Button.setSizePolicy(sizePolicy)
        self.Site_Button.setObjectName("Site_Button")
        self.verticalLayout.addWidget(self.Site_Button)
        self.Hotel_Button = QtWidgets.QPushButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Hotel_Button.sizePolicy().hasHeightForWidth())
        self.Hotel_Button.setSizePolicy(sizePolicy)
        self.Hotel_Button.setObjectName("Hotel_Button")
        self.verticalLayout.addWidget(self.Hotel_Button)
        self.Restaurant_Button = QtWidgets.QPushButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Restaurant_Button.sizePolicy().hasHeightForWidth())
        self.Restaurant_Button.setSizePolicy(sizePolicy)
        self.Restaurant_Button.setObjectName("Restaurant_Button")
        self.verticalLayout.addWidget(self.Restaurant_Button)
        self.View_Button = QtWidgets.QPushButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.View_Button.sizePolicy().hasHeightForWidth())
        self.View_Button.setSizePolicy(sizePolicy)
        self.View_Button.setObjectName("View_Button")
        self.verticalLayout.addWidget(self.View_Button)
        self.Activity_Button = QtWidgets.QPushButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Activity_Button.sizePolicy().hasHeightForWidth())
        self.Activity_Button.setSizePolicy(sizePolicy)
        self.Activity_Button.setBaseSize(QtCore.QSize(0, 0))
        self.Activity_Button.setIconSize(QtCore.QSize(20, 20))
        self.Activity_Button.setObjectName("Activity_Button")
        self.verticalLayout.addWidget(self.Activity_Button)
        self.Weather_36hours_Button = QtWidgets.QPushButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Weather_36hours_Button.sizePolicy().hasHeightForWidth())
        self.Weather_36hours_Button.setSizePolicy(sizePolicy)
        self.Weather_36hours_Button.setObjectName("Weather_36hours_Button")
        self.verticalLayout.addWidget(self.Weather_36hours_Button)
        self.Weather_2days_Button = QtWidgets.QPushButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Weather_2days_Button.sizePolicy().hasHeightForWidth())
        self.Weather_2days_Button.setSizePolicy(sizePolicy)
        self.Weather_2days_Button.setObjectName("Weather_2days_Button")
        self.verticalLayout.addWidget(self.Weather_2days_Button)
        self.Weather_week_Button = QtWidgets.QPushButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Weather_week_Button.sizePolicy().hasHeightForWidth())
        self.Weather_week_Button.setSizePolicy(sizePolicy)
        self.Weather_week_Button.setObjectName("Weather_week_Button")
        self.verticalLayout.addWidget(self.Weather_week_Button)
        self.Travel_Button = QtWidgets.QPushButton(Form)
        self.Travel_Button.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Travel_Button.sizePolicy().hasHeightForWidth())
        self.Travel_Button.setSizePolicy(sizePolicy)
        self.Travel_Button.setObjectName("Travel_Button")
        self.verticalLayout.addWidget(self.Travel_Button)
        self.Trip_Button = QtWidgets.QPushButton(Form)
        self.Trip_Button.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Trip_Button.sizePolicy().hasHeightForWidth())
        self.Trip_Button.setSizePolicy(sizePolicy)
        self.Trip_Button.setObjectName("Trip_Button")
        self.verticalLayout.addWidget(self.Trip_Button)
        self.Route_Button = QtWidgets.QPushButton(Form)
        self.Route_Button.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Route_Button.sizePolicy().hasHeightForWidth())
        self.Route_Button.setSizePolicy(sizePolicy)
        self.Route_Button.setObjectName("Route_Button")
        self.verticalLayout.addWidget(self.Route_Button)
        self.User_Record_Travel_Button = QtWidgets.QPushButton(Form)
        self.User_Record_Travel_Button.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.User_Record_Travel_Button.sizePolicy().hasHeightForWidth())
        self.User_Record_Travel_Button.setSizePolicy(sizePolicy)
        self.User_Record_Travel_Button.setObjectName("User_Record_Travel_Button")
        self.verticalLayout.addWidget(self.User_Record_Travel_Button)
        self.User_Record_Trip_Button = QtWidgets.QPushButton(Form)
        self.User_Record_Trip_Button.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.User_Record_Trip_Button.sizePolicy().hasHeightForWidth())
        self.User_Record_Trip_Button.setSizePolicy(sizePolicy)
        self.User_Record_Trip_Button.setObjectName("User_Record_Trip_Button")
        self.verticalLayout.addWidget(self.User_Record_Trip_Button)
        self.User_Record_View_Button = QtWidgets.QPushButton(Form)
        self.User_Record_View_Button.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.User_Record_View_Button.sizePolicy().hasHeightForWidth())
        self.User_Record_View_Button.setSizePolicy(sizePolicy)
        self.User_Record_View_Button.setObjectName("User_Record_View_Button")
        self.verticalLayout.addWidget(self.User_Record_View_Button)
        self.Type_Button = QtWidgets.QPushButton(Form)
        self.Type_Button.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Type_Button.sizePolicy().hasHeightForWidth())
        self.Type_Button.setSizePolicy(sizePolicy)
        self.Type_Button.setObjectName("Type_Button")
        self.verticalLayout.addWidget(self.Type_Button)
        self.Ids_Button = QtWidgets.QPushButton(Form)
        self.Ids_Button.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Ids_Button.sizePolicy().hasHeightForWidth())
        self.Ids_Button.setSizePolicy(sizePolicy)
        self.Ids_Button.setObjectName("Ids_Button")
        self.verticalLayout.addWidget(self.Ids_Button)
        self.horizontalLayout_3.addLayout(self.verticalLayout)
        self.line = QtWidgets.QFrame(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.line.sizePolicy().hasHeightForWidth())
        self.line.setSizePolicy(sizePolicy)
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.horizontalLayout_3.addWidget(self.line)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setContentsMargins(0, -1, -1, -1)
        self.verticalLayout_4.setSpacing(0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.Search_lineEdit = QtWidgets.QLineEdit(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Search_lineEdit.sizePolicy().hasHeightForWidth())
        self.Search_lineEdit.setSizePolicy(sizePolicy)
        self.Search_lineEdit.setObjectName("Search_lineEdit")
        self.horizontalLayout_2.addWidget(self.Search_lineEdit)
        self.Search_Button = QtWidgets.QPushButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Search_Button.sizePolicy().hasHeightForWidth())
        self.Search_Button.setSizePolicy(sizePolicy)
        self.Search_Button.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("source/img/Search.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Search_Button.setIcon(icon)
        self.Search_Button.setIconSize(QtCore.QSize(20, 20))
        self.Search_Button.setObjectName("Search_Button")
        self.horizontalLayout_2.addWidget(self.Search_Button)
        self.verticalLayout_4.addLayout(self.horizontalLayout_2)
        self.tableView = QtWidgets.QTableView(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tableView.sizePolicy().hasHeightForWidth())
        self.tableView.setSizePolicy(sizePolicy)
        self.tableView.setObjectName("tableView")
        self.verticalLayout_4.addWidget(self.tableView)
        self.horizontalLayout_3.addLayout(self.verticalLayout_4)
        self.line_2 = QtWidgets.QFrame(Form)
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.horizontalLayout_3.addWidget(self.line_2)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        spacerItem = QtWidgets.QSpacerItem(20, 570, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.verticalLayout_2.addItem(spacerItem)
        button_layout = QtWidgets.QHBoxLayout()
        self.Insert_Button = QtWidgets.QPushButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Insert_Button.sizePolicy().hasHeightForWidth())
        self.Insert_Button.setSizePolicy(sizePolicy)
        self.Insert_Button.setIconSize(QtCore.QSize(20, 20))
        self.Insert_Button.setObjectName("Insert_Button")
        self.verticalLayout_2.addWidget(self.Insert_Button)
        self.Update_Button = QtWidgets.QPushButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Update_Button.sizePolicy().hasHeightForWidth())
        self.Update_Button.setSizePolicy(sizePolicy)
        self.Update_Button.setIconSize(QtCore.QSize(20, 20))
        self.Update_Button.setObjectName("Update_Button")
        self.verticalLayout_2.addWidget(self.Update_Button)
        self.Delete_Button = QtWidgets.QPushButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Delete_Button.sizePolicy().hasHeightForWidth())
        self.Delete_Button.setSizePolicy(sizePolicy)
        self.Delete_Button.setObjectName("Delete_Button")
        self.verticalLayout_2.addWidget(self.Delete_Button)
        self.Sync_Weather_Button = QtWidgets.QPushButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Sync_Weather_Button.sizePolicy().hasHeightForWidth())
        self.Sync_Weather_Button.setSizePolicy(sizePolicy)
        self.Sync_Weather_Button.setIconSize(QtCore.QSize(20, 20))
        self.Sync_Weather_Button.setObjectName("Sync_Weather_Button")
        self.verticalLayout_2.addWidget(self.Sync_Weather_Button)
        self.Sync_Table_Button = QtWidgets.QPushButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Sync_Table_Button.sizePolicy().hasHeightForWidth())
        self.Sync_Table_Button.setSizePolicy(sizePolicy)
        self.Sync_Table_Button.setIconSize(QtCore.QSize(20, 20))
        self.Sync_Table_Button.setObjectName("Sync_Table_Button")
        self.verticalLayout_2.addWidget(self.Sync_Table_Button)
        self.verticalLayout.addLayout(button_layout)
        self.horizontalLayout_3.addLayout(self.verticalLayout_2)
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.horizontalLayout_3.addLayout(self.verticalLayout_6)
        self.verticalLayout_3.addLayout(self.horizontalLayout_3)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)
        self.Manager_Button.clicked.connect(self.manager_button_clicked)
        self.User_Button.clicked.connect(self.user_button_clicked)
        self.City_Button.clicked.connect(self.city_button_clicked)
        self.Site_Button.clicked.connect(self.site_button_clicked)
        self.Weather_36hours_Button.clicked.connect(self.weather_36hours_button_clicked)
        self.Weather_2days_Button.clicked.connect(self.weather_2days_button_clicked)
        self.Weather_week_Button.clicked.connect(self.weather_week_button_clicked)
        self.Type_Button.clicked.connect(self.type_button_clicked)
        self.Ids_Button.clicked.connect(self.ids_button_clicked)
        self.Hotel_Button.clicked.connect(self.hotel_button_clicked)
        self.Restaurant_Button.clicked.connect(self.restaurant_button_clicked)
        self.View_Button.clicked.connect(self.view_button_clicked)
        self.Activity_Button.clicked.connect(self.activity_button_clicked)
        self.Route_Button.clicked.connect(self.route_button_clicked)
        self.Trip_Button.clicked.connect(self.trip_button_clicked)
        self.User_Record_Trip_Button.clicked.connect(self.user_record_trip_button_clicked)
        self.Travel_Button.clicked.connect(self.travel_button_clicked)
        self.User_Record_Travel_Button.clicked.connect(self.user_record_travel_button_clicked)
        self.User_Record_View_Button.clicked.connect(self.user_record_view_button_clicked)
        self.Search_Button.clicked.connect(self.search_button_clicked)
        self.Sync_Weather_Button.clicked.connect(self.sync_weather_button_clicked)
        self.Sync_Table_Button.clicked.connect(self.sync_table_button_clicked)
        self.Insert_Button.clicked.connect(self.insert_button_clicked)
        self.Update_Button.clicked.connect(self.update_button_clicked)
        self.Delete_Button.clicked.connect(self.delete_button_clicked)
        self.tableView.clicked.connect(self.on_cell_clicked)
        self.model = QtGui.QStandardItemModel(Form)
        self.tableView.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tableView.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.selected_table = None
        #漢江貓貓
        self.cat_label = QtWidgets.QLabel(self)
        base_dir = os.path.dirname(os.path.abspath(__file__))
        self.img_dir = os.path.join(base_dir, 'source', 'img')
        self.cat_image = os.path.join(self.img_dir, 'cat.gif')
        self.movie = QtGui.QMovie(self.cat_image)
        self.cat_label.setMovie(self.movie)
        self.cat_label.setScaledContents(True)
        self.cat_label.setFixedSize(100, 100)
        self.movie.start()
        self.cat_label.show()
        cat_layout = QtWidgets.QHBoxLayout()
        cat_layout.addWidget(self.cat_label)
        self.verticalLayout_3.addLayout(cat_layout)
        cat_vertical_layout = QtWidgets.QVBoxLayout()
        cat_vertical_layout.addWidget(self.cat_label)
        self.cat_position = 250
        self.cat_direction = 1
        self.cat_label.move(250, -20)
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.move_cat)
        self.timer.start(20)
    def move_cat(self):
        current_x = self.cat_label.x()
        if current_x >= 1330:
            self.cat_direction = 0
            self.cat_image = os.path.join(self.img_dir, 'tac.gif')
            self.movie = QtGui.QMovie(self.cat_image)
            self.cat_label.setMovie(self.movie)
            self.cat_label.setScaledContents(True)
            self.cat_label.setFixedSize(100, 100)  # Set cat size
            self.movie.start()
            self.cat_label.show()
        elif current_x <= 250:
            self.cat_direction = 1
            self.cat_image = os.path.join(self.img_dir, 'cat.gif')
            self.movie = QtGui.QMovie(self.cat_image)
            self.cat_label.setMovie(self.movie)
            self.cat_label.setScaledContents(True)
            self.cat_label.setFixedSize(100, 100)  # Set cat size
            self.movie.start()
            self.cat_label.show()
        if self.cat_direction == 1:
            new_x = current_x + 3
        else:
            new_x = current_x - 3
        self.cat_label.move(new_x, -20)
    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "旅人園-管理者系統"))        
        self.Manager_Button.setText(_translate("Form", "管理者(Manager)"))
        self.User_Button.setText(_translate("Form", "用戶(User)"))
        self.City_Button.setText(_translate("Form", "城市(City)"))
        self.Site_Button.setText(_translate("Form", "鄉鎮(Site)"))
        self.Hotel_Button.setText(_translate("Form", "旅館(Hotel)"))
        self.Restaurant_Button.setText(_translate("Form", "餐廳(Restaurant)"))
        self.View_Button.setText(_translate("Form", "景點(View)"))
        self.Activity_Button.setText(_translate("Form", "活動(Activity)"))
        self.Weather_36hours_Button.setText(_translate("Form", "天氣(Weather_36hours)"))
        self.Weather_2days_Button.setText(_translate("Form", "天氣(Weather_2Days)"))
        self.Weather_week_Button.setText(_translate("Form", "天氣(Weather_week)"))
        self.Travel_Button.setText(_translate("Form", "旅遊行程(Travel)"))
        self.Trip_Button.setText(_translate("Form", "單日行程(Trip)"))
        self.Route_Button.setText(_translate("Form", "旅遊路線(Route)"))
        self.User_Record_Travel_Button.setText(_translate("Form", "用戶儲存清單(Travel)"))
        self.User_Record_Trip_Button.setText(_translate("Form", "用戶儲存清單(Trip)"))
        self.User_Record_View_Button.setText(_translate("Form", "用戶儲存清單(View)"))
        self.Type_Button.setText(_translate("Form", "類型(Type)"))
        self.Ids_Button.setText(_translate("Form", "Ids"))
        self.Sync_Weather_Button.setText(_translate("Form", "Sync_Weather"))
        self.Sync_Table_Button.setText(_translate("Form", "Sync_Table"))
        self.Insert_Button.setText(_translate("Form", "新增 (Insert) "))
        self.Update_Button.setText(_translate("Form", "更新 (Update)"))
        self.Delete_Button.setText(_translate("Form", "刪除 (Delete)"))

    def reset_tableButtonColors(self):
        self.User_Button.setStyleSheet("")
        self.Manager_Button.setStyleSheet("")
        self.City_Button.setStyleSheet("")
        self.Site_Button.setStyleSheet("")
        self.Weather_36hours_Button.setStyleSheet("")
        self.Weather_2days_Button.setStyleSheet("")
        self.Weather_week_Button.setStyleSheet("")
        self.Type_Button.setStyleSheet("")
        self.Ids_Button.setStyleSheet("")
        self.Hotel_Button.setStyleSheet("")
        self.Restaurant_Button.setStyleSheet("")
        self.View_Button.setStyleSheet("")
        self.Activity_Button.setStyleSheet("")      
        self.Route_Button.setStyleSheet("")
        self.Trip_Button.setStyleSheet("")
        self.User_Record_Trip_Button.setStyleSheet("")
        self.Travel_Button.setStyleSheet("")
        self.User_Record_Travel_Button.setStyleSheet("")
        self.User_Record_View_Button.setStyleSheet("")
    def set_tableButtonSelected(self, button):
        self.reset_tableButtonColors()
        self.selectedButton = button
        if button == self.City_Button:
            self.selected_table = "city"
            button.setStyleSheet("background-color: pink")
        elif button == self.Site_Button:
            self.selected_table = "site"
            button.setStyleSheet("background-color: pink")
        elif button == self.View_Button:
            self.selected_table = "view"
            button.setStyleSheet("background-color: pink")
        elif button == self.Hotel_Button:
            self.selected_table = "hotel"
            button.setStyleSheet("background-color: pink")
        elif button == self.Restaurant_Button:
            self.selected_table = "restaurant"
            button.setStyleSheet("background-color: pink")
        elif button == self.Weather_36hours_Button:
            self.selected_table = "weather_36hours"
            button.setStyleSheet("background-color: pink")
        elif button == self.Weather_2days_Button:
            self.selected_table = "weather_2days"
            button.setStyleSheet("background-color: pink")
        elif button == self.Weather_week_Button:
            self.selected_table = "weather_week"
            button.setStyleSheet("background-color: pink")
        elif button == self.User_Button:
            self.selected_table = "user"
            button.setStyleSheet("background-color: pink")
        elif button == self.Manager_Button:
            self.selected_table = "manager"
            button.setStyleSheet("background-color: pink")
        elif button == self.Activity_Button:
            self.selected_table = "activity"
            button.setStyleSheet("background-color: pink")
        elif button == self.Type_Button:
            self.selected_table = "type"
            button.setStyleSheet("background-color: pink")
        elif button == self.Ids_Button:
            self.selected_table = "ids"
            button.setStyleSheet("background-color: pink")
        elif button == self.Route_Button:
            self.selected_table = "route"
            button.setStyleSheet("background-color: pink")
        elif button == self.Trip_Button:
            self.selected_table = "trip"
            button.setStyleSheet("background-color: pink")
        elif button == self.Travel_Button:
            self.selected_table = "travel"
            button.setStyleSheet("background-color: pink")
        elif button == self.User_Record_Trip_Button:
            self.selected_table = "user_record_trip"
            button.setStyleSheet("background-color: pink")
        elif button == self.User_Record_Travel_Button:
            self.selected_table = "user_record_travel"
            button.setStyleSheet("background-color: pink")
            return self.selected_table
        elif button == self.User_Record_View_Button:
            self.selected_table = "user_record_view"
            button.setStyleSheet("background-color: pink")
    def on_cell_clicked(self, index):
        self.row = int(index.row())
        # self.set_tableButtonSelected
        # # self.selectedButton = button
        table_name = self.selected_table
        print(table_name)
        if table_name == "manager":
            for idx, val in enumerate(self.manager_data):
                if idx == self.row:
                    print("current row: ",self.row, val)
        elif table_name == "user":
            for idx, val in enumerate(self.user_data):
                if idx == self.row:
                    print("current row: ",self.row, val)
        elif table_name == "city":
            for idx, val in enumerate(self.city_data):
                if idx == self.row:
                    print("current row: ",self.row, val)
        elif table_name == "site":
            for idx, val in enumerate(self.site_data):
                if idx == self.row:
                    print("current row: ",self.row, val)
        elif table_name == "weather_36hours":
            for idx, val in enumerate(self.weather_36hours_data):
                if idx == self.row:
                    print("current row: ",self.row, val)
        elif table_name == "weather_2days":
            for idx, val in enumerate(self.weather_2days_data):
                if idx == self.row:
                    print("current row: ",self.row, val)
        elif table_name == "weather_week":
            for idx, val in enumerate(self.weather_week_data):
                if idx == self.row:
                    print("current row: ",self.row, val)
        elif table_name == "type":
            for idx, val in enumerate(self.type_data):
                if idx == self.row:
                    print("current row: ",self.row, val)
        elif table_name == "ids":
            for idx, val in enumerate(self.ids_data):
                if idx == self.row:
                    print("current row: ",self.row, val)
        elif table_name == "hotel":
            for idx, val in enumerate(self.hotel_data):
                if idx == self.row:
                    print("current row: ",self.row, val)
        elif table_name == "restaurant":
            for idx, val in enumerate(self.restaurant_data):
                if idx == self.row:
                    print("current row: ",self.row, val)
        elif table_name == "view":
            for idx, val in enumerate(self.view_data):
                if idx == self.row:
                    print("current row: ",self.row, val)
        elif table_name == "activity":
            for idx, val in enumerate(self.activity_data):
                if idx == self.row:
                    print("current row: ",self.row, val)
        elif table_name == "route":
            for idx, val in enumerate(self.route_data):
                if idx == self.row:
                    print("current row: ",self.row, val)
        elif table_name == "trip":
            for idx, val in enumerate(self.trip_data):
                if idx == self.row:
                    print("current row: ",self.row, val)
        elif table_name == "user_record_trip":
            for idx, val in enumerate(self.user_record_trip_data):
                if idx == self.row:
                    print("current row: ",self.row, val)
        elif table_name == "travel":
            for idx, val in enumerate(self.travel_data):
                if idx == self.row:
                    print("current row: ",self.row, val)
        elif table_name == "user_record_travel":
            for idx, val in enumerate(self.user_record_travel_data):
                if idx == self.row:
                    print("current row: ",self.row, val)
        elif table_name == "user_record_view":
            for idx, val in enumerate(self.user_record_view_data):
                if idx == self.row:
                    print("current row: ",self.row, val)    
        return self.row
    def manager_button_clicked(self):
        db = MySQLDatabase(host='127.0.0.1', user='root', password='', database='city')
        query = "SELECT * FROM manager"
        self.manager_data = db.execute_query(query)
        if self.manager_data:
            self.model = QtGui.QStandardItemModel(len(self.manager_data), len(self.manager_data[0].keys()))
            self.model.setHorizontalHeaderLabels(self.manager_data[0].keys())
            for row_num, row_data in enumerate(self.manager_data):
                for col_num, col_data in enumerate(row_data.values()):
                    item = QtGui.QStandardItem(str(col_data))
                    self.model.setItem(row_num, col_num, item)
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Manager_Button)
        else:
            self.model.clear()
            self.set_tableButtonSelected(self.Manager_Button)
    def user_button_clicked(self):
        db = MySQLDatabase(host='127.0.0.1', user='root', password='', database='city')
        query = "SELECT * FROM user"
        self.user_data = db.execute_query(query)
        if self.user_data:
            self.model = QtGui.QStandardItemModel(len(self.user_data), len(self.user_data[0].keys()))
            self.model.setHorizontalHeaderLabels(self.user_data[0].keys())
            for row_num, row_data in enumerate(self.user_data):
                for col_num, col_data in enumerate(row_data.values()):
                    item = QtGui.QStandardItem(str(col_data))
                    self.model.setItem(row_num, col_num, item)
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.User_Button)
        else:
            self.model.clear()
            self.set_tableButtonSelected(self.User_Button)
    def city_button_clicked(self):
        db = MySQLDatabase(host='127.0.0.1', user='root', password='', database='city')
        query = "SELECT * FROM city"
        self.city_data = db.execute_query(query)
        if self.city_data:
            self.model = QtGui.QStandardItemModel(len(self.city_data), len(self.city_data[0].keys()))
            self.model.setHorizontalHeaderLabels(self.city_data[0].keys())
            for row_num, row_data in enumerate(self.city_data):
                for col_num, col_data in enumerate(row_data.values()):
                    item = QtGui.QStandardItem(str(col_data))
                    self.model.setItem(row_num, col_num, item)
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.City_Button)
        else:
            self.model.clear()
            self.set_tableButtonSelected(self.City_Button)
    def site_button_clicked(self):
        db = MySQLDatabase(host='127.0.0.1', user='root', password='', database='city')
        query = "SELECT * FROM site"
        self.site_data = db.execute_query(query)
        if self.site_data:
            self.model = QtGui.QStandardItemModel(len(self.site_data), len(self.site_data[0].keys()))
            self.model.setHorizontalHeaderLabels(self.site_data[0].keys())
            for row_num, row_data in enumerate(self.site_data):
                for col_num, col_data in enumerate(row_data.values()):
                    item = QtGui.QStandardItem(str(col_data))
                    self.model.setItem(row_num, col_num, item)
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Site_Button)
        else:
            self.model.clear()
            self.set_tableButtonSelected(self.Site_Button)
    def weather_36hours_button_clicked(self):
        db = MySQLDatabase(host='127.0.0.1', user='root', password='', database='city')
        query = "SELECT * FROM weather_36hours"
        self.weather_36hours_data = db.execute_query(query)
        if self.weather_36hours_data:
            self.model = QtGui.QStandardItemModel(len(self.weather_36hours_data), len(self.weather_36hours_data[0].keys()))
            self.model.setHorizontalHeaderLabels(self.weather_36hours_data[0].keys())
            for row_num, row_data in enumerate(self.weather_36hours_data):
                for col_num, col_data in enumerate(row_data.values()):
                    item = QtGui.QStandardItem(str(col_data))
                    self.model.setItem(row_num, col_num, item)
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Weather_36hours_Button)
        else:
            self.model.clear()
            self.set_tableButtonSelected(self.Weather_36hours_Button)
    def weather_2days_button_clicked(self):
        db = MySQLDatabase(host='127.0.0.1', user='root', password='', database='city')
        query = "SELECT * FROM weather_2days"
        self.weather_2days_data = db.execute_query(query)
        if self.weather_2days_data:
            self.model = QtGui.QStandardItemModel(len(self.weather_2days_data), len(self.weather_2days_data[0].keys()))
            self.model.setHorizontalHeaderLabels(self.weather_2days_data[0].keys())
            for row_num, row_data in enumerate(self.weather_2days_data):
                for col_num, col_data in enumerate(row_data.values()):
                    item = QtGui.QStandardItem(str(col_data))
                    self.model.setItem(row_num, col_num, item)
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Weather_2days_Button)
        else:
            self.model.clear()
            self.set_tableButtonSelected(self.Weather_2days_Button)
    def weather_week_button_clicked(self):
        db = MySQLDatabase(host='127.0.0.1', user='root', password='', database='city')
        query = "SELECT * FROM weather_week"
        self.weather_week_data = db.execute_query(query)
        if self.weather_week_data:
            self.model = QtGui.QStandardItemModel(len(self.weather_week_data), len(self.weather_week_data[0].keys()))
            self.model.setHorizontalHeaderLabels(self.weather_week_data[0].keys())
            for row_num, row_data in enumerate(self.weather_week_data):
                for col_num, col_data in enumerate(row_data.values()):
                    item = QtGui.QStandardItem(str(col_data))
                    self.model.setItem(row_num, col_num, item)
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Weather_week_Button)
        else:
            self.model.clear()
            self.set_tableButtonSelected(self.Weather_week_Button)
    def type_button_clicked(self):
        db = MySQLDatabase(host='127.0.0.1', user='root', password='', database='city')
        query = "SELECT * FROM type"
        self.type_data = db.execute_query(query)
        if self.type_data:
            self.model = QtGui.QStandardItemModel(len(self.type_data), len(self.type_data[0].keys()))
            self.model.setHorizontalHeaderLabels(self.type_data[0].keys())
            for row_num, row_data in enumerate(self.type_data):
                for col_num, col_data in enumerate(row_data.values()):
                    item = QtGui.QStandardItem(str(col_data))
                    self.model.setItem(row_num, col_num, item)
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Type_Button)
        else:
            self.model.clear()
            self.set_tableButtonSelected(self.Type_Button)
    def ids_button_clicked(self):
        db = MySQLDatabase(host='127.0.0.1', user='root', password='', database='city')
        query = "SELECT * FROM ids"
        self.ids_data = db.execute_query(query)
        if self.ids_data:
            self.model = QtGui.QStandardItemModel(len(self.ids_data), len(self.ids_data[0].keys()))
            self.model.setHorizontalHeaderLabels(self.ids_data[0].keys())
            for row_num, row_data in enumerate(self.ids_data):
                for col_num, col_data in enumerate(row_data.values()):
                    item = QtGui.QStandardItem(str(col_data))
                    self.model.setItem(row_num, col_num, item)
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Ids_Button)
        else:
            self.model.clear()
            self.set_tableButtonSelected(self.Ids_Button)
    def hotel_button_clicked(self):
        db = MySQLDatabase(host='127.0.0.1', user='root', password='', database='city')
        query = "SELECT * FROM hotel"
        self.hotel_data = db.execute_query(query)
        if self.hotel_data:
            self.model = QtGui.QStandardItemModel(len(self.hotel_data), len(self.hotel_data[0].keys()))
            self.model.setHorizontalHeaderLabels(self.hotel_data[0].keys())
            for row_num, row_data in enumerate(self.hotel_data):
                for col_num, col_data in enumerate(row_data.values()):
                    item = QtGui.QStandardItem(str(col_data))
                    if col_num == 5:
                        for type_ in self.type_classes:
                            if type_['type'] == 'hotel' and str(type_['class']) == str(col_data):
                                item = QtGui.QStandardItem(type_['name'])
                    self.model.setItem(row_num, col_num, item)
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Hotel_Button)
        else:
            self.model.clear()
            self.set_tableButtonSelected(self.Hotel_Button)
    def restaurant_button_clicked(self):
        db = MySQLDatabase(host='127.0.0.1', user='root', password='', database='city')
        query = "SELECT * FROM restaurant"
        self.restaurant_data = db.execute_query(query)
        if self.restaurant_data:
            self.model = QtGui.QStandardItemModel(len(self.restaurant_data), len(self.restaurant_data[0].keys()))
            self.model.setHorizontalHeaderLabels(self.restaurant_data[0].keys())
            for row_num, row_data in enumerate(self.restaurant_data):
                for col_num, col_data in enumerate(row_data.values()):
                    item = QtGui.QStandardItem(str(col_data))
                    if col_num in [14, 15, 16]:
                        for type_ in self.type_classes:
                            if type_['type'] == 'restaurant' and str(type_['class']) == str(col_data):
                                item = QtGui.QStandardItem(type_['name'])
                    self.model.setItem(row_num, col_num, item)
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Restaurant_Button)
        else:
            self.model.clear()
            self.set_tableButtonSelected(self.Restaurant_Button)
    def view_button_clicked(self):
        db = MySQLDatabase(host='127.0.0.1', user='root', password='', database='city')
        query = "SELECT * FROM view"
        self.view_data = db.execute_query(query)
        if self.view_data:
            self.model = QtGui.QStandardItemModel(len(self.view_data), len(self.view_data[0].keys()))
            self.model.setHorizontalHeaderLabels(self.view_data[0].keys())
            for row_num, row_data in enumerate(self.view_data):
                for col_num, col_data in enumerate(row_data.values()):

                    item = QtGui.QStandardItem(str(col_data))
                    if col_num in [19, 20, 21]:
                        for type_ in self.type_classes:
                            if type_['type'] == 'view' and str(type_['class']) == str(col_data):
                                item = QtGui.QStandardItem(type_['name'])
                    self.model.setItem(row_num, col_num, item)
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.View_Button)
        else:
            self.model.clear()
            self.set_tableButtonSelected(self.View_Button)
    def activity_button_clicked(self):
        db = MySQLDatabase(host='127.0.0.1', user='root', password='', database='city')
        query = "SELECT * FROM activity"
        self.activity_data = db.execute_query(query)
        if self.activity_data:
            self.model = QtGui.QStandardItemModel(len(self.activity_data), len(self.activity_data[0].keys()))
            self.model.setHorizontalHeaderLabels(self.activity_data[0].keys())
            for row_num, row_data in enumerate(self.activity_data):
                for col_num, col_data in enumerate(row_data.values()):
                    item = QtGui.QStandardItem(str(col_data))
                    if col_num in [16, 17, 18]:
                        for type_ in self.type_classes:
                            if type_['type'] == 'activity' and str(type_['class']) == str(col_data):
                                item = QtGui.QStandardItem(type_['name'])
                    self.model.setItem(row_num, col_num, item)
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Activity_Button)
        else:
            self.model.clear()
            self.set_tableButtonSelected(self.Activity_Button)
    def route_button_clicked(self):
        db = MySQLDatabase(host='127.0.0.1', user='root', password='', database='city')
        query = "SELECT * FROM route"
        self.route_data = db.execute_query(query)
        if self.route_data:
            self.model = QtGui.QStandardItemModel(len(self.route_data), len(self.route_data[0].keys()))
            self.model.setHorizontalHeaderLabels(self.route_data[0].keys())
            for row_num, row_data in enumerate(self.route_data):
                for col_num, col_data in enumerate(row_data.values()):
                    item = QtGui.QStandardItem(str(col_data))
                    self.model.setItem(row_num, col_num, item)
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Route_Button)
        else:
            self.model.clear()
            self.set_tableButtonSelected(self.Route_Button)
    def trip_button_clicked(self):
        db = MySQLDatabase(host='127.0.0.1', user='root', password='', database='city')
        query = "SELECT * FROM trip"
        self.trip_data = db.execute_query(query)
        if self.trip_data:
            self.model = QtGui.QStandardItemModel(len(self.trip_data), len(self.trip_data[0].keys()))
            self.model.setHorizontalHeaderLabels(self.trip_data[0].keys())
            for row_num, row_data in enumerate(self.trip_data):
                for col_num, col_data in enumerate(row_data.values()):
                    item = QtGui.QStandardItem(str(col_data))
                    self.model.setItem(row_num, col_num, item)
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Trip_Button)
        else:
            self.model.clear()
            self.set_tableButtonSelected(self.Trip_Button)
    def user_record_trip_button_clicked(self):
        db = MySQLDatabase(host='127.0.0.1', user='root', password='', database='city')
        query = "SELECT * FROM `user_record_trip`"
        self.user_record_trip_data = db.execute_query(query)
        if self.user_record_trip_data:
            self.model = QtGui.QStandardItemModel(len(self.user_record_trip_data), len(self.user_record_trip_data[0].keys()))
            self.model.setHorizontalHeaderLabels(self.user_record_trip_data[0].keys())
            for row_num, row_data in enumerate(self.user_record_trip_data):
                for col_num, col_data in enumerate(row_data.values()):
                    item = QtGui.QStandardItem(str(col_data))
                    self.model.setItem(row_num, col_num, item)
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.User_Record_Trip_Button)
        else:
            self.model.clear()
            self.set_tableButtonSelected(self.User_Record_Trip_Button)
    def travel_button_clicked(self):
        db = MySQLDatabase(host='127.0.0.1', user='root', password='', database='city')
        query = "SELECT * FROM travel"
        self.travel_data = db.execute_query(query)
        if self.travel_data:
            self.model = QtGui.QStandardItemModel(len(self.travel_data), len(self.travel_data[0].keys()))
            self.model.setHorizontalHeaderLabels(self.travel_data[0].keys())
            for row_num, row_data in enumerate(self.travel_data):
                for col_num, col_data in enumerate(row_data.values()):
                    item = QtGui.QStandardItem(str(col_data))
                    self.model.setItem(row_num, col_num, item)
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Travel_Button)
        else:
            self.model.clear()
            self.set_tableButtonSelected(self.Travel_Button)
    def user_record_travel_button_clicked(self):
        db = MySQLDatabase(host='127.0.0.1', user='root', password='', database='city')
        query = "SELECT * FROM user_record_travel"
        self.user_record_travel_data = db.execute_query(query)
        if self.user_record_travel_data:
            self.model = QtGui.QStandardItemModel(len(self.user_record_travel_data), len(self.user_record_travel_data[0].keys()))
            self.model.setHorizontalHeaderLabels(self.user_record_travel_data[0].keys())
            for row_num, row_data in enumerate(self.user_record_travel_data):
                for col_num, col_data in enumerate(row_data.values()):
                    item = QtGui.QStandardItem(str(col_data))
                    self.model.setItem(row_num, col_num, item)
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.User_Record_Travel_Button)
        else:
            self.model.clear()
            self.set_tableButtonSelected(self.User_Record_Travel_Button)
    def user_record_view_button_clicked(self):
        db = MySQLDatabase(host='127.0.0.1', user='root', password='', database='city')
        query = "SELECT * FROM user_record_view"
        self.user_record_view_data = db.execute_query(query)
        if self.user_record_view_data:
            self.model = QtGui.QStandardItemModel(len(self.user_record_view_data), len(self.user_record_view_data[0].keys()))
            self.model.setHorizontalHeaderLabels(self.user_record_view_data[0].keys())
            for row_num, row_data in enumerate(self.user_record_view_data):
                for col_num, col_data in enumerate(row_data.values()):
                    item = QtGui.QStandardItem(str(col_data))
                    self.model.setItem(row_num, col_num, item)
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.User_Record_View_Button)
        else:
            self.model.clear()
            self.set_tableButtonSelected(self.User_Record_View_Button)

    def search_button_clicked(self, button):
        self.set_tableButtonSelected
        self.selectedButton = button
        table_name = self.selected_table
        if table_name == "manager":
            search_input = self.Search_lineEdit
            search = search_input.text()
            query = f"SELECT* FROM `manager` WHERE `username` LIKE \"%{search}%\" OR `userpassword` LIKE \"%{search}%\""
            print(query)
            try:
                self.manager_data = self.db.execute_query(query)    
                print(self.manager_data)         
                if self.manager_data:
                    self.model = QtGui.QStandardItemModel(len(self.manager_data), len(self.manager_data[0].keys()))
                    self.model.setHorizontalHeaderLabels(self.manager_data[0].keys())
                    for row_num, row_data in enumerate(self.manager_data):
                        for col_num, col_data in enumerate(row_data.values()):
                            item = QtGui.QStandardItem(str(col_data))
                            self.model.setItem(row_num, col_num, item)
                    self.tableView.setModel(self.model)
                    print(self.model)
                    self.row = 1
                else:
                    self.model.clear()
            except Exception as e:
                print("Error executing query:", e)
                print("Search: No matching data found.")
                self.model.clear()
                self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Manager_Button) 
        elif table_name == "user":
            search_input = self.Search_lineEdit
            search = search_input.text()
            query = f"SELECT* FROM `user` WHERE `email` LIKE \"%{search}%\" OR `username` LIKE \"%{search}%\" OR `userpassword` LIKE \"%{search}%\""
            print(query)
            try:
                self.user_data = self.db.execute_query(query)
                if self.user_data:
                    self.model = QtGui.QStandardItemModel(len(self.user_data), len(self.user_data[0].keys()))
                    self.model.setHorizontalHeaderLabels(self.user_data[0].keys())
                    for row_num, row_data in enumerate(self.user_data):
                        for col_num, col_data in enumerate(row_data.values()):
                            item = QtGui.QStandardItem(str(col_data))
                            self.model.setItem(row_num, col_num, item)
                    self.tableView.setModel(self.model)
                    self.row = 0
                else:
                    self.model.clear()
            except Exception as e:
                print("Error executing query:", e)
                print("Search: No matching data found.")
                self.model.clear()
                self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.User_Button) 
        elif table_name == "city":
            search_input = self.Search_lineEdit
            search = search_input.text()
            query = f"SELECT* FROM `city` WHERE `city_id` LIKE \"%{search}%\""
            print(query)
            try:
                self.city_data = self.db.execute_query(query)
                
                if self.city_data:
                    self.model = QtGui.QStandardItemModel(len(self.city_data), len(self.city_data[0].keys()))
                    self.model.setHorizontalHeaderLabels(self.city_data[0].keys())
                    for row_num, row_data in enumerate(self.city_data):
                        for col_num, col_data in enumerate(row_data.values()):
                            item = QtGui.QStandardItem(str(col_data))
                            self.model.setItem(row_num, col_num, item)
                    self.tableView.setModel(self.model)
                else:
                    self.model.clear()
            except Exception as e:
                print("Error executing query:", e)
                print("Search: No matching data found.")
                self.model.clear()
                self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.City_Button)
        elif table_name == "site":
            search_input = self.Search_lineEdit
            search = search_input.text()
            query = f"SELECT* FROM `site` WHERE `city_id` LIKE \"%{search}%\" OR `site_id` LIKE \"%{search}%\""
            print(query)
            try:
                self.site_data = self.db.execute_query(query)
                if self.site_data:
                    self.model = QtGui.QStandardItemModel(len(self.site_data), len(self.site_data[0].keys()))
                    self.model.setHorizontalHeaderLabels(self.site_data[0].keys())
                    for row_num, row_data in enumerate(self.site_data):
                        for col_num, col_data in enumerate(row_data.values()):
                            item = QtGui.QStandardItem(str(col_data))
                            self.model.setItem(row_num, col_num, item)
                    self.tableView.setModel(self.model)
                else:
                    self.model.clear()
            except Exception as e:
                print("Error executing query:", e)
                print("Search: No matching data found.")
                self.model.clear()
                self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Site_Button)
        elif table_name == "weather_36hours":
            search_input = self.Search_lineEdit
            search = search_input.text()
            query = f"SELECT* FROM `weather_36hours` WHERE `城市` LIKE \"%{search}%\" OR  `開始日期` LIKE \"%{search}%\" OR `開始時間` LIKE \"%{search}%\" OR `結束日期` LIKE \"%{search}%\" OR `結束時間` LIKE \"%{search}%\" OR `天氣現象` LIKE \"%{search}%\" OR `最高溫度` LIKE \"%{search}%\" OR `最低溫度` LIKE \"%{search}%\" OR `舒適度指數` LIKE \"%{search}%\" OR `降雨機率` LIKE \"%{search}%\""
            print(query)
            try:
                self.weather_36hours_data = self.db.execute_query(query)                
                if self.weather_36hours_data:
                    self.model = QtGui.QStandardItemModel(len(self.weather_36hours_data), len(self.weather_36hours_data[0].keys()))
                    self.model.setHorizontalHeaderLabels(self.weather_36hours_data[0].keys())
                    for row_num, row_data in enumerate(self.weather_36hours_data):
                        for col_num, col_data in enumerate(row_data.values()):
                            item = QtGui.QStandardItem(str(col_data))
                            self.model.setItem(row_num, col_num, item)
                    self.tableView.setModel(self.model)
                else:
                    self.model.clear()
            except Exception as e:
                print("Error executing query:", e)
                print("Search: No matching data found.")
                self.model.clear()
                self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Weather_36hours_Button)
        elif table_name == "weather_2days":
            search_input = self.Search_lineEdit
            search = search_input.text()
            query = f"SELECT* FROM `weather_2days` WHERE `城市` LIKE \"%{search}%\" OR `鄉鎮` LIKE \"%{search}%\" OR `開始日期` LIKE \"%{search}%\" OR `開始時間` LIKE \"%{search}%\" OR `結束日期` LIKE \"%{search}%\" OR `結束時間` LIKE \"%{search}%\" OR `溫度` LIKE \"%{search}%\" OR `露點溫度` LIKE \"%{search}%\" OR `相對濕度` LIKE \"%{search}%\" OR `6小時降雨機率` LIKE \"%{search}%\"OR `12小時降雨機率` LIKE \"%{search}%\" OR `風向` LIKE \"%{search}%\" OR `風速` LIKE \"%{search}%\" OR `舒適度指數` LIKE \"%{search}%\" OR `體感溫度` LIKE \"%{search}%\" OR `天氣現象` LIKE \"%{search}%\" OR `天氣預報綜合描述` LIKE \"%{search}%\""
            print(query)
            try:
                self.weather_2days_data = self.db.execute_query(query)
                if self.weather_2days_data:
                    self.model = QtGui.QStandardItemModel(len(self.weather_2days_data), len(self.weather_2days_data[0].keys()))
                    self.model.setHorizontalHeaderLabels(self.weather_2days_data[0].keys())
                    for row_num, row_data in enumerate(self.weather_2days_data):
                        for col_num, col_data in enumerate(row_data.values()):
                            item = QtGui.QStandardItem(str(col_data))
                            self.model.setItem(row_num, col_num, item)
                    self.tableView.setModel(self.model)
                else:
                    self.model.clear()
            except Exception as e:
                print("Error executing query:", e)
                print("Search: No matching data found.")
                self.model.clear()
                self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Weather_2days_Button)
        elif table_name == "weather_week":
            search_input = self.Search_lineEdit
            search = search_input.text()
            query = f"SELECT* FROM `weather_week` WHERE `城市` LIKE \"%{search}%\" OR `鄉鎮` LIKE \"%{search}%\" OR `開始日期` LIKE \"%{search}%\" OR `開始時間` LIKE \"%{search}%\" OR `結束日期` LIKE \"%{search}%\" OR `結束時間` LIKE \"%{search}%\" OR `平均溫度` LIKE \"%{search}%\" OR `平均露點溫度` LIKE \"%{search}%\" OR `平均相對濕度` LIKE \"%{search}%\" OR `最高溫度` LIKE \"%{search}%\" OR `最低溫度` LIKE \"%{search}%\" OR `最高體感溫度` LIKE \"%{search}%\" OR `最低體感溫度` LIKE \"%{search}%\" OR `最大舒適度指數` LIKE \"%{search}%\" OR `最小舒適度指數` LIKE \"%{search}%\" OR `12小時降雨機率` LIKE \"%{search}%\" OR `風向` LIKE \"%{search}%\" OR `最大風速` LIKE \"%{search}%\" OR `天氣現象` LIKE \"%{search}%\" OR `紫外線指數` LIKE \"%{search}%\" OR `天氣預報綜合描述` LIKE \"%{search}%\""
            print(query)
            try:
                self.weather_week_data = self.db.execute_query(query)
                if self.weather_week_data:
                    self.model = QtGui.QStandardItemModel(len(self.weather_week_data), len(self.weather_week_data[0].keys()))
                    self.model.setHorizontalHeaderLabels(self.weather_week_data[0].keys())
                    for row_num, row_data in enumerate(self.weather_week_data):
                        for col_num, col_data in enumerate(row_data.values()):
                            item = QtGui.QStandardItem(str(col_data))
                            self.model.setItem(row_num, col_num, item)
                    self.tableView.setModel(self.model)
                else:
                    self.model.clear()
            except Exception as e:
                print("Error executing query:", e)
                print("Search: No matching data found.")
                self.model.clear()
                self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Weather_week_Button)
        elif table_name == "type":
            search_input = self.Search_lineEdit
            search = search_input.text()
            query = f"SELECT* FROM `type` WHERE `Type` LIKE \"%{search}%\""
            print(query)
            try:
                self.type_data = self.db.execute_query(query)
                if self.type_data:
                    self.model = QtGui.QStandardItemModel(len(self.type_data), len(self.type_data[0].keys()))
                    self.model.setHorizontalHeaderLabels(self.type_data[0].keys())
                    for row_num, row_data in enumerate(self.type_data):
                        for col_num, col_data in enumerate(row_data.values()):
                            item = QtGui.QStandardItem(str(col_data))
                            self.model.setItem(row_num, col_num, item)
                    self.tableView.setModel(self.model)
                else:
                    self.model.clear()
            except Exception as e:
                print("Error executing query:", e)
                print("Search: No matching data found.")
                self.model.clear()
                self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Type_Button)
        elif table_name == "ids":
            search_input = self.Search_lineEdit
            search = search_input.text()
            query = f"SELECT* FROM `ids` WHERE `Type` LIKE \"%{search}%\" OR `ID` LIKE \"%{search}%\" OR`name` LIKE \"%{search}%\""
            print(query)
            try:
                self.ids_data = self.db.execute_query(query)
                if self.ids_data:
                    self.model = QtGui.QStandardItemModel(len(self.ids_data), len(self.ids_data[0].keys()))
                    self.model.setHorizontalHeaderLabels(self.ids_data[0].keys())
                    for row_num, row_data in enumerate(self.ids_data):
                        for col_num, col_data in enumerate(row_data.values()):
                            item = QtGui.QStandardItem(str(col_data))
                            self.model.setItem(row_num, col_num, item)
                    self.tableView.setModel(self.model)
                else:
                    self.model.clear()
            except Exception as e:
                print("Error executing query:", e)
                print("Search: No matching data found.")
                self.model.clear()
                self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Ids_Button)
        elif table_name == "hotel":
            search_input = self.Search_lineEdit
            search = search_input.text()
            query = f"SELECT* FROM `hotel` WHERE `ID` LIKE \"%{search}%\" OR `城市` LIKE \"%{search}%\" OR `鄉鎮` LIKE \"%{search}%\" OR `地址` LIKE \"%{search}%\" OR `名字` LIKE \"%{search}%\" OR `旅館類別` LIKE \"%{search}%\" OR `描述` LIKE \"%{search}%\" OR `網址` LIKE \"%{search}%\" OR `電話` LIKE \"%{search}%\" OR `服務資訊` LIKE \"%{search}%\" OR `房型` LIKE \"%{search}%\" OR `停車資訊` LIKE \"%{search}%\" OR `照片1` LIKE \"%{search}%\" OR `照片描述1` LIKE \"%{search}%\" OR `照片2` LIKE \"%{search}%\" OR `照片描述2` LIKE \"%{search}%\" OR `照片3` LIKE \"%{search}%\" OR `照片描述3` LIKE \"%{search}%\" OR `最低價格` LIKE \"%{search}%\" OR `最高價格` LIKE \"%{search}%\" OR `可容納人數` LIKE \"%{search}%\" OR `經度` LIKE \"%{search}%\" OR `緯度` LIKE \"%{search}%\""
            print(query)
            try:
                self.hotel_data = self.db.execute_query(query)
                if self.hotel_data:
                    self.model = QtGui.QStandardItemModel(len(self.hotel_data), len(self.hotel_data[0].keys()))
                    self.model.setHorizontalHeaderLabels(self.hotel_data[0].keys())
                    for row_num, row_data in enumerate(self.hotel_data):
                        for col_num, col_data in enumerate(row_data.values()):
                            item = QtGui.QStandardItem(str(col_data))
                            self.model.setItem(row_num, col_num, item)
                    self.tableView.setModel(self.model)
                else:
                    self.model.clear()
            except Exception as e:
                print("Error executing query:", e)
                print("Search: No matching data found.")
                self.model.clear()
                self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Hotel_Button)
        elif table_name == "restaurant":
            search_input = self.Search_lineEdit
            search = search_input.text()
            query = f"SELECT* FROM `restaurant` WHERE `ID` LIKE \"%{search}%\" OR `城市` LIKE \"%{search}%\" OR `鄉鎮` LIKE \"%{search}%\" OR `郵遞區號` LIKE \"%{search}%\" OR `地址` LIKE \"%{search}%\" OR `名字` LIKE \"%{search}%\" OR `簡述` LIKE \"%{search}%\" OR `電話` LIKE \"%{search}%\" OR `照片1` LIKE \"%{search}%\" OR `照片描述1` LIKE \"%{search}%\" OR `照片2` LIKE \"%{search}%\" OR `照片描述2` LIKE \"%{search}%\" OR `照片3` LIKE \"%{search}%\" OR `照片描述3` LIKE \"%{search}%\" OR `餐廳類型1` LIKE \"%{search}%\" OR `餐廳類型2` LIKE \"%{search}%\" OR `餐廳類型3` LIKE \"%{search}%\" OR `網址` LIKE \"%{search}%\" OR `經度` LIKE \"%{search}%\" OR `緯度` LIKE \"%{search}%\" OR `停車資訊` LIKE \"%{search}%\" OR `服務時間` LIKE \"%{search}%\""
            print(query)
            try:
                self.restaurant_data = self.db.execute_query(query)
                if self.restaurant_data:
                    self.model = QtGui.QStandardItemModel(len(self.restaurant_data), len(self.restaurant_data[0].keys()))
                    self.model.setHorizontalHeaderLabels(self.restaurant_data[0].keys())
                    for row_num, row_data in enumerate(self.restaurant_data):
                        for col_num, col_data in enumerate(row_data.values()):
                            item = QtGui.QStandardItem(str(col_data))
                            self.model.setItem(row_num, col_num, item)
                    self.tableView.setModel(self.model)
                else:
                    self.model.clear()
            except Exception as e:
                print("Error executing query:", e)
                print("Search: No matching data found.")
                self.model.clear()       
                self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Restaurant_Button)
        elif table_name == "view":
            search_input = self.Search_lineEdit
            search = search_input.text()
            query = f"SELECT* FROM `view` where `ID` LIKE \"%{search}%\" OR `城市` LIKE \"%{search}%\" OR `鄉鎮` LIKE \"%{search}%\" OR `郵遞區號` LIKE \"%{search}%\" OR `地址` LIKE \"%{search}%\" OR `名字` LIKE \"%{search}%\" OR `網址` LIKE \"%{search}%\" OR `描述` LIKE \"%{search}%\" OR `電話` LIKE \"%{search}%\" OR `旅遊資訊` LIKE \"%{search}%\" OR `停車資訊` LIKE \"%{search}%\" OR `照片1` LIKE \"%{search}%\" OR `照片描述1` LIKE \"%{search}%\" OR `照片2` LIKE \"%{search}%\" OR `照片描述2` LIKE \"%{search}%\" OR `照片3` LIKE \"%{search}%\" OR `照片描述3` LIKE \"%{search}%\" OR `經度` LIKE \"%{search}%\" OR `緯度` LIKE \"%{search}%\" OR `景點類型1` LIKE \"%{search}%\" OR `景點類型2` LIKE \"%{search}%\" OR `景點類型3` LIKE \"%{search}%\" OR `最高價格` LIKE \"%{search}%\" OR `最低價格` LIKE \"%{search}%\" OR `詳細價格描述` LIKE \"%{search}%\" OR `服務時間` LIKE \"%{search}%\" "
            print(query)
            try:
                self.view_data = self.db.execute_query(query)
                if self.view_data:
                    self.model = QtGui.QStandardItemModel(len(self.view_data), len(self.view_data[0].keys()))
                    self.model.setHorizontalHeaderLabels(self.view_data[0].keys())
                    for row_num, row_data in enumerate(self.view_data):
                        for col_num, col_data in enumerate(row_data.values()):
                            item = QtGui.QStandardItem(str(col_data))
                            self.model.setItem(row_num, col_num, item)
                    self.tableView.setModel(self.model)
                else:
                    self.model.clear()
            except Exception as e:
                print("Error executing query:", e)
                print("Search: No matching data found.")
                self.model.clear()
                self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.View_Button)
        elif table_name == "activity":
            search_input = self.Search_lineEdit
            search = search_input.text()
            query = f"SELECT* FROM `activity` WHERE `ID` LIKE \"%{search}%\" OR `城市` LIKE \"%{search}%\" OR `鄉鎮` LIKE \"%{search}%\" OR `地址` LIKE \"%{search}%\" OR `名字` LIKE \"%{search}%\" OR `網址` LIKE \"%{search}%\" OR `簡述` LIKE \"%{search}%\" OR `電話` LIKE \"%{search}%\" OR `主辦單位` LIKE \"%{search}%\" OR `停車資訊` LIKE \"%{search}%\" OR `照片1` LIKE \"%{search}%\" OR `照片描述1` LIKE \"%{search}%\" OR `照片2` LIKE \"%{search}%\" OR `照片描述2` LIKE \"%{search}%\" OR `照片3` LIKE \"%{search}%\" OR `照片描述3` LIKE \"%{search}%\" OR `類別1` LIKE \"%{search}%\" OR `類別2` LIKE \"%{search}%\" OR `類別3` LIKE \"%{search}%\" OR `收費` LIKE \"%{search}%\" OR `經度` LIKE \"%{search}%\" OR `緯度` LIKE \"%{search}%\" OR `開始時間` LIKE \"%{search}%\" OR `結束時間` LIKE \"%{search}%\" OR `活動參與對象` LIKE \"%{search}%\" OR `交通資訊` LIKE \"%{search}%\""
            print(query)
            try:
                self.activity_data = self.db.execute_query(query)
                if self.activity_data:
                    self.model = QtGui.QStandardItemModel(len(self.activity_data), len(self.activity_data[0].keys()))
                    self.model.setHorizontalHeaderLabels(self.activity_data[0].keys())
                    for row_num, row_data in enumerate(self.activity_data):
                        for col_num, col_data in enumerate(row_data.values()):
                            item = QtGui.QStandardItem(str(col_data))
                            self.model.setItem(row_num, col_num, item)
                    self.tableView.setModel(self.model)
                else:
                    self.model.clear()
            except Exception as e:
                print("Error executing query:", e)
                print("Search: No matching data found.")
                self.model.clear()
                self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Activity_Button)
        elif table_name == "route":
            search_input = self.Search_lineEdit
            search = search_input.text()
            query = f"SELECT* FROM `route` WHERE `travelId` LIKE \"%{search}%\" OR `DayId` LIKE \"{search}\" OR `tripStartId` LIKE \"{search}\" OR `routeId` LIKE \"{search}\" OR `routeName` LIKE \"{search}\""
            print(query)
            try:
                self.route_data = self.db.execute_query(query)
                if self.route_data:
                    self.model = QtGui.QStandardItemModel(len(self.route_data), len(self.route_data[0].keys()))
                    self.model.setHorizontalHeaderLabels(self.route_data[0].keys())
                    for row_num, row_data in enumerate(self.route_data):
                        for col_num, col_data in enumerate(row_data.values()):
                            item = QtGui.QStandardItem(str(col_data))
                            self.model.setItem(row_num, col_num, item)
                    self.tableView.setModel(self.model)
                else:
                    self.model.clear()
            except Exception as e:
                print("Error executing query:", e)
                print("Search: No matching data found.")
                self.model.clear()
                self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Route_Button)
        elif table_name == "trip":
            search_input = self.Search_lineEdit
            search = search_input.text()
            query = f"SELECT* FROM `trip` WHERE `TravelId` LIKE \"%{search}%\" OR `DayId` LIKE \"{search}\" OR `ViewId` LIKE \"{search}\" OR `Type` LIKE \"{search}\" OR `TripId` LIKE \"{search}\" OR `Id` LIKE \"{search}\" OR `date` LIKE \"{search}\" OR `time` LIKE \"{search}\" OR `weather` LIKE \"{search}\""
            print(query)
            try:
                self.trip_data = self.db.execute_query(query)
                if self.trip_data:
                    self.model = QtGui.QStandardItemModel(len(self.trip_data), len(self.trip_data[0].keys()))
                    self.model.setHorizontalHeaderLabels(self.trip_data[0].keys())
                    for row_num, row_data in enumerate(self.trip_data):
                        for col_num, col_data in enumerate(row_data.values()):
                            item = QtGui.QStandardItem(str(col_data))
                            self.model.setItem(row_num, col_num, item)
                    self.tableView.setModel(self.model)
                else:
                    self.model.clear()
            except Exception as e:
                print("Error executing query:", e)
                print("Search: No matching data found.")
                self.model.clear()
                self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Trip_Button)
        elif table_name == "user_record_trip":
            search_input = self.Search_lineEdit
            search = search_input.text()
            query = f"SELECT* FROM `user_record_trip` WHERE `userId` LIKE \"%{search}%\" OR `TravelId` LIKE \"{search}\" OR `DayId` LIKE \"{search}\" OR `isLike` LIKE \"{search}\" OR `isStore` LIKE \"{search}\""
            print(query)
            try:
                self.user_record_trip_data = self.db.execute_query(query)
                if self.user_record_trip_data:
                    self.model = QtGui.QStandardItemModel(len(self.user_record_trip_data), len(self.user_record_trip_data[0].keys()))
                    self.model.setHorizontalHeaderLabels(self.user_record_trip_data[0].keys())
                    for row_num, row_data in enumerate(self.user_record_trip_data):
                        for col_num, col_data in enumerate(row_data.values()):
                            item = QtGui.QStandardItem(str(col_data))
                            self.model.setItem(row_num, col_num, item)
                    self.tableView.setModel(self.model)
                else:
                    self.model.clear()
            except Exception as e:
                print("Error executing query:", e)
                print("Search: No matching data found.")
                self.model.clear()
                self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.User_Record_Trip_Button)
        elif table_name == "travel":
            search_input = self.Search_lineEdit
            search = search_input.text()
            query = f"SELECT* FROM `travel` WHERE `TravelId` LIKE \"%{search}%\" OR `TravelName` LIKE \"{search}\" OR `userId ` LIKE \"{search}\""
            print(query)
            try:
                self.travel_data = self.db.execute_query(query)
                if self.travel_data:
                    self.model = QtGui.QStandardItemModel(len(self.travel_data), len(self.travel_data[0].keys()))
                    self.model.setHorizontalHeaderLabels(self.travel_data[0].keys())
                    for row_num, row_data in enumerate(self.travel_data):
                        for col_num, col_data in enumerate(row_data.values()):
                            item = QtGui.QStandardItem(str(col_data))
                            self.model.setItem(row_num, col_num, item)
                    self.tableView.setModel(self.model)
                else:
                    self.model.clear()
            except Exception as e:
                print("Error executing query:", e)
                print("Search: No matching data found.")
                self.model.clear()
                self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Travel_Button)
        elif table_name == "user_record_travel":
            search_input = self.Search_lineEdit
            search = search_input.text()
            query = f"SELECT* FROM `user_record_travel` WHERE `userId` LIKE \"%{search}%\" OR `TravelId` LIKE \"{search}\" OR `isLike` LIKE \"{search}\" OR `isStore` LIKE \"{search}\""
            print(query)
            try:
                user_rocord_travel_data = self.db.execute_query(query)
                if user_rocord_travel_data:
                    self.model = QtGui.QStandardItemModel(len(user_rocord_travel_data), len(user_rocord_travel_data[0].keys()))
                    self.model.setHorizontalHeaderLabels(user_rocord_travel_data[0].keys())
                    for row_num, row_data in enumerate(user_rocord_travel_data):
                        for col_num, col_data in enumerate(row_data.values()):
                            item = QtGui.QStandardItem(str(col_data))
                            self.model.setItem(row_num, col_num, item)
                    self.tableView.setModel(self.model)
                else:
                    self.model.clear()
            except Exception as e:
                print("Error executing query:", e)
                print("Search: No matching data found.")
                self.model.clear()
                self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.User_Record_Travel_Button)
        elif table_name == "user_record_view":
            search_input = self.Search_lineEdit
            search = search_input.text()
            query = f"SELECT* FROM `user_record_view` WHERE `userId` LIKE \"%{search}%\" OR `Type` LIKE \"{search}\" OR `ID` LIKE \"{search}\" OR `isLike` LIKE \"{search}\" OR `isStore` LIKE \"{search}\""
            print(query)
            try:
                user_rocord_view_data = self.db.execute_query(query)
                if user_rocord_view_data:
                    self.model = QtGui.QStandardItemModel(len(user_rocord_view_data), len(user_rocord_view_data[0].keys()))
                    self.model.setHorizontalHeaderLabels(user_rocord_view_data[0].keys())
                    for row_num, row_data in enumerate(user_rocord_view_data):
                        for col_num, col_data in enumerate(row_data.values()):
                            item = QtGui.QStandardItem(str(col_data))
                            self.model.setItem(row_num, col_num, item)
                    self.tableView.setModel(self.model)
                else:
                    self.model.clear()
            except Exception as e:
                print("Error executing query:", e)
                print("Search: No matching data found.")
                self.model.clear()
                self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.User_Record_View_Button)
        else:
            dialog = QDialog()
            dialog.setWindowTitle("提示")
            dialog.setModal(True)
            dialog.resize(192, 108)
            layout = QVBoxLayout()
            text_label = QLabel("請先選擇表格")
            text_label.setAlignment(Qt.AlignCenter)
            layout.addWidget(text_label)
            ok_button = QPushButton("確定")
            ok_button.clicked.connect(dialog.accept)
            ok_button.setFixedWidth(100)
            ok_button.setFixedHeight(30)
            layout.addWidget(ok_button, alignment=Qt.AlignCenter)            
            dialog.setLayout(layout)            
            dialog.exec_()
    def refresh_table(self, table_name):
        if table_name == "manager":
            query = "SELECT * FROM `manager`"
            self.manager_data = self.db.execute_query(query)
            if self.manager_data:
                self.model = QtGui.QStandardItemModel(len(self.manager_data), len(self.manager_data[0].keys()))
                self.model.setHorizontalHeaderLabels(self.manager_data[0].keys())
                for row_num, row_data in enumerate(self.manager_data):
                    for col_num, col_data in enumerate(row_data.values()):
                        item = QtGui.QStandardItem(str(col_data))
                        self.model.setItem(row_num, col_num, item)
            else:
                self.model.clear()
                self.set_tableButtonSelected(self.Manager_Button)
            self.tableView.setModel(self.model)
            print(self.model)
            self.set_tableButtonSelected(self.Manager_Button)       
        elif table_name == "user":
            query = "SELECT * FROM `user`"
            self.user_data = self.db.execute_query(query)
            if self.user_data:
                self.model = QtGui.QStandardItemModel(len(self.user_data), len(self.user_data[0].keys()))
                self.model.setHorizontalHeaderLabels(self.user_data[0].keys())
                for row_num, row_data in enumerate(self.user_data):
                    for col_num, col_data in enumerate(row_data.values()):
                        item = QtGui.QStandardItem(str(col_data))
                        self.model.setItem(row_num, col_num, item)
            else:
                self.model.clear()
                self.set_tableButtonSelected(self.User_Button)
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.User_Button)
        elif table_name == "city":
            query = "SELECT * FROM `city`"
            self.city_data = self.db.execute_query(query)
            if self.city_data:
                self.model = QtGui.QStandardItemModel(len(self.city_data), len(self.city_data[0].keys()))
                self.model.setHorizontalHeaderLabels(self.city_data[0].keys())
                for row_num, row_data in enumerate(self.city_data):
                    for col_num, col_data in enumerate(row_data.values()):
                        item = QtGui.QStandardItem(str(col_data))
                        self.model.setItem(row_num, col_num, item)
            else:
                self.model.clear()
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.City_Button)
        elif table_name == "site":
            query = "SELECT * FROM `site`"
            self.site_data = self.db.execute_query(query)
            if self.site_data:
                self.model = QtGui.QStandardItemModel(len(self.site_data), len(self.site_data[0].keys()))
                self.model.setHorizontalHeaderLabels(self.site_data[0].keys())
                for row_num, row_data in enumerate(self.site_data):
                    for col_num, col_data in enumerate(row_data.values()):
                        item = QtGui.QStandardItem(str(col_data))
                        self.model.setItem(row_num, col_num, item)
            else:
                self.model.clear()
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Site_Button)
        elif table_name == "weather_36hours":
            query = "SELECT * FROM `weather_36hours`"
            self.weather_36hours_data = self.db.execute_query(query)
            if self.weather_36hours_data:
                self.model = QtGui.QStandardItemModel(len(self.weather_36hours_data), len(self.weather_36hours_data[0].keys()))
                self.model.setHorizontalHeaderLabels(self.weather_36hours_data[0].keys())
                for row_num, row_data in enumerate(self.weather_36hours_data):
                    for col_num, col_data in enumerate(row_data.values()):
                        item = QtGui.QStandardItem(str(col_data))
                        self.model.setItem(row_num, col_num, item)
            else:
                self.model.clear()
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Weather_36hours_Button)
        elif table_name == "weather_2days":
            query = "SELECT * FROM `weather_2days`"
            self.weather_2days_data = self.db.execute_query(query)
            if self.weather_2days_data:
                self.model = QtGui.QStandardItemModel(len(self.weather_2days_data), len(self.weather_2days_data[0].keys()))
                self.model.setHorizontalHeaderLabels(self.weather_2days_data[0].keys())
                for row_num, row_data in enumerate(self.weather_2days_data):
                    for col_num, col_data in enumerate(row_data.values()):
                        item = QtGui.QStandardItem(str(col_data))
                        self.model.setItem(row_num, col_num, item)
            else:
                self.model.clear()
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Weather_2days_Button)
        elif table_name == "weather_week":
            query = "SELECT * FROM `weather_week`"
            self.weather_week_data = self.db.execute_query(query)
            if self.weather_week_data:
                self.model = QtGui.QStandardItemModel(len(self.weather_week_data), len(self.weather_week_data[0].keys()))
                self.model.setHorizontalHeaderLabels(self.weather_week_data[0].keys())
                for row_num, row_data in enumerate(self.weather_week_data):
                    for col_num, col_data in enumerate(row_data.values()):
                        item = QtGui.QStandardItem(str(col_data))
                        self.model.setItem(row_num, col_num, item)
            else:
                self.model.clear()
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Weather_week_Button)
        elif table_name == "type":
            query = "SELECT * FROM `type`"
            self.type_data = self.db.execute_query(query)
            if self.type_data:
                self.model = QtGui.QStandardItemModel(len(self.type_data), len(self.type_data[0].keys()))
                self.model.setHorizontalHeaderLabels(self.type_data[0].keys())
                for row_num, row_data in enumerate(self.type_data):
                    for col_num, col_data in enumerate(row_data.values()):
                        item = QtGui.QStandardItem(str(col_data))
                        self.model.setItem(row_num, col_num, item)
            else:
                self.model.clear()
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Type_Button)
        elif table_name == "ids":
            query = "SELECT * FROM `ids`"
            self.ids_data = self.db.execute_query(query)
            if self.ids_data:
                self.model = QtGui.QStandardItemModel(len(self.ids_data), len(self.ids_data[0].keys()))
                self.model.setHorizontalHeaderLabels(self.ids_data[0].keys())
                for row_num, row_data in enumerate(self.ids_data):
                    for col_num, col_data in enumerate(row_data.values()):
                        item = QtGui.QStandardItem(str(col_data))
                        self.model.setItem(row_num, col_num, item)
            else:
                self.model.clear()
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Ids_Button)
        elif table_name == "hotel":
            query = "SELECT * FROM `hotel`"
            self.hotel_data = self.db.execute_query(query)
            if self.hotel_data:
                self.model = QtGui.QStandardItemModel(len(self.hotel_data), len(self.hotel_data[0].keys()))
                self.model.setHorizontalHeaderLabels(self.hotel_data[0].keys())
                for row_num, row_data in enumerate(self.hotel_data):
                    for col_num, col_data in enumerate(row_data.values()):
                        item = QtGui.QStandardItem(str(col_data))
                        if col_num == 5:
                            for type_ in self.type_classes:
                                if type_['type'] == 'hotel' and str(type_['class']) == str(col_data):
                                    item = QtGui.QStandardItem(type_['name'])
                        self.model.setItem(row_num, col_num, item)
                self.tableView.setModel(self.model)
                self.set_tableButtonSelected(self.Hotel_Button)
            else:
                self.model.clear()
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Hotel_Button)
        elif table_name == "restaurant":
            query = "SELECT * FROM `restaurant`"
            self.restaurant_data = self.db.execute_query(query)
            if self.restaurant_data:
                self.model = QtGui.QStandardItemModel(len(self.restaurant_data), len(self.restaurant_data[0].keys()))
                self.model.setHorizontalHeaderLabels(self.restaurant_data[0].keys())
                for row_num, row_data in enumerate(self.restaurant_data):
                    for col_num, col_data in enumerate(row_data.values()):

                        item = QtGui.QStandardItem(str(col_data))
                        if col_num in [14, 15, 16]:
                            for type_ in self.type_classes:
                                if type_['type'] == 'restaurant' and str(type_['class']) == str(col_data):
                                    item = QtGui.QStandardItem(type_['name'])
                        self.model.setItem(row_num, col_num, item)
                self.tableView.setModel(self.model)
                self.set_tableButtonSelected(self.Restaurant_Button)
            else:
                self.model.clear()
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Restaurant_Button)
        elif table_name == "view":
            query = "SELECT * FROM `view`"
            self.view_data = self.db.execute_query(query)
            if self.view_data:
                self.model = QtGui.QStandardItemModel(len(self.view_data), len(self.view_data[0].keys()))
                self.model.setHorizontalHeaderLabels(self.view_data[0].keys())
                for row_num, row_data in enumerate(self.view_data):
                    for col_num, col_data in enumerate(row_data.values()):
                        item = QtGui.QStandardItem(str(col_data))
                        if col_num in [19, 20, 21]:
                            for type_ in self.type_classes:
                                if type_['type'] == 'view' and str(type_['class']) == str(col_data):
                                    item = QtGui.QStandardItem(type_['name'])
                        self.model.setItem(row_num, col_num, item)
                self.tableView.setModel(self.model)
                self.set_tableButtonSelected(self.View_Button)
            else:
                self.model.clear()
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.View_Button)
        elif table_name == "activity":
            query = "SELECT * FROM `activity`"
            self.activity_data = self.db.execute_query(query)
            if self.activity_data:
                self.model = QtGui.QStandardItemModel(len(self.activity_data), len(self.activity_data[0].keys()))
                self.model.setHorizontalHeaderLabels(self.activity_data[0].keys())
                for row_num, row_data in enumerate(self.activity_data):
                    for col_num, col_data in enumerate(row_data.values()):
                        item = QtGui.QStandardItem(str(col_data))
                        if col_num in [16, 17, 18]:
                            for type_ in self.type_classes:
                                if type_['type'] == 'activity' and str(type_['class']) == str(col_data):
                                    item = QtGui.QStandardItem(type_['name'])
                        self.model.setItem(row_num, col_num, item)
                self.tableView.setModel(self.model)
                self.set_tableButtonSelected(self.Activity_Button)
            else:
                self.model.clear()
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Activity_Button)
        elif table_name == "route":
            query = "SELECT * FROM `route`"
            self.route_data = self.db.execute_query(query)
            if self.route_data:
                self.model = QtGui.QStandardItemModel(len(self.route_data), len(self.route_data[0].keys()))
                self.model.setHorizontalHeaderLabels(self.route_data[0].keys())
                for row_num, row_data in enumerate(self.route_data):
                    for col_num, col_data in enumerate(row_data.values()):
                        item = QtGui.QStandardItem(str(col_data))
                        self.model.setItem(row_num, col_num, item)
            else:
                self.model.clear()
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Route_Button)
        elif table_name == "trip":
            query = "SELECT * FROM `trip`"
            self.trip_data = self.db.execute_query(query)
            if self.trip_data:
                self.model = QtGui.QStandardItemModel(len(self.trip_data), len(self.trip_data[0].keys()))
                self.model.setHorizontalHeaderLabels(self.trip_data[0].keys())
                for row_num, row_data in enumerate(self.trip_data):
                    for col_num, col_data in enumerate(row_data.values()):
                        item = QtGui.QStandardItem(str(col_data))
                        self.model.setItem(row_num, col_num, item)
            else:
                self.model.clear()
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Trip_Button)
        elif table_name == "user_record_trip":
            query = "SELECT * FROM `user_record_trip`"
            self.user_record_trip_data = self.db.execute_query(query)
            if self.user_record_trip_data:
                self.model = QtGui.QStandardItemModel(len(self.user_record_trip_data), len(self.user_record_trip_data[0].keys()))
                self.model.setHorizontalHeaderLabels(self.user_record_trip_data[0].keys())
                for row_num, row_data in enumerate(self.user_record_trip_data):
                    for col_num, col_data in enumerate(row_data.values()):
                        item = QtGui.QStandardItem(str(col_data))
                        self.model.setItem(row_num, col_num, item)
            else:
                self.model.clear()
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.User_Record_Trip_Button)
        elif table_name == "travel":
            query = "SELECT * FROM `travel`"
            self.travel_data = self.db.execute_query(query)
            if self.travel_data:
                self.model = QtGui.QStandardItemModel(len(self.travel_data), len(self.travel_data[0].keys()))
                self.model.setHorizontalHeaderLabels(self.travel_data[0].keys())
                for row_num, row_data in enumerate(self.travel_data):
                    for col_num, col_data in enumerate(row_data.values()):
                        item = QtGui.QStandardItem(str(col_data))
                        self.model.setItem(row_num, col_num, item)
            else:
                self.model.clear()
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.Travel_Button)
        elif table_name == "user_record_travel":
            query = "SELECT * FROM `user_record_travel`"
            self.user_record_travel_data = self.db.execute_query(query)
            if self.user_record_travel_data:
                self.model = QtGui.QStandardItemModel(len(self.user_record_travel_data), len(self.user_record_travel_data[0].keys()))
                self.model.setHorizontalHeaderLabels(self.user_record_travel_data[0].keys())
                for row_num, row_data in enumerate(self.user_record_travel_data):
                    for col_num, col_data in enumerate(row_data.values()):
                        item = QtGui.QStandardItem(str(col_data))
                        self.model.setItem(row_num, col_num, item)
            else:
                self.model.clear()
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.User_Record_Travel_Button)
        elif table_name == "user_record_view":
            query = "SELECT * FROM `user_record_view`"
            self.user_record_view_data = self.db.execute_query(query)
            if self.user_record_view_data:
                self.model = QtGui.QStandardItemModel(len(self.user_record_view_data), len(self.user_record_view_data[0].keys()))
                self.model.setHorizontalHeaderLabels(self.user_record_view_data[0].keys())
                for row_num, row_data in enumerate(self.user_record_view_data):
                    for col_num, col_data in enumerate(row_data.values()):
                        item = QtGui.QStandardItem(str(col_data))
                        self.model.setItem(row_num, col_num, item)
            else:
                self.model.clear()
            self.tableView.setModel(self.model)
            self.set_tableButtonSelected(self.User_Record_View_Button)
        else:
            dialog = QDialog()
            dialog.setWindowTitle("錯誤")
            dialog.setModal(True)
            dialog.adjustSize()
            layout = QVBoxLayout()
            text_label = QLabel("請先選擇表格")
            text_label.setAlignment(Qt.AlignCenter)
            layout.addWidget(text_label)
            layout.addStretch(1)
            ok_button = QPushButton("確定")
            ok_button.clicked.connect(dialog.accept)
            ok_button.setFixedWidth(100)
            ok_button.setFixedHeight(30)
            button_layout = QHBoxLayout()
            button_layout.addStretch(1)
            button_layout.addWidget(ok_button)
            button_layout.addStretch(1)
            layout.addLayout(button_layout)
            dialog.setLayout(layout)
            dialog.exec_() 
    def insert_button_clicked(self, button):
        self.set_tableButtonSelected
        self.selectedButton = button
        print(self.set_tableButtonSelected(self.selectedButton))
        table_name = self.selected_table
        def show_error_message(message):
                msg = QDialog()
                msg.setWindowTitle("錯誤")
                msg.setModal(True)
                layout = QVBoxLayout()
                text_label = QLabel(message)
                text_label.setAlignment(Qt.AlignCenter)
                layout.addWidget(text_label)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(msg.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                layout.addWidget(ok_button, alignment=Qt.AlignCenter)
                msg.setLayout(layout)
                msg.adjustSize()       
                msg.exec_()
        def show_success_message(message):
                msg = QDialog()
                msg.setWindowTitle("提示")
                msg.setModal(True)
                layout = QVBoxLayout()
                text_label = QLabel(message)
                text_label.setAlignment(Qt.AlignCenter)
                layout.addWidget(text_label)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(msg.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                layout.addWidget(ok_button, alignment=Qt.AlignCenter)
                msg.setLayout(layout)
                msg.adjustSize()       
                msg.exec_()
        def get_city_query():
            city_query = "SELECT `city_id` FROM `city`"
            self.city_data = self.db.execute_query(city_query)
            return self.city_data       
        def get_site_query(city_id):
            site_query = "SELECT `site_id` FROM `site` WHERE `city_id` = %s"
            self.site_data = self.db.execute_query(site_query, (city_id,))
            return self.site_data
        def get_userId_query():
            userId_query = "SELECT `email` FROM `user`"
            userId_data = self.db.execute_query(userId_query)
            return userId_data
        def get_hotel_class_query():
            hotel_class_query = "SELECT `class`, `name` FROM `type_classes` WHERE `type` = 'hotel' "
            hotel_class_data = self.db.execute_query(hotel_class_query)
            return hotel_class_data
        def get_restaurant_class_query():
            restaurant_class_query = "SELECT `class`, `name` FROM `type_classes` WHERE `type` = 'restaurant' "
            restaurant_class_data = self.db.execute_query(restaurant_class_query)
            return restaurant_class_data
        def get_view_class_query():
            view_class_query = "SELECT `class`, `name` FROM `type_classes` WHERE `type` = 'view' "
            view_class_data = self.db.execute_query(view_class_query)
            return view_class_data
        def get_activity_class_query():
            activity_class_query = "SELECT `class`, `name` FROM `type_classes` WHERE `type` = 'activity' "
            activity_class_data = self.db.execute_query(activity_class_query)
            return activity_class_data
        def get_travelId_query():
            travelId_query = "SELECT `TravelId` FROM `travel`"
            travelId_data = self.db.execute_query(travelId_query)
            return travelId_data
        def get_type_query():
            type_query = "SELECT `Type` FROM `type`"
            self.type_data = self.db.execute_query(type_query)
            return self.type_data
        def get_trip_TravelId_query():
            userId_query = "SELECT DISTINCT `TravelId` FROM `trip`"
            userId_data = self.db.execute_query(userId_query)
            return userId_data
        def get_DayId_query(TravelId):
            travelId_query = "SELECT `DayId` FROM `trip` WHERE `TravelId` = %s"
            travelId_data = self.db.execute_query(travelId_query, (TravelId,))
            return travelId_data
        def get_tripStartId_query(TravelId, DayId):
            type_query = "SELECT `ViewId` FROM `trip` WHERE `TravelId` = %s AND `DayId` = %s"
            self.type_data = self.db.execute_query(type_query, (TravelId, DayId))
            return self.type_data
        def get_ids_type_query():
            type_query = "SELECT DISTINCT `Type` FROM `ids`"
            self.type_data = self.db.execute_query(type_query)
            return self.type_data
        def get_ids_id_query(type):
            id_query = "SELECT  `ID` FROM `ids` WHERE `Type` = %s"
            self.id_data = self.db.execute_query(id_query, (type,))
            return self.id_data
        if table_name == "manager":
            dialog = QDialog()
            dialog.setWindowTitle("Insert")
            dialog.setModal(True)
            dialog.setFixedSize(380, 130)
            layout = QVBoxLayout()
            managername_layout = QHBoxLayout()
            managername_label = QLabel("Manager Name:")
            managername_input = QLineEdit()
            managername_layout.addWidget(managername_label)
            managername_layout.addWidget(managername_input)
            manager_password_layout = QHBoxLayout()
            manager_password_label = QLabel("Manager Password:")
            manager_password_input = QLineEdit()
            manager_password_layout.addWidget(manager_password_label)
            manager_password_layout.addWidget(manager_password_input)
            layout.addLayout(managername_layout)
            layout.addLayout(manager_password_layout)
            insert_button = QPushButton("Insert")
            layout.addWidget(insert_button, alignment=Qt.AlignCenter)
            dialog.setLayout(layout)
            def insert_manager_data():
                managername = managername_input.text()
                manager_password = manager_password_input.text()
                try:
                    insertManagerDataInToSql(managername, manager_password)
                    print("success")
                    success_msg= f"插入資料成功!"
                    dialog.accept()
                    show_success_message(success_msg)
                    self.refresh_table(table_name)
                    self.set_tableButtonSelected(self.Manager_Button)
                except Exception as e:
                    print("Error inserting data:", e)
                    error_msg= f"插入資料錯誤，請先確認資料有無錯誤"
                    dialog.accept()
                    show_error_message(error_msg)
                    self.set_tableButtonSelected(self.Manager_Button)
            insert_button.clicked.connect(insert_manager_data)
            dialog.exec_()            
        elif table_name == "user":
            dialog = QDialog()
            dialog.setWindowTitle("Insert")
            dialog.setModal(True)
            dialog.setFixedSize(380, 250)
            layout = QVBoxLayout()
            user_email_label = QLabel("User_email:")
            user_email_input = QLineEdit()
            layout.addWidget(user_email_label)
            layout.addWidget(user_email_input)
            username_label = QLabel("User_name:")
            username_input = QLineEdit()
            layout.addWidget(username_label)
            layout.addWidget(username_input)
            user_password_label = QLabel("User_password:")
            user_password_input = QLineEdit()
            layout.addWidget(user_password_label)
            layout.addWidget(user_password_input)
            insert_button = QPushButton("Insert")
            layout.addWidget(insert_button, alignment=Qt.AlignCenter)
            dialog.setLayout(layout)
            def insert_user_data():
                email = user_email_input.text()
                username = username_input.text()
                userpassword = user_password_input.text()
                if not re.search(r'@', email):
                    QMessageBox.warning(dialog, "Error", "電子郵件必須包含@")
                    return
                elif not (6 <= len(userpassword) <= 18):
                    QMessageBox.warning(dialog, "Error", "密碼長度需介在6-18碼")
                    return
                else:
                    try:
                        insertUserDataInToSql(email, username, userpassword)
                        print("success")
                        success_msg= f"插入資料成功!"
                        dialog.accept()
                        show_success_message(success_msg)
                        self.refresh_table(table_name)
                        self.set_tableButtonSelected(self.User_Button)
                    except Exception as e:
                        print("Error inserting data:", e)
                        error_msg= f"插入資料錯誤，請先確認資料有無錯誤"
                        dialog.accept()
                        show_error_message(error_msg)
                        self.set_tableButtonSelected(self.User_Button)
            insert_button.clicked.connect(insert_user_data)
            dialog.exec_()
        elif table_name == "city":
            dialog = QDialog()
            dialog.setWindowTitle("Insert")
            dialog.setModal(True)
            dialog.setFixedSize(230, 120)
            layout = QVBoxLayout()
            city_id_label = QLabel("CityName:")
            city_id_input = QLineEdit()
            layout.addWidget(city_id_label)
            layout.addWidget(city_id_input)
            insert_button = QPushButton("Insert")
            layout.addWidget(insert_button, alignment=Qt.AlignCenter)
            dialog.setLayout(layout)
            def insert_city_data():
                city_id = city_id_input.text()
                try:
                    insertCityDataInToSql(city_id)
                    print("success")
                    success_msg= f"插入資料成功!"
                    dialog.accept()
                    show_success_message(success_msg)
                    self.refresh_table(table_name)
                    self.set_tableButtonSelected(self.City_Button)
                except Exception as e:
                    print("Error inserting data:", e)
                    error_msg= f"插入資料錯誤，請先確認資料有無錯誤"
                    dialog.accept()
                    show_error_message(error_msg)
                    self.set_tableButtonSelected(self.City_Button)
            insert_button.clicked.connect(insert_city_data)
            dialog.exec_()
        elif table_name == "site":
            dialog = QDialog()
            dialog.setWindowTitle("Insert")
            dialog.setModal(True)
            dialog.setFixedSize(320, 180)
            layout = QVBoxLayout()
            city_label = QLabel("城市:")
            city_combo = QComboBox()
            city_combo.addItem("")
            for city in get_city_query():
                city_combo.addItem(f"{city['city_id']}")
            layout.addWidget(city_label)
            layout.addWidget(city_combo)
            site_id_label = QLabel("Site_id:")
            site_id_input = QLineEdit()
            layout.addWidget(site_id_label)
            layout.addWidget(site_id_input)
            insert_button = QPushButton("Insert")
            layout.addWidget(insert_button, alignment=Qt.AlignCenter)
            dialog.setLayout(layout)
            def insert_site_data():
                city_id = city_combo.currentText()
                site_id = site_id_input.text()
                try:
                    insertSiteDataInToSql(city_id, site_id)
                    print("success")
                    success_msg= f"插入資料成功!"
                    dialog.accept()
                    show_success_message(success_msg)
                    self.refresh_table(table_name)
                    self.set_tableButtonSelected(self.Site_Button)
                except Exception as e:
                    print("Error inserting data:", e)
                    error_msg= f"插入資料錯誤，請先確認資料有無錯誤"
                    dialog.accept()
                    show_error_message(error_msg)
                    self.set_tableButtonSelected(self.Site_Button)
            insert_button.clicked.connect(insert_site_data)
            dialog.exec_()
        elif table_name == "weather_36hours":
            dialog = QDialog()
            dialog.setWindowTitle("提示")
            dialog.setModal(True)
            dialog.adjustSize()
            layout = QVBoxLayout()
            text_label = QLabel("此資料庫為預測資料，無法直接插入、修改、刪除")
            text_label.setAlignment(Qt.AlignCenter)
            layout.addWidget(text_label)
            layout.addStretch(1)
            ok_button = QPushButton("確定")
            ok_button.clicked.connect(dialog.accept)
            ok_button.setFixedWidth(100)
            ok_button.setFixedHeight(30)
            button_layout = QHBoxLayout()
            button_layout.addStretch(1)
            button_layout.addWidget(ok_button)
            button_layout.addStretch(1)
            layout.addLayout(button_layout)
            dialog.setLayout(layout)
            dialog.exec_()
            self.set_tableButtonSelected(self.Weather_36hours_Button)
        elif table_name == "weather_2days":
            dialog = QDialog()
            dialog.setWindowTitle("提示")
            dialog.setModal(True)
            dialog.adjustSize()
            layout = QVBoxLayout()
            text_label = QLabel("此資料庫為預測資料，無法直接插入、修改、刪除")
            text_label.setAlignment(Qt.AlignCenter)
            layout.addWidget(text_label)
            layout.addStretch(1)
            ok_button = QPushButton("確定")
            ok_button.clicked.connect(dialog.accept)
            ok_button.setFixedWidth(100)
            ok_button.setFixedHeight(30)
            button_layout = QHBoxLayout()
            button_layout.addStretch(1)
            button_layout.addWidget(ok_button)
            button_layout.addStretch(1)
            layout.addLayout(button_layout)
            dialog.setLayout(layout)
            dialog.exec_()
            self.set_tableButtonSelected(self.Weather_2days_Button)
        elif table_name == "weather_week":
            dialog = QDialog()
            dialog.setWindowTitle("提示")
            dialog.setModal(True)
            dialog.adjustSize()
            layout = QVBoxLayout()
            text_label = QLabel("此資料庫為預測資料，無法直接插入、修改、刪除")
            text_label.setAlignment(Qt.AlignCenter)
            layout.addWidget(text_label)
            layout.addStretch(1)
            ok_button = QPushButton("確定")
            ok_button.clicked.connect(dialog.accept)
            ok_button.setFixedWidth(100)
            ok_button.setFixedHeight(30)
            button_layout = QHBoxLayout()
            button_layout.addStretch(1)
            button_layout.addWidget(ok_button)
            button_layout.addStretch(1)
            layout.addLayout(button_layout)
            dialog.setLayout(layout)
            dialog.exec_()
            self.set_tableButtonSelected(self.Weather_week_Button)
        elif table_name == "type":
            dialog = QDialog()
            dialog.setWindowTitle("提示")
            dialog.setModal(True)
            dialog.adjustSize()
            layout = QVBoxLayout()
            text_label = QLabel("此資料庫無法直接插入、修改、刪除")
            text_label.setAlignment(Qt.AlignCenter)
            layout.addWidget(text_label)
            layout.addStretch(1)
            ok_button = QPushButton("確定")
            ok_button.clicked.connect(dialog.accept)
            ok_button.setFixedWidth(100)
            ok_button.setFixedHeight(30)
            button_layout = QHBoxLayout()
            button_layout.addStretch(1)
            button_layout.addWidget(ok_button)
            button_layout.addStretch(1)
            layout.addLayout(button_layout)
            dialog.setLayout(layout)
            dialog.exec_()
            self.set_tableButtonSelected(self.Type_Button)
        elif table_name == "ids":
            dialog = QDialog()
            dialog.setWindowTitle("提示")
            dialog.setModal(True)
            dialog.adjustSize()
            layout = QVBoxLayout()
            text_label = QLabel("此資料庫無法直接插入、修改、刪除")
            text_label.setAlignment(Qt.AlignCenter)
            layout.addWidget(text_label)
            layout.addStretch(1)
            ok_button = QPushButton("確定")
            ok_button.clicked.connect(dialog.accept)
            ok_button.setFixedWidth(100)
            ok_button.setFixedHeight(30)
            button_layout = QHBoxLayout()
            button_layout.addStretch(1)
            button_layout.addWidget(ok_button)
            button_layout.addStretch(1)
            layout.addLayout(button_layout)
            dialog.setLayout(layout)
            dialog.exec_()
            self.set_tableButtonSelected(self.Ids_Button)
        elif table_name == "hotel":
            def update_site_combo():
                city_id = city_combo.currentText()
                site_combo.clear()
                self.site_data = get_site_query(city_id)
                for site in self.site_data:
                    site_combo.addItem(f"{site['site_id']}", site['site_id'])
            dialog = QDialog()
            dialog.setWindowTitle("Insert")
            dialog.setModal(True)
            dialog.setFixedSize(425, 500)
            main_layout = QVBoxLayout()
            scroll_area = QScrollArea()
            scroll_area.setWidgetResizable(True)
            content_widget = QWidget()
            layout = QVBoxLayout(content_widget)
            id_label = QLabel("ID:")
            id_input = QLineEdit()
            layout.addWidget(id_label)
            layout.addWidget(id_input)
            city_label = QLabel("城市:")
            city_combo = QComboBox()
            city_combo.addItem("")
            city_combo.activated.connect(update_site_combo) 
            for city in get_city_query():
                city_combo.addItem(f"{city['city_id']}")
            layout.addWidget(city_label)
            layout.addWidget(city_combo)
            site_label = QLabel("鄉鎮:")
            site_combo = QComboBox()
            site_combo.addItem("")                
            city_combo.activated.connect(update_site_combo)
            if get_city_query():
                update_site_combo()
            layout.addWidget(site_label)
            layout.addWidget(site_combo)
            add_label = QLabel("地址:")
            add_input = QLineEdit()
            layout.addWidget(add_label)
            layout.addWidget(add_input)
            name_label = QLabel("名字:")
            name_input = QLineEdit()
            layout.addWidget(name_label)
            layout.addWidget(name_input)
            hotel_class_label = QLabel("旅館類別:")
            hotel_class_combo = QComboBox()
            hotel_class_combo.addItem("")  
            cndata = get_hotel_class_query()
            for idx, class_ in enumerate(cndata):
                hotel_class_combo.addItem(f"{class_['name']}")
            layout.addWidget(hotel_class_label)
            layout.addWidget(hotel_class_combo)
            toldescribe_label = QLabel("描述:")
            toldescribe_input = QLineEdit()
            layout.addWidget(toldescribe_label)
            layout.addWidget(toldescribe_input)
            web_label = QLabel("網址:")
            web_input = QLineEdit()
            layout.addWidget(web_label)
            layout.addWidget(web_input)
            tex_label = QLabel("電話:")
            tex_input = QLineEdit()
            layout.addWidget(tex_label)
            layout.addWidget(tex_input)
            serviceinfo_label = QLabel("服務資訊:")
            serviceinfo_input = QLineEdit()
            layout.addWidget(serviceinfo_label)
            layout.addWidget(serviceinfo_input)
            room_label = QLabel("房型:")
            room_input = QLineEdit()
            layout.addWidget(room_label)
            layout.addWidget(room_input)
            parkinginfo_label = QLabel("停車資訊:")
            parkinginfo_input = QLineEdit()
            layout.addWidget(parkinginfo_label)
            layout.addWidget(parkinginfo_input)
            picture1_label = QLabel("照片1:")
            picture1_input = QLineEdit()
            layout.addWidget(picture1_label)
            layout.addWidget(picture1_input)
            pic_describe1_label = QLabel("照片描述1:")
            pic_describe1_input = QLineEdit()
            layout.addWidget(pic_describe1_label)
            layout.addWidget(pic_describe1_input)
            picture2_label = QLabel("照片2:")
            picture2_input = QLineEdit()
            layout.addWidget(picture2_label)
            layout.addWidget(picture2_input)
            pic_describe2_label = QLabel("照片描述2:")
            pic_describe2_input = QLineEdit()
            layout.addWidget(pic_describe2_label)
            layout.addWidget(pic_describe2_input)
            picture3_label = QLabel("照片3:")
            picture3_input = QLineEdit()
            layout.addWidget(picture3_label)
            layout.addWidget(picture3_input)
            pic_describe3_label = QLabel("照片描述3:")
            pic_describe3_input = QLineEdit()
            layout.addWidget(pic_describe3_label)
            layout.addWidget(pic_describe3_input)
            lowestprice_label = QLabel("最低價格:")
            lowestprice_input = QLineEdit()
            layout.addWidget(lowestprice_label)
            layout.addWidget(lowestprice_input)
            ceilingprice_label = QLabel("最高價格:")
            ceilingprice_input = QLineEdit()
            layout.addWidget(ceilingprice_label)
            layout.addWidget(ceilingprice_input)
            people_label = QLabel("可容納人數:")
            people_input = QLineEdit()
            layout.addWidget(people_label)
            layout.addWidget(people_input)
            Px_label = QLabel("經度:")
            Px_input = QLineEdit()
            layout.addWidget(Px_label)
            layout.addWidget(Px_input)
            Py_label = QLabel("緯度:")
            Py_input = QLineEdit()
            layout.addWidget(Py_label)
            layout.addWidget(Py_input)
            scroll_area.setWidget(content_widget)
            main_layout.addWidget(scroll_area)
            insert_button = QPushButton("Insert")
            main_layout.addWidget(insert_button, alignment=Qt.AlignCenter)
            dialog.setLayout(main_layout)
            def insert_hotel_data():
                id = id_input.text()
                cityid = city_combo.currentText()
                site = site_combo.currentText()
                add = add_input.text()
                name = name_input.text()
                hotel_class = hotel_class_combo.currentText()
                cn_class = 9
                for val in cndata:
                    if val['name'] == hotel_class:
                        cn_class = str(int(val['class']))
                toldescribe = toldescribe_input.text()
                web = web_input.text()
                tex = tex_input.text()
                serviceinfo = serviceinfo_input.text()
                room = room_input.text()
                parkinginfo = parkinginfo_input.text()
                picture1 = picture1_input.text()
                pic_describe1 = pic_describe1_input.text()
                picture2 = picture2_input.text()
                pic_describe2 = pic_describe2_input.text()
                picture3 = picture3_input.text()
                pic_describe3 = pic_describe3_input.text()
                lowestprice = lowestprice_input.text()
                ceilingprice = ceilingprice_input.text()
                people = people_input.text()
                Px = Px_input.text()
                Py = Py_input.text()
                try:
                    insertHotelDataInToSql(id, cityid, site, add, name, cn_class, toldescribe, web, tex, serviceinfo, room, parkinginfo, picture1, pic_describe1, picture2, pic_describe2, picture3, pic_describe3, lowestprice, ceilingprice, people, Px, Py)
                    print("success")
                    success_msg= f"插入資料成功!"
                    dialog.accept()
                    show_success_message(success_msg)
                    self.refresh_table(table_name)
                    self.set_tableButtonSelected(self.Hotel_Button)
                except Exception as e:
                    print("Error inserting data:", e)
                    error_msg= f"插入資料錯誤，請先確認資料有無錯誤"
                    dialog.accept()
                    show_error_message(error_msg)
                    self.set_tableButtonSelected(self.Hotel_Button)
            insert_button.clicked.connect(insert_hotel_data)
            dialog.exec_()
        elif table_name == "restaurant":
            def update_site_combo():
                city_id = city_combo.currentText()
                site_combo.clear()
                self.site_data = get_site_query(city_id)
                for site in self.site_data:
                    site_combo.addItem(f"{site['site_id']}", site['site_id'])
            dialog = QDialog()
            dialog.setWindowTitle("Insert")
            dialog.setModal(True)
            dialog.setFixedSize(425, 500)
            main_layout = QVBoxLayout()
            scroll_area = QScrollArea()
            scroll_area.setWidgetResizable(True)
            content_widget = QWidget()
            layout = QVBoxLayout(content_widget)
            id_label = QLabel("ID:")
            id_input = QLineEdit()
            layout.addWidget(id_label)
            layout.addWidget(id_input)
            city_label = QLabel("城市:")
            city_combo = QComboBox()
            city_combo.addItem("")
            city_combo.activated.connect(update_site_combo) 
            for city in get_city_query():
                city_combo.addItem(f"{city['city_id']}")
            layout.addWidget(city_label)
            layout.addWidget(city_combo)
            site_label = QLabel("鄉鎮:")
            site_combo = QComboBox()      
            site_combo.addItem("")             
            city_combo.activated.connect(update_site_combo)
            if get_city_query():
                update_site_combo()
            layout.addWidget(site_label)
            layout.addWidget(site_combo)
            zipcode_label = QLabel("郵遞區號:")
            zipcode_input = QLineEdit()
            layout.addWidget(zipcode_label)
            layout.addWidget(zipcode_input)
            add_label = QLabel("地址:")
            add_input = QLineEdit()
            layout.addWidget(add_label)
            layout.addWidget(add_input)
            name_label = QLabel("名字:")
            name_input = QLineEdit()
            layout.addWidget(name_label)
            layout.addWidget(name_input)
            description_label = QLabel("簡述:")
            description_input = QLineEdit()
            layout.addWidget(description_label)
            layout.addWidget(description_input)
            tex_label = QLabel("電話:")
            tex_input = QLineEdit()
            layout.addWidget(tex_label)
            layout.addWidget(tex_input)
            picture1_label = QLabel("照片1:")
            picture1_input = QLineEdit()
            layout.addWidget(picture1_label)
            layout.addWidget(picture1_input)
            pic_describe1_label = QLabel("照片描述1:")
            pic_describe1_input = QLineEdit()
            layout.addWidget(pic_describe1_label)
            layout.addWidget(pic_describe1_input)
            picture2_label = QLabel("照片2:")
            picture2_input = QLineEdit()
            layout.addWidget(picture2_label)
            layout.addWidget(picture2_input)
            pic_describe2_label = QLabel("照片描述2:")
            pic_describe2_input = QLineEdit()
            layout.addWidget(pic_describe2_label)
            layout.addWidget(pic_describe2_input)
            picture3_label = QLabel("照片3:")
            picture3_input = QLineEdit()
            layout.addWidget(picture3_label)
            layout.addWidget(picture3_input)
            pic_describe3_label = QLabel("照片描述3:")
            pic_describe3_input = QLineEdit()
            layout.addWidget(pic_describe3_label)
            layout.addWidget(pic_describe3_input)
            class1_label = QLabel("餐廳類型1:")
            class1_combo = QComboBox()
            class1_combo.addItem("")  
            cndata1 = get_restaurant_class_query()
            for idx, class_ in enumerate(cndata1):
                class1_combo.addItem(f"{class_['name']}")
            layout.addWidget(class1_label)
            layout.addWidget(class1_combo)
            class2_label = QLabel("餐廳類型2:")
            class2_combo = QComboBox()
            class2_combo.addItem("")  
            cndata2 = get_restaurant_class_query()
            for idx, class_ in enumerate(cndata2):
                class2_combo.addItem(f"{class_['name']}")
            layout.addWidget(class2_label)
            layout.addWidget(class2_combo)
            class3_label = QLabel("餐廳類型3:")
            class3_combo = QComboBox()
            class3_combo.addItem("")  
            cndata3 = get_restaurant_class_query()
            for idx, class_ in enumerate(cndata3):
                class3_combo.addItem(f"{class_['name']}")
            layout.addWidget(class3_label)
            layout.addWidget(class3_combo)
            web_label = QLabel("網址:")
            web_input = QLineEdit()
            layout.addWidget(web_label)
            layout.addWidget(web_input)
            Px_label = QLabel("經度:")
            Px_input = QLineEdit()
            layout.addWidget(Px_label)
            layout.addWidget(Px_input)
            Py_label = QLabel("緯度:")
            Py_input = QLineEdit()
            layout.addWidget(Py_label)
            layout.addWidget(Py_input)
            parkinginfo_label = QLabel("停車資訊:")
            parkinginfo_input = QLineEdit()
            layout.addWidget(parkinginfo_label)
            layout.addWidget(parkinginfo_input)
            time_label = QLabel("服務時間:")
            time_input = QLineEdit()
            layout.addWidget(time_label)
            layout.addWidget(time_input)
            scroll_area.setWidget(content_widget)
            main_layout.addWidget(scroll_area)
            insert_button = QPushButton("Insert")
            main_layout.addWidget(insert_button, alignment=Qt.AlignCenter)
            dialog.setLayout(main_layout)
            def insert_restaurant_data():
                id = id_input.text()
                cityid = city_combo.currentText()
                site = site_combo.currentText()
                zipcode = zipcode_input.text()
                add = add_input.text()
                name = name_input.text()
                description = description_input.text()
                tex = tex_input.text()
                picture1 = picture1_input.text()
                pic_describe1 = pic_describe1_input.text()
                picture2 = picture2_input.text()
                pic_describe2 = pic_describe2_input.text()
                picture3 = picture3_input.text()
                pic_describe3 = pic_describe3_input.text()
                class1 = class1_combo.currentText()
                cn_class1 = 254
                for val in cndata1:
                    if val['name'] == class1:
                        cn_class1 = str(int(val['class']))
                class2 = class2_combo.currentText()
                cn_class2 = 254
                for val in cndata2:
                    if val['name'] == class2:
                        cn_class2 = str(int(val['class']))
                class3 = class3_combo.currentText()
                cn_class3 = 254
                for val in cndata3:
                    if val['name'] == class3:
                        cn_class3 = str(int(val['class']))
                web = web_input.text()
                Px = Px_input.text()
                Py = Py_input.text()
                parkinginfo = parkinginfo_input.text()
                time = time_input.text()
                try:
                    insertRestaurantDataInToSql(id, cityid, site, zipcode, add, name, description, tex, picture1, pic_describe1, picture2, pic_describe2, picture3, pic_describe3, cn_class1, cn_class2, cn_class3, web, Px, Py, parkinginfo, time)
                    print("success")
                    success_msg= f"插入資料成功!"
                    dialog.accept()
                    show_success_message(success_msg)
                    self.refresh_table(table_name)
                    self.set_tableButtonSelected(self.Restaurant_Button)
                except Exception as e:
                    print("Error inserting data:", e)
                    error_msg= f"插入資料錯誤，請先確認資料有無錯誤"
                    dialog.accept()
                    show_error_message(error_msg)
                    self.set_tableButtonSelected(self.Restaurant_Button)
            insert_button.clicked.connect(insert_restaurant_data)
            dialog.exec_()
        elif table_name == "view":
            def update_site_combo():
                city_id = city_combo.currentText()
                site_combo.clear()
                self.site_data = get_site_query(city_id)
                for site in self.site_data:
                    site_combo.addItem(f"{site['site_id']}", site['site_id'])
            dialog = QDialog()
            dialog.setWindowTitle("Insert")
            dialog.setModal(True)
            dialog.setFixedSize(425, 500)
            main_layout = QVBoxLayout()
            scroll_area = QScrollArea()
            scroll_area.setWidgetResizable(True)
            content_widget = QWidget()
            layout = QVBoxLayout(content_widget)
            id_label = QLabel("ID:")
            id_input = QLineEdit()
            layout.addWidget(id_label)
            layout.addWidget(id_input)
            city_label = QLabel("城市:")
            city_combo = QComboBox()
            city_combo.addItem("")
            city_combo.activated.connect(update_site_combo) 
            for city in get_city_query():
                city_combo.addItem(f"{city['city_id']}")
            layout.addWidget(city_label)
            layout.addWidget(city_combo)
            site_label = QLabel("鄉鎮:")
            site_combo = QComboBox()   
            site_combo.addItem("")                
            city_combo.activated.connect(update_site_combo)
            if get_city_query():
                update_site_combo()
            layout.addWidget(site_label)
            layout.addWidget(site_combo)
            zipcode_label = QLabel("郵遞區號:")
            zipcode_input = QLineEdit()
            layout.addWidget(zipcode_label)
            layout.addWidget(zipcode_input)
            add_label = QLabel("地址:")
            add_input = QLineEdit()
            layout.addWidget(add_label)
            layout.addWidget(add_input)
            name_label = QLabel("名字:")
            name_input = QLineEdit()
            layout.addWidget(name_label)
            layout.addWidget(name_input)
            web_label = QLabel("網址:")
            web_input = QLineEdit()
            layout.addWidget(web_label)
            layout.addWidget(web_input)
            toldescribe_label = QLabel("描述:")
            toldescribe_input = QLineEdit()
            layout.addWidget(toldescribe_label)
            layout.addWidget(toldescribe_input)
            tex_label = QLabel("電話:")
            tex_input = QLineEdit()
            layout.addWidget(tex_label)
            layout.addWidget(tex_input)
            travellinginfo_label = QLabel("旅遊資訊:")
            travellinginfo_input = QLineEdit()
            layout.addWidget(travellinginfo_label)
            layout.addWidget(travellinginfo_input)
            parkinginfo_label = QLabel("停車資訊:")
            parkinginfo_input = QLineEdit()
            layout.addWidget(parkinginfo_label)
            layout.addWidget(parkinginfo_input)
            picture1_label = QLabel("照片1:")
            picture1_input = QLineEdit()
            layout.addWidget(picture1_label)
            layout.addWidget(picture1_input)
            pic_describe1_label = QLabel("照片描述1:")
            pic_describe1_input = QLineEdit()
            layout.addWidget(pic_describe1_label)
            layout.addWidget(pic_describe1_input)
            picture2_label = QLabel("照片2:")
            picture2_input = QLineEdit()
            layout.addWidget(picture2_label)
            layout.addWidget(picture2_input)
            pic_describe2_label = QLabel("照片描述2:")
            pic_describe2_input = QLineEdit()
            layout.addWidget(pic_describe2_label)
            layout.addWidget(pic_describe2_input)
            picture3_label = QLabel("照片3:")
            picture3_input = QLineEdit()
            layout.addWidget(picture3_label)
            layout.addWidget(picture3_input)
            pic_describe3_label = QLabel("照片描述3:")
            pic_describe3_input = QLineEdit()
            layout.addWidget(pic_describe3_label)
            layout.addWidget(pic_describe3_input)
            Px_label = QLabel("經度:")
            Px_input = QLineEdit()
            layout.addWidget(Px_label)
            layout.addWidget(Px_input)
            Py_label = QLabel("緯度:")
            Py_input = QLineEdit()
            layout.addWidget(Py_label)
            layout.addWidget(Py_input)
            class1_label = QLabel("景點類型1:")
            class1_combo = QComboBox()
            class1_combo.addItem("")  
            cndata1 = get_view_class_query()
            for idx, class_ in enumerate(cndata1):
                class1_combo.addItem(f"{class_['name']}")
            layout.addWidget(class1_label)
            layout.addWidget(class1_combo)
            class2_label = QLabel("景點類型2:")
            class2_combo = QComboBox()
            class2_combo.addItem("")  
            cndata2 = get_view_class_query()
            for idx, class_ in enumerate(cndata2):
                class2_combo.addItem(f"{class_['name']}")
            layout.addWidget(class2_label)
            layout.addWidget(class2_combo)
            class3_label = QLabel("景點類型3:")
            class3_combo = QComboBox()
            class3_combo.addItem("")  
            cndata3 = get_view_class_query()
            for idx, class_ in enumerate(cndata3):
                class3_combo.addItem(f"{class_['name']}")
            layout.addWidget(class3_label)
            layout.addWidget(class3_combo)
            high_money_label = QLabel("最高價格:")
            high_money_input = QLineEdit()
            layout.addWidget(high_money_label)
            layout.addWidget(high_money_input)
            low_money_label = QLabel("最低價格:")
            low_money_input = QLineEdit()
            layout.addWidget(low_money_label)
            layout.addWidget(low_money_input)
            money_label = QLabel("詳細價格描述:")
            money_input = QLineEdit()
            layout.addWidget(money_label)
            layout.addWidget(money_input)
            time_label = QLabel("服務時間:")
            time_input = QLineEdit()
            layout.addWidget(time_label)
            layout.addWidget(time_input)
            scroll_area.setWidget(content_widget)
            main_layout.addWidget(scroll_area)
            insert_button = QPushButton("Insert")
            main_layout.addWidget(insert_button, alignment=Qt.AlignCenter)
            dialog.setLayout(main_layout)
            def insert_view_data():
                id = id_input.text()
                cityid = city_combo.currentText()
                site = site_combo.currentText()
                zipcode = zipcode_input.text()
                add = add_input.text()
                name = name_input.text()
                web = web_input.text()
                toldescribe = toldescribe_input.text()
                tex = tex_input.text()
                travellinginfo = travellinginfo_input.text()
                parkinginfo = parkinginfo_input.text()
                picture1 = picture1_input.text()
                pic_describe1 = pic_describe1_input.text()
                picture2 = picture2_input.text()
                pic_describe2 = pic_describe2_input.text()
                picture3 = picture3_input.text()
                pic_describe3 = pic_describe3_input.text()
                Px = Px_input.text()
                Py = Py_input.text()
                class1 = class1_combo.currentText()
                cn_class1 = 254
                for val in cndata1:
                    if val['name'] == class1:
                        cn_class1 = str(int(val['class']))
                class2 = class2_combo.currentText()
                cn_class2 = 254
                for val in cndata2:
                    if val['name'] == class2:
                        cn_class2 = str(int(val['class']))
                class3 = class3_combo.currentText()
                cn_class3 = 254
                for val in cndata3:
                    if val['name'] == class3:
                        cn_class3 = str(int(val['class']))
                high_money = high_money_input.text()
                low_money = low_money_input.text()
                money = money_input.text()
                time = time_input.text()
                try:
                    insertViewDataInToSql(id, cityid, site, zipcode, add, name, web, toldescribe, tex, travellinginfo, parkinginfo, picture1, pic_describe1, picture2, pic_describe2, picture3, pic_describe3, Px, Py, cn_class1, cn_class2, cn_class3, high_money, low_money, money, time)
                    print("success")
                    success_msg= f"插入資料成功!"
                    dialog.accept()
                    show_success_message(success_msg)
                    self.refresh_table(table_name)
                    self.set_tableButtonSelected(self.View_Button)
                except Exception as e:
                    print("Error inserting data:", e)
                    error_msg= f"插入資料錯誤，請先確認資料有無錯誤"
                    dialog.accept()
                    show_error_message(error_msg)
                    self.set_tableButtonSelected(self.View_Button)
            insert_button.clicked.connect(insert_view_data)
            dialog.exec_()
        elif table_name == "activity":
            def update_site_combo():
                city_id = city_combo.currentText()
                site_combo.clear()
                self.site_data = get_site_query(city_id)
                for site in self.site_data:
                    site_combo.addItem(f"{site['site_id']}", site['site_id'])
            dialog = QDialog()
            dialog.setWindowTitle("Insert")
            dialog.setModal(True)
            dialog.setFixedSize(425, 500)
            main_layout = QVBoxLayout()
            scroll_area = QScrollArea()
            scroll_area.setWidgetResizable(True)
            content_widget = QWidget()
            layout = QVBoxLayout(content_widget)
            id_label = QLabel("ID:")
            id_input = QLineEdit()
            layout.addWidget(id_label)
            layout.addWidget(id_input)
            city_label = QLabel("城市:")
            city_combo = QComboBox()
            city_combo.addItem("")
            city_combo.activated.connect(update_site_combo) 
            for city in get_city_query():
                city_combo.addItem(f"{city['city_id']}")
            layout.addWidget(city_label)
            layout.addWidget(city_combo)
            site_label = QLabel("鄉鎮:")
            site_combo = QComboBox()   
            site_combo.addItem("")                
            city_combo.activated.connect(update_site_combo)
            if get_city_query():
                update_site_combo()
            layout.addWidget(site_label)
            layout.addWidget(site_combo)
            add_label = QLabel("地址:")
            add_input = QLineEdit()
            layout.addWidget(add_label)
            layout.addWidget(add_input)
            name_label = QLabel("名字:")
            name_input = QLineEdit()
            layout.addWidget(name_label)
            layout.addWidget(name_input)
            web_label = QLabel("網址:")
            web_input = QLineEdit()
            layout.addWidget(web_label)
            layout.addWidget(web_input)
            description_label = QLabel("簡述:")
            description_input = QLineEdit()
            layout.addWidget(description_label)
            layout.addWidget(description_input)
            tex_label = QLabel("電話:")
            tex_input = QLineEdit()
            layout.addWidget(tex_label)
            layout.addWidget(tex_input)
            org_label = QLabel("主辦單位:")
            org_input = QLineEdit()
            layout.addWidget(org_label)
            layout.addWidget(org_input)
            parkinginfo_label = QLabel("停車資訊:")
            parkinginfo_input = QLineEdit()
            layout.addWidget(parkinginfo_label)
            layout.addWidget(parkinginfo_input)
            picture1_label = QLabel("照片1:")
            picture1_input = QLineEdit()
            layout.addWidget(picture1_label)
            layout.addWidget(picture1_input)
            pic_describe1_label = QLabel("照片描述1:")
            pic_describe1_input = QLineEdit()
            layout.addWidget(pic_describe1_label)
            layout.addWidget(pic_describe1_input)
            picture2_label = QLabel("照片2:")
            picture2_input = QLineEdit()
            layout.addWidget(picture2_label)
            layout.addWidget(picture2_input)
            pic_describe2_label = QLabel("照片描述2:")
            pic_describe2_input = QLineEdit()
            layout.addWidget(pic_describe2_label)
            layout.addWidget(pic_describe2_input)
            picture3_label = QLabel("照片3:")
            picture3_input = QLineEdit()
            layout.addWidget(picture3_label)
            layout.addWidget(picture3_input)
            pic_describe3_label = QLabel("照片描述3:")
            pic_describe3_input = QLineEdit()
            layout.addWidget(pic_describe3_label)
            layout.addWidget(pic_describe3_input)
            class1_label = QLabel("類別1:")
            class1_combo = QComboBox()
            class1_combo.addItem("")  
            cndata1 = get_activity_class_query()
            for idx, class_ in enumerate(cndata1):
                class1_combo.addItem(f"{class_['name']}")
            layout.addWidget(class1_label)
            layout.addWidget(class1_combo)
            class2_label = QLabel("類別2:")
            class2_combo = QComboBox()
            class2_combo.addItem("")  
            cndata2 = get_activity_class_query()
            for idx, class_ in enumerate(cndata2):
                class2_combo.addItem(f"{class_['name']}")
            layout.addWidget(class2_label)
            layout.addWidget(class2_combo)
            class3_label = QLabel("類別3:")
            class3_combo = QComboBox()
            class3_combo.addItem("")  
            cndata3 = get_activity_class_query()
            for idx, class_ in enumerate(cndata3):
                class3_combo.addItem(f"{class_['name']}")
            layout.addWidget(class3_label)
            layout.addWidget(class3_combo)
            charge_label = QLabel("收費:")
            charge_input = QLineEdit()
            layout.addWidget(charge_label)
            layout.addWidget(charge_input)
            Px_label = QLabel("經度:")
            Px_input = QLineEdit()
            layout.addWidget(Px_label)
            layout.addWidget(Px_input)
            Py_label = QLabel("緯度:")
            Py_input = QLineEdit()
            layout.addWidget(Py_label)
            layout.addWidget(Py_input)
            time_start_label = QLabel("開始時間:")
            time_start_input = QLineEdit()
            layout.addWidget(time_start_label)
            layout.addWidget(time_start_input)
            time_end_label = QLabel("結束時間:")
            time_end_input = QLineEdit()
            layout.addWidget(time_end_label)
            layout.addWidget(time_end_input)
            participation_label = QLabel("活動參與對象:")
            participation_input = QLineEdit()
            layout.addWidget(participation_label)
            layout.addWidget(participation_input)
            travellinginfo_label = QLabel("交通資訊:")
            travellinginfo_input = QLineEdit()
            layout.addWidget(travellinginfo_label)
            layout.addWidget(travellinginfo_input)
            scroll_area.setWidget(content_widget)
            main_layout.addWidget(scroll_area)
            insert_button = QPushButton("Insert")
            main_layout.addWidget(insert_button, alignment=Qt.AlignCenter)
            dialog.setLayout(main_layout)
            def insert_activity_data():
                id = id_input.text()
                cityid = city_combo.currentText()
                site = site_combo.currentText()
                add = add_input.text()
                name = name_input.text()
                web = web_input.text()
                description = description_input.text()
                tex = tex_input.text()
                org = org_input.text()
                parkinginfo = parkinginfo_input.text()
                picture1 = picture1_input.text()
                pic_describe1 = pic_describe1_input.text()
                picture2 = picture2_input.text()
                pic_describe2 = pic_describe2_input.text()
                picture3 = picture3_input.text()
                pic_describe3 = pic_describe3_input.text()
                class1 = class1_combo.currentText()
                cn_class1 = 254
                for val in cndata1:
                    if val['name'] == class1:
                        cn_class1 = str(int(val['class']))
                class2 = class2_combo.currentText()
                cn_class2 = 254
                for val in cndata2:
                    if val['name'] == class2:
                        cn_class2 = str(int(val['class']))
                class3 = class3_combo.currentText()
                cn_class3 = 254
                for val in cndata3:
                    if val['name'] == class3:
                        cn_class3 = str(int(val['class']))
                charge = charge_input.text()
                Px = Px_input.text()
                Py = Py_input.text()
                start_time = time_start_input.text()
                end_time = time_end_input.text()
                participation = participation_input.text()
                travellinginfo = travellinginfo_input.text()
                try:
                    insertActivityDataInToSql(id, cityid, site, add, name, web, description, tex, org, parkinginfo, picture1, pic_describe1, picture2, pic_describe2, picture3, pic_describe3, cn_class1, cn_class2, cn_class3, charge, Px, Py, start_time, end_time, participation, travellinginfo)
                    print("success")
                    success_msg= f"插入資料成功!"
                    dialog.accept()
                    show_success_message(success_msg)
                    self.refresh_table(table_name)
                    self.set_tableButtonSelected(self.Activity_Button)
                except Exception as e:
                    print("Error inserting data:", e)
                    error_msg= f"插入資料錯誤，請先確認資料有無錯誤"
                    dialog.accept()
                    show_error_message(error_msg)
                    self.set_tableButtonSelected(self.Activity_Button)
            insert_button.clicked.connect(insert_activity_data)
            dialog.exec_()
        elif table_name == "route":
            def update_dayid_combo():
                TravelId = Travel_Id_combo.currentText()
                DayId_combo.clear()
                DayId_data = get_DayId_query(TravelId)
                for DayId in DayId_data:
                    DayId_combo.addItem(f"{DayId['DayId']}", DayId['DayId'])
            def update_tripstartId_combo():
                TravelId = Travel_Id_combo.currentText()
                DayId = DayId_combo.currentText()
                tripStartId_combo.clear()
                tripStartId_data = get_tripStartId_query(TravelId, DayId)
                for ViewId in tripStartId_data:
                    tripStartId_combo.addItem(f"{ViewId['ViewId']}", ViewId['ViewId'])
            dialog = QDialog()
            dialog.setWindowTitle("Insert")
            dialog.setModal(True)
            dialog.setFixedSize(380, 380)
            layout = QVBoxLayout()
            Travel_Id_label = QLabel("Travel_ID:")
            Travel_Id_combo = QComboBox()
            Travel_Id_combo.addItem("")
            Travel_Id_combo.activated.connect(update_dayid_combo) 
            for TravelId in get_trip_TravelId_query():
                Travel_Id_combo.addItem(f"{TravelId['TravelId']}")
            layout.addWidget(Travel_Id_label)
            layout.addWidget(Travel_Id_combo)
            DayId_label = QLabel("Day_ID:")
            DayId_combo = QComboBox()
            DayId_combo.addItem("")
            Travel_Id_combo.activated.connect(update_tripstartId_combo) 
            DayId_combo.activated.connect(update_tripstartId_combo) 
            if get_trip_TravelId_query():
                update_dayid_combo()
            layout.addWidget(DayId_label)
            layout.addWidget(DayId_combo)
            tripStartId_label = QLabel("Trip_Start_ID:")
            tripStartId_combo = QComboBox()
            tripStartId_combo.addItem("")
            if get_DayId_query(Travel_Id_combo):
                update_tripstartId_combo()
            layout.addWidget(tripStartId_label)
            layout.addWidget(tripStartId_combo)
            routeId_label = QLabel("Route_ID:")
            routeId_input = QLineEdit()
            layout.addWidget(routeId_label)
            layout.addWidget(routeId_input)
            routeName_label = QLabel("Route_Name:")
            routeName_input = QLineEdit()
            layout.addWidget(routeName_label)
            layout.addWidget(routeName_input)            
            insert_button = QPushButton("Insert")
            layout.addWidget(insert_button, alignment=Qt.AlignCenter)
            dialog.setLayout(layout)
            def insert_route_data():
                travelId = Travel_Id_combo.currentText()
                DayId = DayId_combo.currentText()
                tripStartId = tripStartId_combo.currentText()
                routeId = routeId_input.text()
                routeName = routeName_input.text()
                try:
                    insertRouteDataInToSql(travelId, DayId, tripStartId, routeId, routeName)
                    print("success")
                    success_msg= f"插入資料成功!"
                    dialog.accept()
                    show_success_message(success_msg)
                    self.refresh_table(table_name)
                    self.set_tableButtonSelected(self.Route_Button)
                except Exception as e:
                    print("Error inserting data:", e)
                    error_msg= f"插入資料錯誤，請先確認資料有無錯誤"
                    dialog.accept()
                    show_error_message(error_msg)
                    self.set_tableButtonSelected(self.Route_Button)
            insert_button.clicked.connect(insert_route_data)
            dialog.exec_()
        elif table_name == "trip":
            dialog = QDialog()
            dialog.setWindowTitle("Insert")
            dialog.setModal(True)
            dialog.setFixedSize(350, 600)
            layout = QVBoxLayout()
            Travel_Id_label = QLabel("Travel_ID:")
            Travel_Id_combo = QComboBox()
            Travel_Id_combo.addItem("")
            for TravelId in get_travelId_query():
                Travel_Id_combo.addItem(f"{TravelId['TravelId']}")
            layout.addWidget(Travel_Id_label)
            layout.addWidget(Travel_Id_combo)
            DayId_label = QLabel("Day_ID:")
            DayId_input = QLineEdit()
            layout.addWidget(DayId_label)
            layout.addWidget(DayId_input)
            ViewId_label = QLabel("View_ID:")
            ViewId_input = QLineEdit()
            layout.addWidget(ViewId_label)
            layout.addWidget(ViewId_input)
            Type_label = QLabel("Type:")
            Type_Id_combo = QComboBox()
            Type_Id_combo.addItem("")
            for Type in get_type_query():
                Type_Id_combo.addItem(f"{Type['Type']}")
            layout.addWidget(Type_label)
            layout.addWidget(Type_Id_combo)
            TripId_label = QLabel("Trip_ID:")
            TripId_input = QLineEdit()
            layout.addWidget(TripId_label)
            layout.addWidget(TripId_input)
            Id_label = QLabel("ID:")
            Id_input = QLineEdit()
            layout.addWidget(Id_label)
            layout.addWidget(Id_input)
            date_label = QLabel("Date:")
            date_input = QLineEdit()
            layout.addWidget(date_label)
            layout.addWidget(date_input)
            time_label = QLabel("Time:")
            time_input = QLineEdit()
            layout.addWidget(time_label)
            layout.addWidget(time_input)
            weather_label = QLabel("Weather:")
            weather_input = QLineEdit()
            layout.addWidget(weather_label)
            layout.addWidget(weather_input)
            insert_button = QPushButton("Insert")
            layout.addWidget(insert_button, alignment=Qt.AlignCenter)
            dialog.setLayout(layout)
            def insert_trip_data():
                TravelId = Travel_Id_combo.currentText()
                DayId = DayId_input.text()
                ViewId = ViewId_input.text()
                Type = Type_Id_combo.currentText()
                TripId = TripId_input.text()
                Id = Id_input.text()
                date = date_input.text()
                time = time_input.text()
                weather = weather_input.text()
                try:
                    insertTripDataInToSql(TravelId, DayId, ViewId, Type, TripId, Id, date, time, weather)
                    print("success")
                    success_msg= f"插入資料成功!"
                    dialog.accept()
                    show_success_message(success_msg)
                    self.refresh_table(table_name)
                    self.set_tableButtonSelected(self.Trip_Button)
                except Exception as e:
                    print("Error inserting data:", e)
                    error_msg= f"插入資料錯誤，請先確認資料有無錯誤"
                    dialog.accept()
                    show_error_message(error_msg)
                    self.set_tableButtonSelected(self.Trip_Button)
            insert_button.clicked.connect(insert_trip_data)
            dialog.exec_()
        elif table_name == "user_record_trip":
            def update_dayid_combo():
                TravelId = Travel_Id_combo.currentText()
                DayId_combo.clear()
                DayId_data = get_DayId_query(TravelId)
                for DayId in DayId_data:
                    DayId_combo.addItem(f"{DayId['DayId']}", DayId['DayId'])
            dialog = QDialog()
            dialog.setWindowTitle("Insert")
            dialog.setModal(True)
            dialog.setFixedSize(330, 400)
            layout = QVBoxLayout()
            user_Id_label = QLabel("User_ID:")
            user_Id_combo = QComboBox()
            user_Id_combo.addItem("")
            for userId in get_userId_query():
                user_Id_combo.addItem(f"{userId['email']}")
            layout.addWidget(user_Id_label)
            layout.addWidget(user_Id_combo)
            Travel_Id_label = QLabel("Travel_ID:")
            Travel_Id_combo = QComboBox()
            Travel_Id_combo.addItem("")
            Travel_Id_combo.activated.connect(update_dayid_combo) 
            for TravelId in get_trip_TravelId_query():
                Travel_Id_combo.addItem(f"{TravelId['TravelId']}")
            layout.addWidget(Travel_Id_label)
            layout.addWidget(Travel_Id_combo)
            DayId_label = QLabel("Day_ID:")
            DayId_combo = QComboBox()
            DayId_combo.addItem("")
            if get_trip_TravelId_query():
                update_dayid_combo()
            layout.addWidget(DayId_label)
            layout.addWidget(DayId_combo)
            isLike_label = QLabel("is_Like:")
            isLike_input = QLineEdit()
            layout.addWidget(isLike_label)
            layout.addWidget(isLike_input)
            isStore_label = QLabel("is_Store:")
            isStore_input = QLineEdit()
            layout.addWidget(isStore_label)
            layout.addWidget(isStore_input)
            insert_button = QPushButton("Insert")
            layout.addWidget(insert_button, alignment=Qt.AlignCenter)
            dialog.setLayout(layout)
            def insert_user_record_trip_data():
                userId = user_Id_combo.currentText()
                TravelId = Travel_Id_combo.currentText()
                DayId = DayId_combo.currentText()
                isLike = isLike_input.text()
                isStore = isStore_input.text()
                try:
                    insertRecordTripDataInToSql(userId, TravelId, DayId, isLike, isStore)
                    print("success")
                    success_msg= f"插入資料成功!"
                    dialog.accept()
                    show_success_message(success_msg)
                    self.refresh_table(table_name)
                    self.set_tableButtonSelected(self.User_Record_Trip_Button)
                except Exception as e:
                    print("Error inserting data:", e)
                    error_msg= f"插入資料錯誤，請先確認資料有無錯誤"
                    dialog.accept()
                    show_error_message(error_msg)
                    self.set_tableButtonSelected(self.User_Record_Trip_Button)
            insert_button.clicked.connect(insert_user_record_trip_data)
            dialog.exec_()
        elif table_name == "travel":
            dialog = QDialog()
            dialog.setWindowTitle("Insert")
            dialog.setModal(True)
            dialog.setFixedSize(350, 260)
            layout = QVBoxLayout()
            TravelId_label = QLabel("Travel_ID:")
            TravelId_input = QLineEdit()
            layout.addWidget(TravelId_label)
            layout.addWidget(TravelId_input)
            TravelName_label = QLabel("Trip_Name:")
            TravelName_input = QLineEdit()
            layout.addWidget(TravelName_label)
            layout.addWidget(TravelName_input)
            user_Id_label = QLabel("User_ID:")
            user_Id_combo = QComboBox()
            user_Id_combo.addItem("")
            for userId in get_userId_query():
                user_Id_combo.addItem(f"{userId['email']}")
            layout.addWidget(user_Id_label)
            layout.addWidget(user_Id_combo)
            insert_button = QPushButton("Insert")
            layout.addWidget(insert_button, alignment=Qt.AlignCenter)
            dialog.setLayout(layout)
            def insert_travel_data():
                travelId = TravelId_input.text()
                TravelName = TravelName_input.text()
                userId = user_Id_combo.currentText()
                try:
                    insertTravelDataInToSql(travelId, TravelName, userId)
                    print("success")
                    success_msg= f"插入資料成功!"
                    dialog.accept()
                    show_success_message(success_msg)
                    self.refresh_table(table_name)
                    self.set_tableButtonSelected(self.Travel_Button)
                except Exception as e:
                    print("Error inserting data:", e)
                    error_msg= f"插入資料錯誤，請先確認資料有無錯誤"
                    dialog.accept()
                    show_error_message(error_msg)
                    self.set_tableButtonSelected(self.Travel_Button)
            insert_button.clicked.connect(insert_travel_data)
            dialog.exec_()
        elif table_name == "user_record_travel":
            dialog = QDialog()
            dialog.setWindowTitle("Insert")
            dialog.setModal(True)
            dialog.setFixedSize(330, 330)
            layout = QVBoxLayout()
            user_Id_label = QLabel("User_ID:")
            user_Id_combo = QComboBox()
            user_Id_combo.addItem("")
            for userId in get_userId_query():
                user_Id_combo.addItem(f"{userId['email']}")
            layout.addWidget(user_Id_label)
            layout.addWidget(user_Id_combo)
            Travel_Id_label = QLabel("Travel_ID:")
            Travel_Id_combo = QComboBox()
            Travel_Id_combo.addItem("")
            for TravelId in get_travelId_query():
                Travel_Id_combo.addItem(f"{TravelId['TravelId']}")
            layout.addWidget(Travel_Id_label)
            layout.addWidget(Travel_Id_combo)
            isLike_label = QLabel("is_Like:")
            isLike_input = QLineEdit()
            layout.addWidget(isLike_label)
            layout.addWidget(isLike_input)
            isStore_label = QLabel("is_Store:")
            isStore_input = QLineEdit()
            layout.addWidget(isStore_label)
            layout.addWidget(isStore_input)
            insert_button = QPushButton("Insert")
            layout.addWidget(insert_button, alignment=Qt.AlignCenter)
            dialog.setLayout(layout)
            def insert_user_record_travel_data():
                userId = user_Id_combo.currentText()
                TravelId = Travel_Id_combo.currentText()
                isLike = isLike_input.text()
                isStore = isStore_input.text()
                try:
                    insertRecordTravelDataInToSql(userId, TravelId, isLike, isStore)
                    print("success")
                    success_msg= f"插入資料成功!"
                    dialog.accept()
                    show_success_message(success_msg)
                    self.refresh_table(table_name)
                    self.set_tableButtonSelected(self.User_Record_Travel_Button)
                except Exception as e:
                    if "1062" in str(e) and "Duplicate entry" in str(e):
                        msg_box = QMessageBox()
                        msg_box.setWindowTitle("錯誤")
                        msg_box.setText("已存在相同的userId和TravelId，故不可插入這筆資料")
                        msg_box.setIcon(QMessageBox.Warning)
                        msg_box.exec_()
                    else:
                        print("Error inserting data:", e)
                        error_msg= f"插入資料錯誤，請先確認資料有無錯誤"
                        dialog.accept()
                        show_error_message(error_msg)
                        self.set_tableButtonSelected(self.User_Record_Travel_Button)
            insert_button.clicked.connect(insert_user_record_travel_data)
            dialog.exec_()
        elif table_name == "user_record_view":
            def update_id_combo():
                type = Type_Id_combo.currentText()
                ID_combo.clear()
                self.id_data = get_ids_id_query(type)
                for Id in self.id_data:
                    ID_combo.addItem(f"{Id['ID']}", Id['ID'])
            dialog = QDialog()
            dialog.setWindowTitle("Insert")
            dialog.setModal(True)
            dialog.setFixedSize(330, 370)
            layout = QVBoxLayout()
            user_Id_label = QLabel("User_ID:")
            user_Id_combo = QComboBox()
            user_Id_combo.addItem("")
            for userId in get_userId_query():
                user_Id_combo.addItem(f"{userId['email']}")
            layout.addWidget(user_Id_label)
            layout.addWidget(user_Id_combo)
            Type_label = QLabel("Type:")
            Type_Id_combo = QComboBox()
            Type_Id_combo.addItem("")
            for Type in get_ids_type_query():
                Type_Id_combo.addItem(f"{Type['Type']}")
            layout.addWidget(Type_label)
            layout.addWidget(Type_Id_combo)
            ID_label = QLabel("ID:")
            ID_combo = QComboBox()
            ID_combo.addItem("")
            Type_Id_combo.activated.connect(update_id_combo)
            if get_city_query():
                update_id_combo()
            layout.addWidget(ID_label)
            layout.addWidget(ID_combo)
            isLike_label = QLabel("is_Like:")
            isLike_input = QLineEdit()
            layout.addWidget(isLike_label)
            layout.addWidget(isLike_input)
            isStore_label = QLabel("is_Store:")
            isStore_input = QLineEdit()
            layout.addWidget(isStore_label)
            layout.addWidget(isStore_input)
            insert_button = QPushButton("Insert")
            layout.addWidget(insert_button, alignment=Qt.AlignCenter)
            dialog.setLayout(layout)
            def insert_user_record_view_data():
                userId = user_Id_combo.currentText()
                Type = Type_Id_combo.currentText()
                Id = ID_combo.currentText()
                isLike = isLike_input.text()
                isStore = isLike_input.text()
                try:
                    insertRecordViewDataInToSql(userId, Type, Id,  isLike, isStore)
                    print("success")
                    success_msg= f"插入資料成功!"
                    dialog.accept()
                    show_success_message(success_msg)
                    self.refresh_table(table_name)
                    self.set_tableButtonSelected(self.User_Record_View_Button)
                except Exception as e:
                    print("Error inserting data:", e)
                    error_msg= f"插入資料錯誤，請先確認資料有無錯誤"
                    dialog.accept()
                    show_error_message(error_msg)
                    self.set_tableButtonSelected(self.User_Record_View_Button)
            insert_button.clicked.connect(insert_user_record_view_data)
            dialog.exec_()
        else:
            dialog = QDialog()
            dialog.setWindowTitle("錯誤")
            dialog.setModal(True)
            dialog.adjustSize()
            layout = QVBoxLayout()
            text_label = QLabel("請先選擇表格")
            text_label.setAlignment(Qt.AlignCenter)
            layout.addWidget(text_label)
            layout.addStretch(1)
            ok_button = QPushButton("確定")
            ok_button.clicked.connect(dialog.accept)
            ok_button.setFixedWidth(100)
            ok_button.setFixedHeight(30)
            button_layout = QHBoxLayout()
            button_layout.addStretch(1)
            button_layout.addWidget(ok_button)
            button_layout.addStretch(1)
            layout.addLayout(button_layout)
            dialog.setLayout(layout)
            dialog.exec_() 
    def update_button_clicked(self, button):
        index = self.tableView.currentIndex()
        self.row = self.on_cell_clicked(index)
        print(index)
        self.set_tableButtonSelected
        self.selectedButton = button
        table_name = self.selected_table
        def show_error_message(message):
                msg = QDialog()
                msg.setWindowTitle("錯誤")
                msg.setModal(True)
                layout = QVBoxLayout()
                text_label = QLabel(message)
                text_label.setAlignment(Qt.AlignCenter)
                layout.addWidget(text_label)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(msg.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                layout.addWidget(ok_button, alignment=Qt.AlignCenter)
                msg.setLayout(layout)
                msg.adjustSize()       
                msg.exec_()
        def show_success_message(message):
                msg = QDialog()
                msg.setWindowTitle("提示")
                msg.setModal(True)
                layout = QVBoxLayout()
                text_label = QLabel(message)
                text_label.setAlignment(Qt.AlignCenter)
                layout.addWidget(text_label)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(msg.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                layout.addWidget(ok_button, alignment=Qt.AlignCenter)
                msg.setLayout(layout)
                msg.adjustSize()       
                msg.exec_()
        def get_city_query():
            city_query = "SELECT `city_id` FROM `city`"
            self.city_data = self.db.execute_query(city_query)
            return self.city_data
        def get_site_query(city_id):
            site_query = "SELECT `site_id` FROM `site` WHERE `city_id` = %s"
            self.site_data = self.db.execute_query(site_query, (city_id,))
            print(city_id)
            return self.site_data
        def get_userId_query():
                userId_query = "SELECT `email` FROM `user`"
                userId_data = self.db.execute_query(userId_query)
                return userId_data
        def get_hotel_class_query():
            hotel_class_query = "SELECT `class`, `name` FROM `type_classes` WHERE `type` = 'hotel' "
            hotel_class_data = self.db.execute_query(hotel_class_query)
            return hotel_class_data
        def get_restaurant_class_query():
            restaurant_class_query = "SELECT `class`, `name` FROM `type_classes` WHERE `type` = 'restaurant' "
            restaurant_class_data = self.db.execute_query(restaurant_class_query)
            return restaurant_class_data
        def get_view_class_query():
            view_class_query = "SELECT `class`, `name` FROM `type_classes` WHERE `type` = 'view' "
            view_class_data = self.db.execute_query(view_class_query)
            return view_class_data
        def get_activity_class_query():
            activity_class_query = "SELECT `class`, `name` FROM `type_classes` WHERE `type` = 'activity' "
            activity_class_data = self.db.execute_query(activity_class_query)
            return activity_class_data
        def get_travelId_query():
            travelId_query = "SELECT `TravelId` FROM `travel`"
            travelId_data = self.db.execute_query(travelId_query)
            return travelId_data
        def get_type_query():
            type_query = "SELECT `Type` FROM `type`"
            self.type_data = self.db.execute_query(type_query)
            return self.type_data
        def get_trip_TravelId_query():
            userId_query = "SELECT DISTINCT `TravelId` FROM `trip`"
            userId_data = self.db.execute_query(userId_query)
            return userId_data
        def get_DayId_query(TravelId):
            travelId_query = "SELECT `DayId` FROM `trip` WHERE `TravelId` = %s"
            travelId_data = self.db.execute_query(travelId_query, (TravelId,))
            return travelId_data
        def get_tripStartId_query(TravelId, DayId):
            type_query = "SELECT `ViewId` FROM `trip` WHERE `TravelId` = %s AND `DayId` = %s"
            self.type_data = self.db.execute_query(type_query, (TravelId, DayId,))
            return self.type_data
        def get_ids_type_query():
            type_query = "SELECT DISTINCT `Type` FROM `ids`"
            self.type_data = self.db.execute_query(type_query)
            return self.type_data
        def get_ids_id_query(type):
            id_query = "SELECT  `ID` FROM `ids` WHERE `Type` = %s"
            self.id_data = self.db.execute_query(id_query, (type,))
            return self.id_data
        if table_name == "manager":
            if self.row == -1:                
                dialog = QDialog()
                dialog.setWindowTitle("提示")
                dialog.setModal(True)
                dialog.resize(192, 108)
                layout = QVBoxLayout()
                text_label = QLabel("請先選擇要更改的資料")
                text_label.setAlignment(Qt.AlignCenter)
                layout.addWidget(text_label)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(dialog.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                layout.addWidget(ok_button, alignment=Qt.AlignCenter)            
                dialog.setLayout(layout)            
                dialog.exec_()
                self.set_tableButtonSelected(self.Manager_Button)
            for index, manager_info in enumerate(self.manager_data):
                if index == self.row:
                    dialog = QDialog()
                    dialog.setWindowTitle("Updata")
                    dialog.setModal(True)
                    dialog.setFixedSize(380, 130)
                    layout = QVBoxLayout()
                    user_name = manager_info['username']
                    managername_layout = QHBoxLayout()
                    managername_label = QLabel("Manager Name:")
                    managername_input = QLineEdit(user_name)
                    managername_layout.addWidget(managername_label)
                    managername_layout.addWidget(managername_input)
                    manager_password_layout = QHBoxLayout()
                    manager_password_label = QLabel("Manager Password:")
                    manager_password_input = QLineEdit()
                    manager_password_layout.addWidget(manager_password_label)
                    manager_password_layout.addWidget(manager_password_input)
                    layout.addLayout(managername_layout)
                    layout.addLayout(manager_password_layout)
                    update_button = QPushButton("Update")
                    layout.addWidget(update_button, alignment=Qt.AlignCenter)
                    dialog.setLayout(layout)
                    def update_manager_data():
                        username = managername_input.text()
                        userpassword = manager_password_input.text()
                        try:
                            updateManagerDataInToSql(username, userpassword, user_name)
                            print("success")
                            success_msg= f"資料更新成功!"
                            dialog.accept()
                            show_success_message(success_msg)
                            self.refresh_table(table_name)
                            self.set_tableButtonSelected(self.Manager_Button)
                        except Exception as e:
                            print("Error update data:", e)
                            error_msg= f"更新資料錯誤，請先確認資料有無錯誤"
                            dialog.accept()
                            show_error_message(error_msg)
                            self.set_tableButtonSelected(self.Manager_Button)
                    update_button.clicked.connect(update_manager_data)
                    dialog.exec_()
                else:
                    self.set_tableButtonSelected(self.Manager_Button)   
        elif table_name == "user":
            if self.row == -1:                
                dialog = QDialog()
                dialog.setWindowTitle("提示")
                dialog.setModal(True)
                dialog.resize(192, 108)
                layout = QVBoxLayout()
                text_label = QLabel("請先選擇要更改的資料")
                text_label.setAlignment(Qt.AlignCenter)
                layout.addWidget(text_label)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(dialog.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                layout.addWidget(ok_button, alignment=Qt.AlignCenter)            
                dialog.setLayout(layout)            
                dialog.exec_()   
                self.set_tableButtonSelected(self.User_Button)   
            for index, user_info in enumerate(self.user_data):
                if index == self.row:
                    dialog = QDialog()
                    dialog.setWindowTitle("Updata")
                    dialog.setModal(True)
                    dialog.setFixedSize(380, 250)
                    layout = QVBoxLayout()
                    user_email = user_info['email']
                    user_name = user_info['username']
                    user_password = user_info['userpassword']
                    user_email_label = QLabel("User_email:")
                    user_email_input = QLineEdit(user_email)
                    layout.addWidget(user_email_label)
                    layout.addWidget(user_email_input)
                    username_label = QLabel("User_name:")
                    username_input = QLineEdit(user_name)
                    layout.addWidget(username_label)
                    layout.addWidget(username_input)
                    user_password_label = QLabel("User_password:")
                    user_password_input = QLineEdit(user_password)
                    layout.addWidget(user_password_label)
                    layout.addWidget(user_password_input)
                    update_button = QPushButton("Update")
                    layout.addWidget(update_button, alignment=Qt.AlignCenter)
                    dialog.setLayout(layout)
                    def update_user_data():    
                        email = user_email_input.text()
                        username = username_input.text()
                        userpassword = user_password_input.text()
                        if not re.search(r'@', email):
                            QMessageBox.warning(dialog, "Error", "電子郵件必須包含@")
                            return
                        elif not (6 <= len(userpassword) <= 18):
                            QMessageBox.warning(dialog, "Error", "密碼長度需介在6-18碼")
                            return
                        else:
                            try:
                                updateUserDataInToSql(email, username, userpassword, user_email)
                                print("Success")
                                success_msg = "資料更新成功!"
                                dialog.accept()
                                show_success_message(success_msg)
                                self.refresh_table(table_name)
                                self.set_tableButtonSelected(self.User_Button)
                            except Exception as e:
                                print("Error updating data:", e)
                                error_msg = "更新資料錯誤，請先確認資料有無錯誤"
                                dialog.accept()
                                show_error_message(error_msg)
                                self.set_tableButtonSelected(self.User_Button)
                    update_button.clicked.connect(update_user_data)
                    dialog.exec_()
                    break
                else:
                    self.set_tableButtonSelected(self.User_Button)
        elif table_name == "city":
            if self.row == -1:
                self.set_tableButtonSelected(self.City_Button)
                dialog = QDialog()
                dialog.setWindowTitle("提示")
                dialog.setModal(True)
                dialog.resize(192, 108)
                layout = QVBoxLayout()
                text_label = QLabel("請先選擇要更改的資料")
                text_label.setAlignment(Qt.AlignCenter)
                layout.addWidget(text_label)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(dialog.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                layout.addWidget(ok_button, alignment=Qt.AlignCenter)            
                dialog.setLayout(layout)            
                dialog.exec_()
            for index, city_info in enumerate(self.city_data):
                if index == self.row:
                    dialog = QDialog()
                    dialog.setWindowTitle("Update")
                    dialog.setModal(True)
                    dialog.setFixedSize(230, 120)
                    layout = QVBoxLayout()
                    city_id = city_info['city_id']
                    city_id_label = QLabel("City_Name")
                    city_id_input = QLineEdit(city_id)
                    layout.addWidget(city_id_label)
                    layout.addWidget(city_id_input)
                    update_button = QPushButton("Update")
                    layout.addWidget(update_button, alignment=Qt.AlignCenter)
                    dialog.setLayout(layout)
                    def update_city_data():
                        cityid = city_id_input.text()
                        try:
                            updateCityDataInToSql(cityid, city_id) #(更改的, 原本的)
                            print("success")
                            success_msg= f"資料更新成功!"
                            dialog.accept()
                            show_success_message(success_msg)
                            self.refresh_table(table_name)
                            self.set_tableButtonSelected(self.City_Button)
                        except Exception as e:
                            print("Error update data:", e)
                            error_msg= f"更新資料錯誤，請先確認資料有無錯誤"
                            dialog.accept()
                            show_error_message(error_msg)
                            self.set_tableButtonSelected(self.City_Button)
                    update_button.clicked.connect(update_city_data)
                    dialog.exec_()
                else:
                    self.set_tableButtonSelected(self.City_Button)
        elif table_name == "site":
            if self.row == -1:
                self.set_tableButtonSelected(self.Site_Button)
                dialog = QDialog()
                dialog.setWindowTitle("提示")
                dialog.setModal(True)
                dialog.resize(192, 108)
                layout = QVBoxLayout()
                text_label = QLabel("請先選擇要更改的資料")
                text_label.setAlignment(Qt.AlignCenter)
                layout.addWidget(text_label)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(dialog.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                layout.addWidget(ok_button, alignment=Qt.AlignCenter)            
                dialog.setLayout(layout)            
                dialog.exec_()
            for index, site_info in enumerate(self.site_data):
                if index == self.row:
                    dialog = QDialog()
                    dialog.setWindowTitle("Update")
                    dialog.setModal(True)
                    dialog.setFixedSize(320, 180)
                    layout = QVBoxLayout()
                    city_id = site_info['city_id']
                    site_id = site_info['site_id']
                    city_label = QLabel("城市:")
                    city_combo = QComboBox()
                    city_combo.addItem("")
                    for city in get_city_query():
                        city_combo.addItem(f"{city['city_id']}")
                    layout.addWidget(city_label)
                    layout.addWidget(city_combo)
                    d_city = city_combo.findText(city_id)
                    if d_city != -1:
                        city_combo.setCurrentIndex(d_city)
                    site_id_label = QLabel("Site_id:")
                    site_id_input = QLineEdit(site_id)
                    layout.addWidget(site_id_label)
                    layout.addWidget(site_id_input)
                    update_button = QPushButton("Update")
                    layout.addWidget(update_button, alignment=Qt.AlignCenter)
                    dialog.setLayout(layout)
                    def update_site_data():
                        cityid = city_combo.currentText()
                        siteid = site_id_input.text()
                        try:
                            updateSiteDataInToSql(cityid, siteid, city_id, site_id) #(更改的, 原本的)
                            print("success")
                            success_msg= f"資料更新成功!"
                            dialog.accept()
                            show_success_message(success_msg)
                            self.refresh_table(table_name)
                            self.set_tableButtonSelected(self.Site_Button)
                        except Exception as e:
                            print("Error update data:", e)
                            error_msg= f"更新資料錯誤，請先確認資料有無錯誤"
                            dialog.accept()
                            show_error_message(error_msg)
                            self.set_tableButtonSelected(self.Site_Button)
                    update_button.clicked.connect(update_site_data)
                    dialog.exec_()
                else:
                    self.set_tableButtonSelected(self.Site_Button)
        elif table_name == "weather_36hours":
            dialog = QDialog()
            dialog.setWindowTitle("提示")
            dialog.setModal(True)
            dialog.adjustSize()
            layout = QVBoxLayout()
            text_label = QLabel("此資料庫為預測資料，無法直接插入、修改、刪除")
            text_label.setAlignment(Qt.AlignCenter)
            layout.addWidget(text_label)
            layout.addStretch(1)
            ok_button = QPushButton("確定")
            ok_button.clicked.connect(dialog.accept)
            ok_button.setFixedWidth(100)
            ok_button.setFixedHeight(30)
            button_layout = QHBoxLayout()
            button_layout.addStretch(1)
            button_layout.addWidget(ok_button)
            button_layout.addStretch(1)
            layout.addLayout(button_layout)
            dialog.setLayout(layout)
            dialog.exec_()
            self.set_tableButtonSelected(self.Weather_36hours_Button)
        elif table_name == "weather_2days":
            dialog = QDialog()
            dialog.setWindowTitle("提示")
            dialog.setModal(True)
            dialog.adjustSize()
            layout = QVBoxLayout()
            text_label = QLabel("此資料庫為預測資料，無法直接插入、修改、刪除")
            text_label.setAlignment(Qt.AlignCenter)
            layout.addWidget(text_label)
            layout.addStretch(1)
            ok_button = QPushButton("確定")
            ok_button.clicked.connect(dialog.accept)
            ok_button.setFixedWidth(100)
            ok_button.setFixedHeight(30)
            button_layout = QHBoxLayout()
            button_layout.addStretch(1)
            button_layout.addWidget(ok_button)
            button_layout.addStretch(1)
            layout.addLayout(button_layout)
            dialog.setLayout(layout)
            dialog.exec_()
            self.set_tableButtonSelected(self.Weather_2days_Button)
        elif table_name == "weather_week":
            dialog = QDialog()
            dialog.setWindowTitle("提示")
            dialog.setModal(True)
            dialog.adjustSize()
            layout = QVBoxLayout()
            text_label = QLabel("此資料庫為預測資料，無法直接插入、修改、刪除")
            text_label.setAlignment(Qt.AlignCenter)
            layout.addWidget(text_label)
            layout.addStretch(1)
            ok_button = QPushButton("確定")
            ok_button.clicked.connect(dialog.accept)
            ok_button.setFixedWidth(100)
            ok_button.setFixedHeight(30)
            button_layout = QHBoxLayout()
            button_layout.addStretch(1)
            button_layout.addWidget(ok_button)
            button_layout.addStretch(1)
            layout.addLayout(button_layout)
            dialog.setLayout(layout)
            dialog.exec_()
            self.set_tableButtonSelected(self.Weather_week_Button)
        elif table_name == "type":
            dialog = QDialog()
            dialog.setWindowTitle("提示")
            dialog.setModal(True)
            dialog.adjustSize()
            layout = QVBoxLayout()
            text_label = QLabel("此資料庫無法直接插入、修改、刪除")
            text_label.setAlignment(Qt.AlignCenter)
            layout.addWidget(text_label)
            layout.addStretch(1)
            ok_button = QPushButton("確定")
            ok_button.clicked.connect(dialog.accept)
            ok_button.setFixedWidth(100)
            ok_button.setFixedHeight(30)
            button_layout = QHBoxLayout()
            button_layout.addStretch(1)
            button_layout.addWidget(ok_button)
            button_layout.addStretch(1)
            layout.addLayout(button_layout)
            dialog.setLayout(layout)
            dialog.exec_()
            self.set_tableButtonSelected(self.Type_Button)
        elif table_name == "ids":
            dialog = QDialog()
            dialog.setWindowTitle("提示")
            dialog.setModal(True)
            dialog.adjustSize()
            layout = QVBoxLayout()
            text_label = QLabel("此資料庫無法直接插入、修改、刪除")
            text_label.setAlignment(Qt.AlignCenter)
            layout.addWidget(text_label)
            layout.addStretch(1)
            ok_button = QPushButton("確定")
            ok_button.clicked.connect(dialog.accept)
            ok_button.setFixedWidth(100)
            ok_button.setFixedHeight(30)
            button_layout = QHBoxLayout()
            button_layout.addStretch(1)
            button_layout.addWidget(ok_button)
            button_layout.addStretch(1)
            layout.addLayout(button_layout)
            dialog.setLayout(layout)
            dialog.exec_()
            self.set_tableButtonSelected(self.Ids_Button)
        elif table_name == "hotel":
            def update_site_combo():
                city_id = city_combo.currentText()
                site_combo.clear()
                self.site_data = get_site_query(city_id)
                for site in self.site_data:
                    site_combo.addItem(f"{site['site_id']}", site['site_id'])
            if self.row == -1:
                    self.set_tableButtonSelected(self.Hotel_Button)
                    dialog = QDialog()
                    dialog.setWindowTitle("提示")
                    dialog.setModal(True)
                    dialog.resize(192, 108)
                    layout = QVBoxLayout()
                    text_label = QLabel("請先選擇要更改的資料")
                    text_label.setAlignment(Qt.AlignCenter)
                    layout.addWidget(text_label)
                    ok_button = QPushButton("確定")
                    ok_button.clicked.connect(dialog.accept)
                    ok_button.setFixedWidth(100)
                    ok_button.setFixedHeight(30)
                    layout.addWidget(ok_button, alignment=Qt.AlignCenter)            
                    dialog.setLayout(layout)            
                    dialog.exec_()
            for index, hotel_info in enumerate(self.hotel_data):
                if index == self.row:
                    dialog = QDialog()
                    dialog.setWindowTitle("Update")
                    dialog.setModal(True)
                    dialog.setFixedSize(425, 500)
                    main_layout = QVBoxLayout()
                    scroll_area = QScrollArea()
                    scroll_area.setWidgetResizable(True)
                    content_widget = QWidget()
                    layout = QVBoxLayout(content_widget)
                    u_id = hotel_info['ID']
                    city_id = hotel_info['城市']
                    site = hotel_info['鄉鎮']
                    add = hotel_info['地址']
                    name = hotel_info['名字']
                    hotel_class = hotel_info['旅館類別']
                    toldescribe = hotel_info['描述']
                    web = hotel_info['網址']
                    tex = hotel_info['電話']
                    serviceinfo = hotel_info['服務資訊']
                    room = hotel_info['房型']
                    parkinginfo = hotel_info['停車資訊']
                    picture1 = hotel_info['照片1']
                    pic_describe1 = hotel_info['照片描述1']
                    picture2 = hotel_info['照片2']
                    pic_describe2 = hotel_info['照片描述2']
                    picture3 = hotel_info['照片3']
                    pic_describe3 = hotel_info['照片描述3']
                    lowestprice = hotel_info['最低價格']
                    ceilingprice = hotel_info['最高價格']
                    people = hotel_info['可容納人數']
                    Px = hotel_info['經度']
                    Py = hotel_info['緯度']
                    id_label = QLabel("ID:")
                    id_input = QLineEdit(u_id)
                    layout.addWidget(id_label)
                    layout.addWidget(id_input)
                    city_label = QLabel("城市:")
                    city_combo = QComboBox()
                    city_combo.addItem("")
                    city_combo.activated.connect(update_site_combo) 
                    for city in get_city_query():
                        city_combo.addItem(f"{city['city_id']}")
                    layout.addWidget(city_label)
                    layout.addWidget(city_combo)
                    d_city = city_combo.findText(city_id)
                    if d_city != -1:
                        for idx in range(len(self.city_data)):
                            if idx == (d_city):
                                city_combo.setCurrentIndex(idx)
                    site_label = QLabel("鄉鎮:")
                    site_combo = QComboBox()
                    site_combo.addItem("")                   
                    if get_city_query():
                        update_site_combo()
                    layout.addWidget(site_label)
                    layout.addWidget(site_combo)
                    self.d_site = site_combo.findText(site)
                    if self.d_site != -1:
                        site_combo.setCurrentIndex(self.d_site)
                    add_label = QLabel("地址:")
                    add_input = QLineEdit(add)
                    layout.addWidget(add_label)
                    layout.addWidget(add_input)
                    name_label = QLabel("名字:")
                    name_input = QLineEdit(name)
                    layout.addWidget(name_label)
                    layout.addWidget(name_input)
                    hotel_class_label = QLabel("旅館類別:")
                    hotel_class_combo = QComboBox()
                    cndata = get_hotel_class_query()
                    for idx, class_ in enumerate(cndata):
                        hotel_class_combo.addItem(f"{class_['name']}")
                        if class_['class'] == hotel_class:
                            hotel_class_combo.setCurrentIndex(idx)
                    layout.addWidget(hotel_class_label)
                    layout.addWidget(hotel_class_combo)
                    toldescribe_label = QLabel("描述:")
                    toldescribe_input = QLineEdit(toldescribe)
                    layout.addWidget(toldescribe_label)
                    layout.addWidget(toldescribe_input)
                    web_label = QLabel("網址:")
                    web_input = QLineEdit(web)
                    layout.addWidget(web_label)
                    layout.addWidget(web_input)
                    tex_label = QLabel("電話:")
                    tex_input = QLineEdit(tex)
                    layout.addWidget(tex_label)
                    layout.addWidget(tex_input)
                    serviceinfo_label = QLabel("服務資訊:")
                    serviceinfo_input = QLineEdit(serviceinfo)
                    layout.addWidget(serviceinfo_label)
                    layout.addWidget(serviceinfo_input)
                    room_label = QLabel("房型:")
                    room_input = QLineEdit(room)
                    layout.addWidget(room_label)
                    layout.addWidget(room_input)
                    parkinginfo_label = QLabel("停車資訊:")
                    parkinginfo_input = QLineEdit(parkinginfo)
                    layout.addWidget(parkinginfo_label)
                    layout.addWidget(parkinginfo_input)
                    picture1_label = QLabel("照片1:")
                    picture1_input = QLineEdit(picture1)
                    layout.addWidget(picture1_label)
                    layout.addWidget(picture1_input)
                    pic_describe1_label = QLabel("照片描述1:")
                    pic_describe1_input = QLineEdit(pic_describe1)
                    layout.addWidget(pic_describe1_label)
                    layout.addWidget(pic_describe1_input)
                    picture2_label = QLabel("照片2:")
                    picture2_input = QLineEdit(picture2)
                    layout.addWidget(picture2_label)
                    layout.addWidget(picture2_input)
                    pic_describe2_label = QLabel("照片描述2:")
                    pic_describe2_input = QLineEdit(pic_describe2)
                    layout.addWidget(pic_describe2_label)
                    layout.addWidget(pic_describe2_input)
                    picture3_label = QLabel("照片3:")
                    picture3_input = QLineEdit(picture3)
                    layout.addWidget(picture3_label)
                    layout.addWidget(picture3_input)
                    pic_describe3_label = QLabel("照片描述3:")
                    pic_describe3_input = QLineEdit(pic_describe3)
                    layout.addWidget(pic_describe3_label)
                    layout.addWidget(pic_describe3_input)
                    lowestprice_label = QLabel("最低價格:")
                    lowestprice_input = QLineEdit(lowestprice)
                    layout.addWidget(lowestprice_label)
                    layout.addWidget(lowestprice_input)
                    ceilingprice_label = QLabel("最高價格:")
                    ceilingprice_input = QLineEdit(ceilingprice)
                    layout.addWidget(ceilingprice_label)
                    layout.addWidget(ceilingprice_input)
                    people_label = QLabel("可容納人數:")
                    people_input = QLineEdit(people)
                    layout.addWidget(people_label)
                    layout.addWidget(people_input)
                    Px_label = QLabel("經度:")
                    Px_input = QLineEdit(Px)
                    layout.addWidget(Px_label)
                    layout.addWidget(Px_input)
                    Py_label = QLabel("緯度:")
                    Py_input = QLineEdit(Py)
                    layout.addWidget(Py_label)
                    layout.addWidget(Py_input)
                    scroll_area.setWidget(content_widget)
                    main_layout.addWidget(scroll_area)
                    update_button = QPushButton("Update")
                    main_layout.addWidget(update_button, alignment=Qt.AlignCenter)
                    dialog.setLayout(main_layout)
                    def update_hotel_data():
                        id = id_input.text()
                        cityid = city_combo.currentText()
                        site = site_combo.currentText()
                        add = add_input.text()
                        name = name_input.text()
                        hotel_class = hotel_class_combo.currentText()
                        cn_class = 9
                        for val in cndata:
                            if val['name'] == hotel_class:
                                cn_class = str(int(val['class']))
                        toldescribe = toldescribe_input.text()
                        web = web_input.text()
                        tex = tex_input.text()
                        serviceinfo = serviceinfo_input.text()
                        room = room_input.text()
                        parkinginfo = parkinginfo_input.text()
                        picture1 = picture1_input.text()
                        pic_describe1 = pic_describe1_input.text()
                        picture2 = picture2_input.text()
                        pic_describe2 = pic_describe2_input.text()
                        picture3 = picture3_input.text()
                        pic_describe3 = pic_describe3_input.text()
                        lowestprice = lowestprice_input.text()
                        ceilingprice = ceilingprice_input.text()
                        people = people_input.text()
                        Px = Px_input.text()
                        Py = Py_input.text()
                        try:
                            updateHotelDataInToSql(id, cityid, site, add, name, cn_class, toldescribe, web, tex, serviceinfo, room, parkinginfo, picture1, pic_describe1, picture2, pic_describe2, picture3, pic_describe3, lowestprice, ceilingprice, people, Px, Py, u_id) #(更改的, 原本的)
                            print("success")
                            success_msg= f"資料更新成功!"
                            dialog.accept()
                            show_success_message(success_msg)
                            self.refresh_table(table_name)
                            self.set_tableButtonSelected(self.Hotel_Button)
                        except Exception as e:
                            print("Error update data:", e)
                            error_msg= f"更新資料錯誤，請先確認資料有無錯誤"
                            dialog.accept()
                            show_error_message(error_msg)
                            self.set_tableButtonSelected(self.Hotel_Button)
                    update_button.clicked.connect(update_hotel_data)
                    dialog.exec_()
                else:
                    self.set_tableButtonSelected(self.Hotel_Button)
        elif table_name == "restaurant":
            def update_site_combo():
                city_id = city_combo.currentText()
                site_combo.clear()
                self.site_data = get_site_query(city_id)
                for site in self.site_data:
                    site_combo.addItem(f"{site['site_id']}", site['site_id'])
            if self.row == -1:
                self.set_tableButtonSelected(self.Restaurant_Button)
                dialog = QDialog()
                dialog.setWindowTitle("提示")
                dialog.setModal(True)
                dialog.resize(192, 108)
                layout = QVBoxLayout()
                text_label = QLabel("請先選擇要更改的資料")
                text_label.setAlignment(Qt.AlignCenter)
                layout.addWidget(text_label)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(dialog.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                layout.addWidget(ok_button, alignment=Qt.AlignCenter)            
                dialog.setLayout(layout)            
                dialog.exec_()
            for index, restaurant_info in enumerate(self.restaurant_data):
                if index == self.row:
                    dialog = QDialog()
                    dialog.setWindowTitle("Update")
                    dialog.setModal(True)
                    dialog.setFixedSize(425, 500)
                    main_layout = QVBoxLayout()
                    scroll_area = QScrollArea()
                    scroll_area.setWidgetResizable(True)
                    content_widget = QWidget()
                    layout = QVBoxLayout(content_widget)
                    u_id = restaurant_info['ID']
                    city_id = restaurant_info['城市']
                    site = restaurant_info['鄉鎮']
                    zipcode = restaurant_info['郵遞區號']
                    add = restaurant_info['地址']
                    name = restaurant_info['名字']
                    description = restaurant_info['簡述']
                    tex = restaurant_info['電話']
                    picture1 = restaurant_info['照片1']
                    pic_describe1 = restaurant_info['照片描述1']
                    picture2 = restaurant_info['照片2']
                    pic_describe2 = restaurant_info['照片描述2']
                    picture3 = restaurant_info['照片3']
                    pic_describe3 = restaurant_info['照片描述3']
                    class1 = restaurant_info['餐廳類型1']
                    class2 = restaurant_info['餐廳類型2']
                    class3 = restaurant_info['餐廳類型3']
                    web = restaurant_info['網址']
                    Px = restaurant_info['經度']
                    Py = restaurant_info['緯度']
                    parkinginfo = restaurant_info['停車資訊']
                    time = restaurant_info['服務時間']
                    id_label = QLabel("ID:")
                    id_input = QLineEdit(u_id)
                    layout.addWidget(id_label)
                    layout.addWidget(id_input)
                    city_label = QLabel("城市:")
                    city_combo = QComboBox()
                    city_combo.addItem("")
                    city_combo.activated.connect(update_site_combo) 
                    for city in get_city_query():
                        city_combo.addItem(f"{city['city_id']}")
                    layout.addWidget(city_label)
                    layout.addWidget(city_combo)
                    d_city = city_combo.findText(city_id)
                    if d_city != -1:
                        for idx in range(len(self.city_data)):
                            if idx == (d_city):
                                city_combo.setCurrentIndex(idx)
                    site_label = QLabel("鄉鎮:")
                    site_combo = QComboBox()
                    site_combo.addItem("")                   
                    city_combo.activated.connect(update_site_combo)
                    if get_city_query():
                        update_site_combo()
                    layout.addWidget(site_label)
                    layout.addWidget(site_combo)
                    self.d_site = site_combo.findText(site)
                    if self.d_site != -1:
                        site_combo.setCurrentIndex(self.d_site)
                    zipcode_label = QLabel("郵遞區號:")
                    zipcode_input = QLineEdit(zipcode)
                    layout.addWidget(zipcode_label)
                    layout.addWidget(zipcode_input)
                    add_label = QLabel("地址:")
                    add_input = QLineEdit(add)
                    layout.addWidget(add_label)
                    layout.addWidget(add_input)
                    name_label = QLabel("名字:")
                    name_input = QLineEdit(name)
                    layout.addWidget(name_label)
                    layout.addWidget(name_input)
                    description_label = QLabel("簡述:")
                    description_input = QLineEdit(description)
                    layout.addWidget(description_label)
                    layout.addWidget(description_input)
                    tex_label = QLabel("電話:")
                    tex_input = QLineEdit(tex)
                    layout.addWidget(tex_label)
                    layout.addWidget(tex_input)
                    picture1_label = QLabel("照片1:")
                    picture1_input = QLineEdit(picture1)
                    layout.addWidget(picture1_label)
                    layout.addWidget(picture1_input)
                    pic_describe1_label = QLabel("照片描述1:")
                    pic_describe1_input = QLineEdit(pic_describe1)
                    layout.addWidget(pic_describe1_label)
                    layout.addWidget(pic_describe1_input)
                    picture2_label = QLabel("照片2:")
                    picture2_input = QLineEdit(picture2)
                    layout.addWidget(picture2_label)
                    layout.addWidget(picture2_input)
                    pic_describe2_label = QLabel("照片描述2:")
                    pic_describe2_input = QLineEdit(pic_describe2)
                    layout.addWidget(pic_describe2_label)
                    layout.addWidget(pic_describe2_input)
                    picture3_label = QLabel("照片3:")
                    picture3_input = QLineEdit(picture3)
                    layout.addWidget(picture3_label)
                    layout.addWidget(picture3_input)
                    pic_describe3_label = QLabel("照片描述3:")
                    pic_describe3_input = QLineEdit(pic_describe3)
                    layout.addWidget(pic_describe3_label)
                    layout.addWidget(pic_describe3_input)
                    class1_label = QLabel("餐廳類型1:")
                    class1_combo = QComboBox()
                    cndata1 = get_restaurant_class_query()
                    for idx, class_ in enumerate(cndata1):
                        class1_combo.addItem(f"{class_['name']}")
                        if class_['class'] == class1:
                            class1_combo.setCurrentIndex(idx)
                    layout.addWidget(class1_label)
                    layout.addWidget(class1_combo)
                    class2_label = QLabel("餐廳類型2:")
                    class2_combo = QComboBox()
                    cndata2 = get_restaurant_class_query()
                    for idx, class_ in enumerate(cndata2):
                        class2_combo.addItem(f"{class_['name']}")
                        if class_['class'] == class2:
                            class2_combo.setCurrentIndex(idx)
                    layout.addWidget(class2_label)
                    layout.addWidget(class2_combo)
                    class3_label = QLabel("餐廳類型3:")
                    class3_combo = QComboBox()
                    cndata3 = get_restaurant_class_query()
                    for idx, class_ in enumerate(cndata3):
                        class3_combo.addItem(f"{class_['name']}")
                        if class_['class'] == class3:
                            class3_combo.setCurrentIndex(idx)
                    layout.addWidget(class3_label)
                    layout.addWidget(class3_combo)
                    web_label = QLabel("網址:")
                    web_input = QLineEdit(web)
                    layout.addWidget(web_label)
                    layout.addWidget(web_input)
                    Px_label = QLabel("經度:")
                    Px_input = QLineEdit(Px)
                    layout.addWidget(Px_label)
                    layout.addWidget(Px_input)
                    Py_label = QLabel("緯度:")
                    Py_input = QLineEdit(Py)
                    layout.addWidget(Py_label)
                    layout.addWidget(Py_input)
                    parkinginfo_label = QLabel("停車資訊:")
                    parkinginfo_input = QLineEdit(parkinginfo)
                    layout.addWidget(parkinginfo_label)
                    layout.addWidget(parkinginfo_input)
                    time_label = QLabel("服務時間:")
                    time_input = QLineEdit(time)
                    layout.addWidget(time_label)
                    layout.addWidget(time_input)
                    scroll_area.setWidget(content_widget)
                    main_layout.addWidget(scroll_area)
                    update_button = QPushButton("Update")
                    main_layout.addWidget(update_button, alignment=Qt.AlignCenter)
                    dialog.setLayout(main_layout)
                    def update_restaurant_data():
                        id = id_input.text()
                        cityid = city_combo.currentText()
                        site = site_combo.currentText()
                        zipcode = zipcode_input.text()
                        add = add_input.text()
                        name = name_input.text()
                        description = description_input.text()
                        tex = tex_input.text()
                        picture1 = picture1_input.text()
                        pic_describe1 = pic_describe1_input.text()
                        picture2 = picture2_input.text()
                        pic_describe2 = pic_describe2_input.text()
                        picture3 = picture3_input.text()
                        pic_describe3 = pic_describe3_input.text()
                        class1 = class1_combo.currentText()
                        cn_class1 = 254
                        for val in cndata1:
                            if val['name'] == class1:
                                cn_class1 = str(int(val['class']))
                        class2 = class2_combo.currentText()
                        cn_class2 = 254
                        for val in cndata2:
                            if val['name'] == class2:
                                cn_class2 = str(int(val['class']))
                        class3 = class3_combo.currentText()
                        cn_class3 = 254
                        for val in cndata3:
                            if val['name'] == class3:
                                cn_class3 = str(int(val['class']))
                                web = web_input.text()
                                Px = Px_input.text()
                                Py = Py_input.text()
                                parkinginfo = parkinginfo_input.text()
                                time = time_input.text()
                        try:
                            updateRestaurantDataInToSql(id, cityid, site, zipcode, add, name, description, tex, picture1, pic_describe1, picture2, pic_describe2, picture3, pic_describe3, cn_class1, cn_class2, cn_class3, web, Px, Py, parkinginfo, time, u_id) #(更改的, 原本的)
                            print("success")
                            success_msg= f"資料更新成功!"
                            dialog.accept()
                            show_success_message(success_msg)
                            self.refresh_table(table_name)
                            self.set_tableButtonSelected(self.Restaurant_Button)
                        except Exception as e:
                            print("Error update data:", e)
                            error_msg= f"更新資料錯誤，請先確認資料有無錯誤"
                            dialog.accept()
                            show_error_message(error_msg)
                            self.set_tableButtonSelected(self.Restaurant_Button)
                    update_button.clicked.connect(update_restaurant_data)
                    dialog.exec_()
                else:
                    self.set_tableButtonSelected(self.Restaurant_Button)
        elif table_name == "view":
            def update_site_combo():
                city_id = city_combo.currentText()
                site_combo.clear()
                self.site_data = get_site_query(city_id)
                for site in self.site_data:
                    site_combo.addItem(f"{site['site_id']}", site['site_id'])
            if self.row == -1:
                self.set_tableButtonSelected(self.View_Button)
                dialog = QDialog()
                dialog.setWindowTitle("提示")
                dialog.setModal(True)
                dialog.resize(192, 108)
                layout = QVBoxLayout()
                text_label = QLabel("請先選擇要更改的資料")
                text_label.setAlignment(Qt.AlignCenter)
                layout.addWidget(text_label)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(dialog.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                layout.addWidget(ok_button, alignment=Qt.AlignCenter)            
                dialog.setLayout(layout)            
                dialog.exec_()
            for index, view_info in enumerate(self.view_data):
                if index == self.row:
                    dialog = QDialog()
                    dialog.setWindowTitle("Update")
                    dialog.setModal(True)
                    dialog.setFixedSize(425, 500)
                    main_layout = QVBoxLayout()
                    scroll_area = QScrollArea()
                    scroll_area.setWidgetResizable(True)
                    content_widget = QWidget()
                    layout = QVBoxLayout(content_widget)
                    u_id = view_info['ID']
                    city_id = view_info['城市']
                    site = view_info['鄉鎮']
                    zipcode = view_info['郵遞區號']
                    add = view_info['地址']
                    name = view_info['名字']
                    web = view_info['網址']
                    toldescribe = view_info['描述']
                    tex = view_info['電話']
                    travellinginfo = view_info['旅遊資訊']
                    parkinginfo = view_info['停車資訊']
                    picture1 = view_info['照片1']
                    pic_describe1 = view_info['照片描述1']
                    picture2 = view_info['照片2']
                    pic_describe2 = view_info['照片描述2']
                    picture3 = view_info['照片3']
                    pic_describe3 = view_info['照片描述3']
                    Px = view_info['經度']
                    Py = view_info['緯度']
                    class1 = view_info['景點類型1']
                    class2 = view_info['景點類型2']
                    class3 = view_info['景點類型3']
                    high_money = view_info['最高價格']
                    low_money = view_info['最低價格']
                    money = view_info['詳細價格描述']
                    time = view_info['服務時間']
                    id_label = QLabel("ID:")
                    id_input = QLineEdit(u_id)
                    layout.addWidget(id_label)
                    layout.addWidget(id_input)
                    city_label = QLabel("城市:")
                    city_combo = QComboBox()
                    city_combo.addItem("")
                    city_combo.activated.connect(update_site_combo) 
                    for city in get_city_query():
                        city_combo.addItem(f"{city['city_id']}")
                    layout.addWidget(city_label)
                    layout.addWidget(city_combo)
                    d_city = city_combo.findText(city_id)
                    if d_city != -1:
                        for idx in range(len(self.city_data)):
                            if idx == (d_city):
                                city_combo.setCurrentIndex(idx)
                    site_label = QLabel("鄉鎮:")
                    site_combo = QComboBox() 
                    site_combo.addItem("")                  
                    city_combo.activated.connect(update_site_combo)
                    if get_city_query():
                        update_site_combo()
                    layout.addWidget(site_label)
                    layout.addWidget(site_combo)
                    self.d_site = site_combo.findText(site)
                    if self.d_site != -1:
                        site_combo.setCurrentIndex(self.d_site)
                    zipcode_label = QLabel("郵遞區號:")
                    zipcode_input = QLineEdit(zipcode)
                    layout.addWidget(zipcode_label)
                    layout.addWidget(zipcode_input)
                    add_label = QLabel("地址:")
                    add_input = QLineEdit(add)
                    layout.addWidget(add_label)
                    layout.addWidget(add_input)
                    name_label = QLabel("名字:")
                    name_input = QLineEdit(name)
                    layout.addWidget(name_label)
                    layout.addWidget(name_input)
                    web_label = QLabel("網址:")
                    web_input = QLineEdit(web)
                    layout.addWidget(web_label)
                    layout.addWidget(web_input)
                    toldescribe_label = QLabel("描述:")
                    toldescribe_input = QLineEdit(toldescribe)
                    layout.addWidget(toldescribe_label)
                    layout.addWidget(toldescribe_input)
                    tex_label = QLabel("電話:")
                    tex_input = QLineEdit(tex)
                    layout.addWidget(tex_label)
                    layout.addWidget(tex_input)
                    travellinginfo_label = QLabel("旅遊資訊:")
                    travellinginfo_input = QLineEdit(travellinginfo)
                    layout.addWidget(travellinginfo_label)
                    layout.addWidget(travellinginfo_input)
                    parkinginfo_label = QLabel("停車資訊:")
                    parkinginfo_input = QLineEdit(parkinginfo)
                    layout.addWidget(parkinginfo_label)
                    layout.addWidget(parkinginfo_input)
                    picture1_label = QLabel("照片1:")
                    picture1_input = QLineEdit(picture1)
                    layout.addWidget(picture1_label)
                    layout.addWidget(picture1_input)
                    pic_describe1_label = QLabel("照片描述1:")
                    pic_describe1_input = QLineEdit(pic_describe1)
                    layout.addWidget(pic_describe1_label)
                    layout.addWidget(pic_describe1_input)
                    picture2_label = QLabel("照片2:")
                    picture2_input = QLineEdit(picture2)
                    layout.addWidget(picture2_label)
                    layout.addWidget(picture2_input)
                    pic_describe2_label = QLabel("照片描述2:")
                    pic_describe2_input = QLineEdit(pic_describe2)
                    layout.addWidget(pic_describe2_label)
                    layout.addWidget(pic_describe2_input)
                    picture3_label = QLabel("照片3:")
                    picture3_input = QLineEdit(picture3)
                    layout.addWidget(picture3_label)
                    layout.addWidget(picture3_input)
                    pic_describe3_label = QLabel("照片描述3:")
                    pic_describe3_input = QLineEdit(pic_describe3)
                    layout.addWidget(pic_describe3_label)
                    layout.addWidget(pic_describe3_input)
                    Px_label = QLabel("經度:")
                    Px_input = QLineEdit(Px)
                    layout.addWidget(Px_label)
                    layout.addWidget(Px_input)
                    Py_label = QLabel("緯度:")
                    Py_input = QLineEdit(Py)
                    layout.addWidget(Py_label)
                    layout.addWidget(Py_input)
                    class1_label = QLabel("景點類型1:")
                    class1_combo = QComboBox()
                    cndata1 = get_view_class_query()
                    for idx, class_ in enumerate(cndata1):
                        class1_combo.addItem(f"{class_['name']}")
                        if class_['class'] == class1:
                            class1_combo.setCurrentIndex(idx)
                    layout.addWidget(class1_label)
                    layout.addWidget(class1_combo)
                    class2_label = QLabel("景點類型2:")
                    class2_combo = QComboBox()
                    cndata2 = get_view_class_query()
                    for idx, class_ in enumerate(cndata2):
                        class2_combo.addItem(f"{class_['name']}")
                        if class_['class'] == class2:
                            class2_combo.setCurrentIndex(idx)
                    layout.addWidget(class2_label)
                    layout.addWidget(class2_combo)
                    class3_label = QLabel("景點類型3:")
                    class3_combo = QComboBox()
                    cndata3 = get_view_class_query()
                    for idx, class_ in enumerate(cndata3):
                        class3_combo.addItem(f"{class_['name']}")
                        if class_['class'] == class3:
                            class3_combo.setCurrentIndex(idx)
                    layout.addWidget(class3_label)
                    layout.addWidget(class3_combo)
                    high_money_label = QLabel("最高價格:")
                    high_money_input = QLineEdit(high_money)
                    layout.addWidget(high_money_label)
                    layout.addWidget(high_money_input)
                    low_money_label = QLabel("最低價格:")
                    low_money_input = QLineEdit(low_money)
                    layout.addWidget(low_money_label)
                    layout.addWidget(low_money_input)
                    money_label = QLabel("詳細價格描述:")
                    money_input = QLineEdit(money)
                    layout.addWidget(money_label)
                    layout.addWidget(money_input)
                    time_label = QLabel("服務時間:")
                    time_input = QLineEdit(time)
                    layout.addWidget(time_label)
                    layout.addWidget(time_input)
                    scroll_area.setWidget(content_widget)
                    main_layout.addWidget(scroll_area)
                    update_button = QPushButton("Update")
                    main_layout.addWidget(update_button, alignment=Qt.AlignCenter)
                    dialog.setLayout(main_layout)
                    def update_view_data():
                        id = id_input.text()
                        cityid = city_combo.currentText()
                        site = site_combo.currentText()
                        zipcode = zipcode_input.text()
                        add = add_input.text()
                        name = name_input.text()
                        web = web_input.text()
                        toldescribe = toldescribe_input.text()
                        tex = tex_input.text()
                        travellinginfo = travellinginfo_input.text()
                        parkinginfo = parkinginfo_input.text()
                        picture1 = picture1_input.text()
                        pic_describe1 = pic_describe1_input.text()
                        picture2 = picture2_input.text()
                        pic_describe2 = pic_describe2_input.text()
                        picture3 = picture3_input.text()
                        pic_describe3 = pic_describe3_input.text()
                        Px = Px_input.text()
                        Py = Py_input.text()
                        class1 = class1_combo.currentText()
                        cn_class1 = 254
                        for val in cndata1:
                            if val['name'] == class1:
                                cn_class1 = str(int(val['class']))
                        class2 = class2_combo.currentText()
                        cn_class2 = 254
                        for val in cndata2:
                            if val['name'] == class2:
                                cn_class2 = str(int(val['class']))
                        class3 = class3_combo.currentText()
                        cn_class3 = 254
                        for val in cndata3:
                            if val['name'] == class3:
                                cn_class3 = str(int(val['class']))
                                web = web_input.text()
                                Px = Px_input.text()
                                Py = Py_input.text()
                                parkinginfo = parkinginfo_input.text()
                                time = time_input.text()
                        high_money = high_money_input.text()
                        low_money = low_money_input.text()
                        money = money_input.text()
                        time = time_input.text()
                        try:
                            updateViewDataInToSql(id, cityid, site, zipcode, add, name, web, toldescribe, tex, travellinginfo, parkinginfo, picture1, pic_describe1, picture2, pic_describe2, picture3, pic_describe3, Px, Py, cn_class1, cn_class2, cn_class3, high_money, low_money, money, time, u_id) #(更改的, 原本的)
                            print("success")
                            success_msg= f"資料更新成功!"
                            dialog.accept()
                            show_success_message(success_msg)
                            self.refresh_table(table_name)
                            self.set_tableButtonSelected(self.View_Button)
                        except Exception as e:
                            print("Error update data:", e)
                            error_msg= f"更新資料錯誤，請先確認資料有無錯誤"
                            dialog.accept()
                            show_error_message(error_msg)
                            self.set_tableButtonSelected(self.View_Button)
                    update_button.clicked.connect(update_view_data)
                    dialog.exec_()
                else:
                    self.set_tableButtonSelected(self.View_Button)
        elif table_name == "activity":
            def update_site_combo():
                city_id = city_combo.currentText()
                site_combo.clear()
                self.site_data = get_site_query(city_id)
                for site in self.site_data:
                    site_combo.addItem(f"{site['site_id']}", site['site_id'])
            if self.row == -1:
                self.set_tableButtonSelected(self.Activity_Button)
                dialog = QDialog()
                dialog.setWindowTitle("提示")
                dialog.setModal(True)
                dialog.resize(192, 108)
                layout = QVBoxLayout()
                text_label = QLabel("請先選擇要更改的資料")
                text_label.setAlignment(Qt.AlignCenter)
                layout.addWidget(text_label)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(dialog.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                layout.addWidget(ok_button, alignment=Qt.AlignCenter)            
                dialog.setLayout(layout)            
                dialog.exec_()
            for index, activity_info in enumerate(self.activity_data):
                if index == self.row:
                    dialog = QDialog()
                    dialog.setWindowTitle("Update")
                    dialog.setModal(True)
                    dialog.setFixedSize(425, 500)
                    main_layout = QVBoxLayout()
                    scroll_area = QScrollArea()
                    scroll_area.setWidgetResizable(True)
                    content_widget = QWidget()
                    layout = QVBoxLayout(content_widget)
                    u_id = activity_info['ID']
                    city_id = activity_info['城市']
                    site = activity_info['鄉鎮']
                    add = activity_info['地址']
                    name = activity_info['名字']
                    web = activity_info['網址']
                    description = activity_info['簡述']
                    tex = activity_info['電話']
                    org = activity_info['主辦單位']
                    parkinginfo = activity_info['停車資訊']
                    picture1 = activity_info['照片1']
                    pic_describe1 = activity_info['照片描述1']
                    picture2 = activity_info['照片2']
                    pic_describe2 = activity_info['照片描述2']
                    picture3 = activity_info['照片3']
                    pic_describe3 = activity_info['照片描述3']
                    class1 = activity_info['類別1']
                    class2 = activity_info['類別2']
                    class3 = activity_info['類別3']
                    charge = activity_info['收費']
                    Px = activity_info['經度']
                    Py = activity_info['緯度']
                    time_start = activity_info['開始時間']
                    time_end = activity_info['結束時間']
                    participation = activity_info['活動參與對象']
                    travellinginfo = activity_info['交通資訊']
                    id_label = QLabel("ID:")
                    id_input = QLineEdit(u_id)
                    layout.addWidget(id_label)
                    layout.addWidget(id_input)
                    city_label = QLabel("城市:")
                    city_combo = QComboBox()
                    city_combo.addItem("")
                    city_combo.activated.connect(update_site_combo) 
                    for city in get_city_query():
                        city_combo.addItem(f"{city['city_id']}")
                    layout.addWidget(city_label)
                    layout.addWidget(city_combo)
                    d_city = city_combo.findText(city_id)
                    if d_city != -1:
                        for idx in range(len(self.city_data)):
                            if idx == (d_city):
                                city_combo.setCurrentIndex(idx)
                    site_label = QLabel("鄉鎮:")
                    site_combo = QComboBox()
                    site_combo.addItem("")                
                    city_combo.activated.connect(update_site_combo)
                    if get_city_query():
                        update_site_combo()
                    layout.addWidget(site_label)
                    layout.addWidget(site_combo)
                    self.d_site = site_combo.findText(site)
                    if self.d_site != -1:
                        site_combo.setCurrentIndex(self.d_site)
                    add_label = QLabel("地址:")
                    add_input = QLineEdit(add)
                    layout.addWidget(add_label)
                    layout.addWidget(add_input)
                    name_label = QLabel("名字:")
                    name_input = QLineEdit(name)
                    layout.addWidget(name_label)
                    layout.addWidget(name_input)
                    web_label = QLabel("網址:")
                    web_input = QLineEdit(web)
                    layout.addWidget(web_label)
                    layout.addWidget(web_input)
                    description_label = QLabel("簡述:")
                    description_input = QLineEdit(description)
                    layout.addWidget(description_label)
                    layout.addWidget(description_input)
                    tex_label = QLabel("電話:")
                    tex_input = QLineEdit(tex)
                    layout.addWidget(tex_label)
                    layout.addWidget(tex_input)
                    org_label = QLabel("主辦單位:")
                    org_input = QLineEdit(org)
                    layout.addWidget(org_label)
                    layout.addWidget(org_input)
                    parkinginfo_label = QLabel("停車資訊:")
                    parkinginfo_input = QLineEdit(parkinginfo)
                    layout.addWidget(parkinginfo_label)
                    layout.addWidget(parkinginfo_input)
                    picture1_label = QLabel("照片1:")
                    picture1_input = QLineEdit(picture1)
                    layout.addWidget(picture1_label)
                    layout.addWidget(picture1_input)
                    pic_describe1_label = QLabel("照片描述1:")
                    pic_describe1_input = QLineEdit(pic_describe1)
                    layout.addWidget(pic_describe1_label)
                    layout.addWidget(pic_describe1_input)
                    picture2_label = QLabel("照片2:")
                    picture2_input = QLineEdit(picture2)
                    layout.addWidget(picture2_label)
                    layout.addWidget(picture2_input)
                    pic_describe2_label = QLabel("照片描述2:")
                    pic_describe2_input = QLineEdit(pic_describe2)
                    layout.addWidget(pic_describe2_label)
                    layout.addWidget(pic_describe2_input)
                    picture3_label = QLabel("照片3:")
                    picture3_input = QLineEdit(picture3)
                    layout.addWidget(picture3_label)
                    layout.addWidget(picture3_input)
                    pic_describe3_label = QLabel("照片描述3:")
                    pic_describe3_input = QLineEdit(pic_describe3)
                    layout.addWidget(pic_describe3_label)
                    layout.addWidget(pic_describe3_input)
                    class1_label = QLabel("類別1:")
                    class1_combo = QComboBox()
                    cndata1 = get_activity_class_query()
                    for idx, class_ in enumerate(cndata1):
                        class1_combo.addItem(f"{class_['name']}")
                        if class_['class'] == class1:
                            class1_combo.setCurrentIndex(idx)
                    layout.addWidget(class1_label)
                    layout.addWidget(class1_combo)
                    class2_label = QLabel("類別2:")
                    class2_combo = QComboBox()
                    cndata2 = get_activity_class_query()
                    for idx, class_ in enumerate(cndata2):
                        class2_combo.addItem(f"{class_['name']}")
                        if class_['class'] == class2:
                            class2_combo.setCurrentIndex(idx)
                    layout.addWidget(class2_label)
                    layout.addWidget(class2_combo)
                    class3_label = QLabel("類別3:")
                    class3_combo = QComboBox()
                    cndata3 = get_activity_class_query()
                    for idx, class_ in enumerate(cndata3):
                        class3_combo.addItem(f"{class_['name']}")
                        if class_['class'] == class3:
                            class3_combo.setCurrentIndex(idx)
                    layout.addWidget(class3_label)
                    layout.addWidget(class3_combo)
                    charge_label = QLabel("收費:")
                    charge_input = QLineEdit(charge)
                    layout.addWidget(charge_label)
                    layout.addWidget(charge_input)
                    Px_label = QLabel("經度:")
                    Px_input = QLineEdit(Px)
                    layout.addWidget(Px_label)
                    layout.addWidget(Px_input)
                    Py_label = QLabel("緯度:")
                    Py_input = QLineEdit(Py)
                    layout.addWidget(Py_label)
                    layout.addWidget(Py_input)
                    time_start_label = QLabel("開始時間:")
                    time_start_input = QLineEdit(time_start)
                    layout.addWidget(time_start_label)
                    layout.addWidget(time_start_input)
                    time_end_label = QLabel("結束時間:")
                    time_end_input = QLineEdit(time_end)
                    layout.addWidget(time_end_label)
                    layout.addWidget(time_end_input)
                    participation_label = QLabel("活動參與對象:")
                    participation_input = QLineEdit(participation)
                    layout.addWidget(participation_label)
                    layout.addWidget(participation_input)
                    travellinginfo_label = QLabel("交通資訊:")
                    travellinginfo_input = QLineEdit(travellinginfo)
                    layout.addWidget(travellinginfo_label)
                    layout.addWidget(travellinginfo_input)
                    scroll_area.setWidget(content_widget)
                    main_layout.addWidget(scroll_area)
                    update_button = QPushButton("Update")
                    main_layout.addWidget(update_button, alignment=Qt.AlignCenter)
                    dialog.setLayout(main_layout)
                    def update_activity_data():
                        id = id_input.text()
                        cityid = city_combo.currentText()
                        site = site_combo.currentText()
                        add = add_input.text()
                        name = name_input.text()
                        web = web_input.text()
                        description = description_input.text()
                        tex = tex_input.text()
                        org = org_input.text()
                        parkinginfo = parkinginfo_input.text()
                        picture1 = picture1_input.text()
                        pic_describe1 = pic_describe1_input.text()
                        picture2 = picture2_input.text()
                        pic_describe2 = pic_describe2_input.text()
                        picture3 = picture3_input.text()
                        pic_describe3 = pic_describe3_input.text()
                        class1 = class1_combo.currentText()
                        cn_class1 = 254
                        for val in cndata1:
                            if val['name'] == class1:
                                cn_class1 = str(int(val['class']))
                        class2 = class2_combo.currentText()
                        cn_class2 = 254
                        for val in cndata2:
                            if val['name'] == class2:
                                cn_class2 = str(int(val['class']))
                        class3 = class3_combo.currentText()
                        cn_class3 = 254
                        for val in cndata3:
                            if val['name'] == class3:
                                cn_class3 = str(int(val['class']))
                                web = web_input.text()
                                Px = Px_input.text()
                                Py = Py_input.text()
                                parkinginfo = parkinginfo_input.text()
                        charge = charge_input.text()
                        Px = Px_input.text()
                        Py = Py_input.text()
                        start_time = time_start_input.text()
                        end_time = time_end_input.text()
                        participation = participation_input.text()
                        travellinginfo = travellinginfo_input.text()
                        try:
                            updateActivityDataInToSql(id, cityid, site, add, name, web, description, tex, org, parkinginfo, picture1, pic_describe1, picture2, pic_describe2, picture3, pic_describe3, cn_class1, cn_class2, cn_class3, charge, Px, Py, start_time, end_time, participation, travellinginfo, u_id) #(更改的, 原本的)
                            print("success")
                            success_msg= f"資料更新成功!"
                            dialog.accept()
                            show_success_message(success_msg)
                            self.refresh_table(table_name)
                            self.set_tableButtonSelected(self.Activity_Button)
                        except Exception as e:
                            print("Error update data:", e)
                            error_msg= f"更新資料錯誤，請先確認資料有無錯誤"
                            dialog.accept()
                            show_error_message(error_msg)
                            self.set_tableButtonSelected(self.Activity_Button)
                    update_button.clicked.connect(update_activity_data)
                    dialog.exec_()
                else:
                    self.set_tableButtonSelected(self.Activity_Button)
        elif table_name == "route":
            def update_dayid_combo():
                TravelId = Travel_Id_combo.currentText()
                DayId_combo.clear()
                DayId_data = get_DayId_query(TravelId)
                for DayId in DayId_data:
                    DayId_combo.addItem(f"{DayId['DayId']}", DayId['DayId'])
            def update_tripstartId_combo():
                TravelId = Travel_Id_combo.currentText()
                DayId = DayId_combo.currentText()
                tripStartId_combo.clear()
                tripStartId_data = get_tripStartId_query(TravelId, DayId)
                for ViewId in tripStartId_data:
                    tripStartId_combo.addItem(f"{ViewId['ViewId']}", ViewId['ViewId'])
            if self.row == -1:
                self.set_tableButtonSelected(self.Route_Button)
                dialog = QDialog()
                dialog.setWindowTitle("提示")
                dialog.setModal(True)
                dialog.resize(192, 108)
                layout = QVBoxLayout()
                text_label = QLabel("請先選擇要更改的資料")
                text_label.setAlignment(Qt.AlignCenter)
                layout.addWidget(text_label)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(dialog.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                layout.addWidget(ok_button, alignment=Qt.AlignCenter)            
                dialog.setLayout(layout)            
                dialog.exec_()
            for index, route_info in enumerate(self.route_data):
                if index == self.row:
                    dialog = QDialog()
                    dialog.setWindowTitle("Update")
                    dialog.setModal(True)
                    dialog.setFixedSize(380, 380)
                    layout = QVBoxLayout()
                    travel_Id = route_info['travelId']
                    Day_Id = route_info['DayId']
                    tripStart_Id = route_info['tripStartId']
                    route_Id = route_info['routeId']
                    route_Name = route_info['routeName']                                        
                    Travel_Id_label = QLabel("Travel_ID:")
                    Travel_Id_combo = QComboBox()
                    Travel_Id_combo.addItem("")
                    Travel_Id_combo.activated.connect(update_dayid_combo) 
                    for TravelId in get_trip_TravelId_query():
                        Travel_Id_combo.addItem(f"{TravelId['TravelId']}")
                    layout.addWidget(Travel_Id_label)
                    layout.addWidget(Travel_Id_combo)
                    d_Travel_Id = Travel_Id_combo.findText(travel_Id)
                    if d_Travel_Id != -1:
                        Travel_Id_combo.setCurrentIndex(d_Travel_Id)
                    DayId_label = QLabel("Day_ID:")
                    DayId_combo = QComboBox()
                    DayId_combo.addItem("")
                    Travel_Id_combo.activated.connect(update_tripstartId_combo) 
                    DayId_combo.activated.connect(update_tripstartId_combo) 
                    if get_trip_TravelId_query():
                        update_dayid_combo()
                    layout.addWidget(DayId_label)
                    layout.addWidget(DayId_combo)
                    d_Day_Id = DayId_combo.findText(Day_Id)
                    if d_Day_Id != -1:
                        DayId_combo.setCurrentIndex(d_Day_Id)
                    tripStartId_label = QLabel("Trip_Start_ID:")
                    tripStartId_combo = QComboBox()
                    tripStartId_combo.addItem("")
                    if get_DayId_query(Travel_Id_combo):
                            update_tripstartId_combo()
                    layout.addWidget(tripStartId_label)
                    layout.addWidget(tripStartId_combo)
                    d_tripStart_Id = tripStartId_combo.findText(tripStart_Id)
                    if d_tripStart_Id != -1:
                        tripStartId_combo.setCurrentIndex(d_tripStart_Id)
                    route_Id_label = QLabel("Route_ID:")
                    route_Id_input = QLineEdit(route_Id)
                    layout.addWidget(route_Id_label)
                    layout.addWidget(route_Id_input)
                    route_Name_label = QLabel("Route_Name:")
                    route_Name_input = QLineEdit(route_Name)
                    layout.addWidget(route_Name_label)
                    layout.addWidget(route_Name_input)
                    update_button = QPushButton("Update")
                    layout.addWidget(update_button, alignment=Qt.AlignCenter)
                    dialog.setLayout(layout)
                    def update_route_data():
                        travelId = Travel_Id_combo.currentText()
                        DayId = DayId_combo.currentText()
                        tripStartId = tripStartId_combo.currentText()
                        routeId = route_Id_input.text()    
                        routeName = route_Name_input.text()                        
                        try:
                            updateRouteDataInToSql(travelId, DayId, tripStartId, routeId, routeName, travel_Id, Day_Id, route_Id, tripStart_Id) #(更改的, 原本的)
                            print("success")
                            success_msg= f"資料更新成功!"
                            dialog.accept()
                            show_success_message(success_msg)
                            self.refresh_table(table_name)
                            self.set_tableButtonSelected(self.Route_Button)
                        except Exception as e:
                            print("Error update data:", e)
                            error_msg= f"更新資料錯誤，請先確認資料有無錯誤"
                            dialog.accept()
                            show_error_message(error_msg)
                            self.set_tableButtonSelected(self.Route_Button)
                    update_button.clicked.connect(update_route_data)
                    dialog.exec_()
                else:
                    self.set_tableButtonSelected(self.Route_Button)
        elif table_name == "trip":
            if self.row == -1:
                self.set_tableButtonSelected(self.Trip_Button)
                dialog = QDialog()
                dialog.setWindowTitle("提示")
                dialog.setModal(True)
                dialog.resize(192, 108)
                layout = QVBoxLayout()
                text_label = QLabel("請先選擇要更改的資料")
                text_label.setAlignment(Qt.AlignCenter)
                layout.addWidget(text_label)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(dialog.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                layout.addWidget(ok_button, alignment=Qt.AlignCenter)            
                dialog.setLayout(layout)            
                dialog.exec_()
            for index, trip_info in enumerate(self.trip_data):
                if index == self.row:
                    dialog = QDialog()
                    dialog.setWindowTitle("Update")
                    dialog.setModal(True)
                    dialog.resize(350, 600)
                    layout = QVBoxLayout()
                    Travel_Id = trip_info['TravelId']
                    Day_Id = trip_info['DayId']
                    View_Id = trip_info['ViewId']
                    Type_Id = trip_info['Type']
                    Trip_Id = trip_info['TripId']
                    Id = trip_info['Id']
                    date = trip_info['date']
                    time = trip_info['time']
                    weather = trip_info['weather']
                    Travel_Id_label = QLabel("Travel_ID:")
                    Travel_Id_combo = QComboBox()
                    Travel_Id_combo.addItem("")
                    for TravelId in get_travelId_query():
                        Travel_Id_combo.addItem(f"{TravelId['TravelId']}")
                    layout.addWidget(Travel_Id_label)
                    layout.addWidget(Travel_Id_combo)
                    d_Travel_Id = Travel_Id_combo.findText(Travel_Id)
                    if d_Travel_Id != -1:
                        Travel_Id_combo.setCurrentIndex(d_Travel_Id)
                    Day_Id_label = QLabel("Day_ID:")
                    Day_Id_input = QLineEdit(Day_Id)
                    layout.addWidget(Day_Id_label)
                    layout.addWidget(Day_Id_input)
                    View_Id_label = QLabel("View_ID:")
                    View_Id_input = QLineEdit(View_Id)
                    layout.addWidget(View_Id_label)
                    layout.addWidget(View_Id_input)
                    Type_label = QLabel("Type:")
                    Type_Id_combo = QComboBox()
                    Type_Id_combo.addItem("")
                    for Type in get_type_query():
                        Type_Id_combo.addItem(f"{Type['Type']}")
                    layout.addWidget(Type_label)
                    layout.addWidget(Type_Id_combo)
                    d_Type = Type_Id_combo.findText(Type_Id)
                    if d_Type != -1:
                        Type_Id_combo.setCurrentIndex(d_Type)
                    Trip_Id_label = QLabel("Trip_ID:")
                    Trip_Id_input = QLineEdit(Trip_Id)
                    layout.addWidget(Trip_Id_label)
                    layout.addWidget(Trip_Id_input)
                    Id_label = QLabel("ID:")
                    Id_input = QLineEdit(Id)
                    layout.addWidget(Id_label)
                    layout.addWidget(Id_input)
                    date_label = QLabel("Date:")
                    date_input = QLineEdit(date)
                    layout.addWidget(date_label)
                    layout.addWidget(date_input)
                    time_label = QLabel("Time:")
                    time_input = QLineEdit(time)
                    layout.addWidget(time_label)
                    layout.addWidget(time_input)
                    weather_label = QLabel("Weather:")
                    weather_input = QLineEdit(weather)
                    layout.addWidget(weather_label)
                    layout.addWidget(weather_input)
                    update_button = QPushButton("Update")
                    layout.addWidget(update_button, alignment=Qt.AlignCenter)
                    dialog.setLayout(layout)
                    def update_trip_data():
                        TravelId = Travel_Id_combo.currentText()
                        DayId = Day_Id_input.text()
                        ViewId = View_Id_input.text()
                        Type = Type_Id_combo.currentText()
                        TripId = Trip_Id_input.text()                        
                        Id = Id_input.text()
                        date = date_input.text()                        
                        time = time_input.text()
                        weather = weather_input.text()                        
                        try:
                            updateTripDataInToSql(TravelId, DayId, ViewId, Type, TripId, Id, date, time, weather, Travel_Id, Day_Id, View_Id) #(更改的, 原本的)
                            print("success")
                            success_msg= f"資料更新成功!"
                            dialog.accept()
                            show_success_message(success_msg)
                            self.refresh_table(table_name)
                            self.set_tableButtonSelected(self.Trip_Button)
                        except Exception as e:
                            print("Error update data:", e)
                            error_msg= f"更新資料錯誤，請先確認資料有無錯誤"
                            dialog.accept()
                            show_error_message(error_msg)
                            self.set_tableButtonSelected(self.Trip_Button)
                    update_button.clicked.connect(update_trip_data)
                    dialog.exec_()
                else:
                    self.set_tableButtonSelected(self.Trip_Button)
        elif table_name == "user_record_trip":
            def update_dayid_combo():
                TravelId = Travel_Id_combo.currentText()
                DayId_combo.clear()
                DayId_data = get_DayId_query(TravelId)
                for DayId in DayId_data:
                    DayId_combo.addItem(f"{DayId['DayId']}", DayId['DayId'])
            if self.row == -1:
                self.set_tableButtonSelected(self.User_Record_Trip_Button)
                dialog = QDialog()
                dialog.setWindowTitle("提示")
                dialog.setModal(True)
                dialog.resize(192, 108)
                layout = QVBoxLayout()
                text_label = QLabel("請先選擇要更改的資料")
                text_label.setAlignment(Qt.AlignCenter)
                layout.addWidget(text_label)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(dialog.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                layout.addWidget(ok_button, alignment=Qt.AlignCenter)            
                dialog.setLayout(layout)            
                dialog.exec_()
            for index, user_record_trip_info in enumerate(self.user_record_trip_data):
                if index == self.row:
                    dialog = QDialog()
                    dialog.setWindowTitle("Update")
                    dialog.setModal(True)
                    dialog.setFixedSize(330, 400)
                    layout = QVBoxLayout()
                    user_Id = user_record_trip_info['userId']
                    Travel_Id = user_record_trip_info['TravelId']
                    Day_Id = user_record_trip_info['DayId']
                    isLike = user_record_trip_info['isLike']
                    isStore = user_record_trip_info['isStore']
                    user_Id_label = QLabel("User_ID:")
                    user_Id_combo = QComboBox()
                    user_Id_combo.addItem("")
                    for userId in get_userId_query():
                        user_Id_combo.addItem(f"{userId['email']}")
                    layout.addWidget(user_Id_label)
                    layout.addWidget(user_Id_combo)
                    d_user_Id = user_Id_combo.findText(user_Id)
                    if d_user_Id != -1:
                        user_Id_combo.setCurrentIndex(d_user_Id)
                    Travel_Id_label = QLabel("Travel_ID:")
                    Travel_Id_combo = QComboBox()
                    Travel_Id_combo.addItem("")
                    Travel_Id_combo.activated.connect(update_dayid_combo) 
                    for TravelId in get_trip_TravelId_query():
                        Travel_Id_combo.addItem(f"{TravelId['TravelId']}")
                    layout.addWidget(Travel_Id_label)
                    layout.addWidget(Travel_Id_combo)
                    d_Travel_Id = Travel_Id_combo.findText(Travel_Id)
                    if d_Travel_Id != -1:
                        Travel_Id_combo.setCurrentIndex(d_Travel_Id)
                    DayId_label = QLabel("Day_ID:")
                    DayId_combo = QComboBox()
                    DayId_combo.addItem("")
                    if get_trip_TravelId_query():
                        update_dayid_combo()
                    layout.addWidget(DayId_label)
                    layout.addWidget(DayId_combo)
                    d_Day_Id = DayId_combo.findText(Day_Id)
                    if d_Day_Id != -1:
                        DayId_combo.setCurrentIndex(d_Day_Id)
                    isLike_label = QLabel("is_Like:")
                    isLike_input = QLineEdit(isLike)
                    layout.addWidget(isLike_label)
                    layout.addWidget(isLike_input)
                    isStore_label = QLabel("is_Store:")
                    isStore_input = QLineEdit(isStore)
                    layout.addWidget(isStore_label)
                    layout.addWidget(isStore_input)
                    update_button = QPushButton("Update")
                    layout.addWidget(update_button, alignment=Qt.AlignCenter)
                    dialog.setLayout(layout)
                    def update_user_record_trip_data():
                        userId = user_Id_combo.currentText()
                        TravelId = Travel_Id_combo.currentText()
                        DayId = DayId_combo.currentText()
                        isLike = isLike_input.text()
                        isStore = isStore_input.text()
                        try:
                            updateRecordTripDataInToSql(userId, TravelId, DayId, isLike, isStore, user_Id, Travel_Id, Day_Id) #(更改的, 原本的)
                            print("success")
                            success_msg= f"資料更新成功!"
                            dialog.accept()
                            show_success_message(success_msg)
                            self.refresh_table(table_name)
                            self.set_tableButtonSelected(self.User_Record_Trip_Button)
                        except Exception as e:
                            print("Error update data:", e)
                            error_msg= f"更新資料錯誤，請先確認資料有無錯誤"
                            dialog.accept()
                            show_error_message(error_msg)
                            self.set_tableButtonSelected(self.User_Record_Trip_Button)
                    update_button.clicked.connect(update_user_record_trip_data)
                    dialog.exec_()
                else:
                    self.set_tableButtonSelected(self.User_Record_Trip_Button)
        elif table_name == "travel":
            if self.row == -1:
                self.set_tableButtonSelected(self.Travel_Button)
                dialog = QDialog()
                dialog.setWindowTitle("提示")
                dialog.setModal(True)
                dialog.resize(192, 108)
                layout = QVBoxLayout()
                text_label = QLabel("請先選擇要更改的資料")
                text_label.setAlignment(Qt.AlignCenter)
                layout.addWidget(text_label)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(dialog.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                layout.addWidget(ok_button, alignment=Qt.AlignCenter)            
                dialog.setLayout(layout)            
                dialog.exec_()
            for index, travel_info in enumerate(self.travel_data):
                if index == self.row:
                    dialog = QDialog()
                    dialog.setWindowTitle("Update")
                    dialog.setModal(True)
                    dialog.setFixedSize(350, 260)
                    layout = QVBoxLayout()
                    Travel_Id = travel_info['TravelId']
                    Travel_Name = travel_info['TravelName']
                    user_Id = travel_info['userId']
                    Travel_Id_label = QLabel("Travel_ID:")
                    Travel_Id_input = QLineEdit(Travel_Id)
                    layout.addWidget(Travel_Id_label)
                    layout.addWidget(Travel_Id_input)
                    Travel_Name_label = QLabel("Trip_Name:")
                    Travel_Name_input = QLineEdit(Travel_Name)
                    layout.addWidget(Travel_Name_label)
                    layout.addWidget(Travel_Name_input)
                    user_Id_label = QLabel("User_ID:")
                    user_Id_combo = QComboBox()
                    user_Id_combo.addItem("")
                    for userId in get_userId_query():
                        user_Id_combo.addItem(f"{userId['email']}")
                    layout.addWidget(user_Id_label)
                    layout.addWidget(user_Id_combo)
                    d_user_Id = user_Id_combo.findText(user_Id)
                    if d_user_Id != -1:
                        user_Id_combo.setCurrentIndex(d_user_Id)
                    update_button = QPushButton("Update")
                    layout.addWidget(update_button, alignment=Qt.AlignCenter)
                    dialog.setLayout(layout)
                    def update_travel_data():
                        travelId = Travel_Id_input.text()
                        TravelName = Travel_Name_input.text()
                        userId = user_Id_combo.currentText()
                        try:
                            updateTravelDataInToSql(travelId, TravelName, userId, Travel_Id) #(更改的, 原本的)
                            print("success")
                            success_msg= f"資料更新成功!"
                            dialog.accept()
                            show_success_message(success_msg)
                            self.refresh_table(table_name)
                            self.set_tableButtonSelected(self.Travel_Button)
                        except Exception as e:
                            print("Error update data:", e)
                            error_msg= f"更新資料錯誤，請先確認資料有無錯誤"
                            dialog.accept()
                            show_error_message(error_msg)
                            self.set_tableButtonSelected(self.Travel_Button)
                    update_button.clicked.connect(update_travel_data)
                    dialog.exec_()
                else:
                    self.set_tableButtonSelected(self.Travel_Button)
        elif table_name == "user_record_travel":
            if self.row == -1:
                self.set_tableButtonSelected(self.User_Record_Travel_Button)
                dialog = QDialog()
                dialog.setWindowTitle("提示")
                dialog.setModal(True)
                dialog.resize(192, 108)
                layout = QVBoxLayout()
                text_label = QLabel("請先選擇要更改的資料")
                text_label.setAlignment(Qt.AlignCenter)
                layout.addWidget(text_label)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(dialog.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                layout.addWidget(ok_button, alignment=Qt.AlignCenter)            
                dialog.setLayout(layout)            
                dialog.exec_()
            for index, user_record_travel_info in enumerate(self.user_record_travel_data):
                if index == self.row:
                    dialog = QDialog()
                    dialog.setWindowTitle("Update")
                    dialog.setModal(True)
                    dialog.setFixedSize(330, 330)
                    layout = QVBoxLayout()
                    user_Id = user_record_travel_info['userId']
                    Travel_Id = user_record_travel_info['TravelId']
                    is_Like = user_record_travel_info['isLike']
                    is_Store = user_record_travel_info['isStore']
                    user_Id_label = QLabel("User_ID:")
                    user_Id_combo = QComboBox()
                    user_Id_combo.addItem("")
                    for userId in get_userId_query():
                        user_Id_combo.addItem(f"{userId['email']}")
                    layout.addWidget(user_Id_label)
                    layout.addWidget(user_Id_combo)
                    d_user_Id = user_Id_combo.findText(user_Id)
                    if d_user_Id != -1:
                        user_Id_combo.setCurrentIndex(d_user_Id)
                    Travel_Id_label = QLabel("Travel_ID:")
                    Travel_Id_combo = QComboBox()
                    Travel_Id_combo.addItem("")
                    for TravelId in get_travelId_query():
                        Travel_Id_combo.addItem(f"{TravelId['TravelId']}")
                    layout.addWidget(Travel_Id_label)
                    layout.addWidget(Travel_Id_combo)
                    d_Travel_Id = Travel_Id_combo.findText(Travel_Id)
                    if d_Travel_Id != -1:
                        Travel_Id_combo.setCurrentIndex(d_Travel_Id)
                    is_Like_label = QLabel("is_Like:")
                    is_Like_input = QLineEdit(is_Like)
                    layout.addWidget(is_Like_label)
                    layout.addWidget(is_Like_input)
                    is_Store_label = QLabel("is_Store:")
                    is_Store_input = QLineEdit(is_Store)
                    layout.addWidget(is_Store_label)
                    layout.addWidget(is_Store_input)
                    update_button = QPushButton("Update")
                    layout.addWidget(update_button, alignment=Qt.AlignCenter)
                    dialog.setLayout(layout)
                    def update_user_record_travel_data():
                        userId = user_Id_combo.currentText()
                        TravelId = Travel_Id_combo.currentText()
                        isLike = is_Like_input.text()
                        isStore = is_Store_input.text()
                        try:
                            updateRecordTravelDataInToSql(userId, TravelId, isLike, isStore, user_Id, Travel_Id) #(更改的, 原本的)
                            print("success")
                            success_msg= f"資料更新成功!"
                            dialog.accept()
                            show_success_message(success_msg)
                            self.refresh_table(table_name)
                            self.set_tableButtonSelected(self.User_Record_Travel_Button)
                        except Exception as e:
                            if "1062" in str(e) and "Duplicate entry" in str(e):
                                msg_box = QMessageBox()
                                msg_box.setWindowTitle("錯誤")
                                msg_box.setText("已存在相同的userId和TravelId，故不可更新成這筆資料")
                                msg_box.setIcon(QMessageBox.Warning)
                                msg_box.exec_()
                            else:
                                print("Error update data:", e)
                                error_msg= f"更新資料錯誤，請先確認資料有無錯誤"
                                dialog.accept()
                                show_error_message(error_msg)
                                self.set_tableButtonSelected(self.User_Record_Travel_Button)
                    update_button.clicked.connect(update_user_record_travel_data)
                    dialog.exec_()
                else:
                    self.set_tableButtonSelected(self.User_Record_Travel_Button)
        elif table_name == "user_record_view":
            def update_id_combo():
                type = Type_Id_combo.currentText()
                ID_combo.clear()
                self.id_data = get_ids_id_query(type)
                for Id in self.id_data:
                    ID_combo.addItem(f"{Id['ID']}", Id['ID'])
            if self.row == -1:
                self.set_tableButtonSelected(self.User_Record_View_Button)
                dialog = QDialog()
                dialog.setWindowTitle("提示")
                dialog.setModal(True)
                dialog.resize(192, 108)
                layout = QVBoxLayout()
                text_label = QLabel("請先選擇要更改的資料")
                text_label.setAlignment(Qt.AlignCenter)
                layout.addWidget(text_label)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(dialog.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                layout.addWidget(ok_button, alignment=Qt.AlignCenter)            
                dialog.setLayout(layout)            
                dialog.exec_()
            for index, user_record_view_info in enumerate(self.user_record_view_data):
                if index == self.row:
                    dialog = QDialog()
                    dialog.setWindowTitle("Update")
                    dialog.setModal(True)
                    dialog.setFixedSize(330, 370)
                    layout = QVBoxLayout()
                    user_Id = user_record_view_info['userId']
                    Type_Id = user_record_view_info['Type']
                    Id = user_record_view_info['ID']
                    is_Like = user_record_view_info['isLike']
                    is_Store = user_record_view_info['isStore']
                    user_Id_label = QLabel("User_ID:")
                    user_Id_combo = QComboBox()
                    user_Id_combo.addItem("")
                    for userId in get_userId_query():
                        user_Id_combo.addItem(f"{userId['email']}")
                    layout.addWidget(user_Id_label)
                    layout.addWidget(user_Id_combo)
                    d_user_Id = user_Id_combo.findText(user_Id)
                    if d_user_Id != -1:
                        user_Id_combo.setCurrentIndex(d_user_Id)
                    Type_label = QLabel("Type:")
                    Type_Id_combo = QComboBox()
                    Type_Id_combo.addItem("")
                    for Type in get_ids_type_query():
                        Type_Id_combo.addItem(f"{Type['Type']}")
                    layout.addWidget(Type_label)
                    layout.addWidget(Type_Id_combo)
                    d_Type_Id = Type_Id_combo.findText(Type_Id)
                    if d_Type_Id != -1:
                        Type_Id_combo.setCurrentIndex(d_Type_Id)
                    ID_label = QLabel("ID:")
                    ID_combo = QComboBox()
                    ID_combo.addItem("")
                    Type_Id_combo.activated.connect(update_id_combo)
                    if get_city_query():
                        update_id_combo()
                    layout.addWidget(ID_label)
                    layout.addWidget(ID_combo)
                    d_Id = ID_combo.findText(Id)
                    if d_Id != -1:
                        ID_combo.setCurrentIndex(d_Id)
                    is_Like_label = QLabel("is_Like:")
                    is_Like_input = QLineEdit(is_Like)
                    layout.addWidget(is_Like_label)
                    layout.addWidget(is_Like_input)
                    is_Store_label = QLabel("is_Store:")
                    is_Store_input = QLineEdit(is_Store)
                    layout.addWidget(is_Store_label)
                    layout.addWidget(is_Store_input)
                    update_button = QPushButton("Update")
                    layout.addWidget(update_button, alignment=Qt.AlignCenter)
                    dialog.setLayout(layout)
                    def update_user_record_view_data():
                        userId = user_Id_combo.currentText()
                        type = Type_Id_combo.currentText()
                        id = ID_combo.currentText()
                        isLike = is_Like_input.text()
                        isStore = is_Store_input.text()
                        try:
                            updateRecordViewDataInToSql(userId, type, id, isLike, isStore, user_Id, Type_Id, Id) #(更改的, 原本的)
                            print("success")
                            success_msg= f"資料更新成功!"
                            dialog.accept()
                            show_success_message(success_msg)
                            self.refresh_table(table_name)
                            self.set_tableButtonSelected(self.User_Record_View_Button)
                        except Exception as e:
                            print("Error update data:", e)
                            error_msg= f"更新資料錯誤，請先確認資料有無錯誤"
                            dialog.accept()
                            show_error_message(error_msg)
                            self.set_tableButtonSelected(self.User_Record_View_Button)
                    update_button.clicked.connect(update_user_record_view_data)
                    dialog.exec_()
                else:
                    self.set_tableButtonSelected(self.User_Record_View_Button)
        else:
            dialog = QDialog()
            dialog.setWindowTitle("錯誤")
            dialog.setModal(True)
            dialog.adjustSize()
            layout = QVBoxLayout()
            text_label = QLabel("請先選擇表格")
            text_label.setAlignment(Qt.AlignCenter)
            layout.addWidget(text_label)
            layout.addStretch(1)
            ok_button = QPushButton("確定")
            ok_button.clicked.connect(dialog.accept)
            ok_button.setFixedWidth(100)
            ok_button.setFixedHeight(30)
            button_layout = QHBoxLayout()
            button_layout.addStretch(1)
            button_layout.addWidget(ok_button)
            button_layout.addStretch(1)
            layout.addLayout(button_layout)
            dialog.setLayout(layout)
            dialog.exec_()
    def delete_button_clicked(self, button):
        index = self.tableView.currentIndex()
        self.row = self.on_cell_clicked(index)
        print(index)
        self.set_tableButtonSelected
        self.selectedButton = button
        table_name = self.selected_table
        def show_error_message(message):
                msg = QDialog()
                msg.setWindowTitle("錯誤")
                msg.setModal(True)
                layout = QVBoxLayout()
                text_label = QLabel(message)
                text_label.setAlignment(Qt.AlignCenter)
                layout.addWidget(text_label)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(msg.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                layout.addWidget(ok_button, alignment=Qt.AlignCenter)
                msg.setLayout(layout)
                msg.adjustSize()       
                msg.exec_()
        def show_success_message(message):
                msg = QDialog()
                msg.setWindowTitle("提示")
                msg.setModal(True)
                layout = QVBoxLayout()
                text_label = QLabel(message)
                text_label.setAlignment(Qt.AlignCenter)
                layout.addWidget(text_label)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(msg.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                layout.addWidget(ok_button, alignment=Qt.AlignCenter)
                msg.setLayout(layout)
                msg.adjustSize()       
                msg.exec_()
        def get_hotel_class_query():
            hotel_class_query = "SELECT `class`, `name` FROM `type_classes` WHERE `type` = 'hotel' "
            hotel_class_data = self.db.execute_query(hotel_class_query)
            return hotel_class_data
        def get_restaurant_class_query():
            restaurant_class_query = "SELECT `class`, `name` FROM `type_classes` WHERE `type` = 'restaurant' "
            restaurant_class_data = self.db.execute_query(restaurant_class_query)
            return restaurant_class_data
        def get_view_class_query():
            view_class_query = "SELECT `class`, `name` FROM `type_classes` WHERE `type` = 'view' "
            view_class_data = self.db.execute_query(view_class_query)
            return view_class_data
        def get_activity_class_query():
            activity_class_query = "SELECT `class`, `name` FROM `type_classes` WHERE `type` = 'activity' "
            activity_class_data = self.db.execute_query(activity_class_query)
            return activity_class_data
        if table_name == "manager":
            if self.row == -1:                
                dialog = QDialog()
                dialog.setWindowTitle("提示")
                dialog.setModal(True)
                dialog.resize(192, 108)
                layout = QVBoxLayout()
                text_label = QLabel("請先選擇要刪除的資料")
                text_label.setAlignment(Qt.AlignCenter)
                layout.addWidget(text_label)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(dialog.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                layout.addWidget(ok_button, alignment=Qt.AlignCenter)            
                dialog.setLayout(layout)            
                dialog.exec_()
                self.set_tableButtonSelected(self.Manager_Button)
            for index, manager_info in enumerate(self.manager_data):
                if index == self.row:
                    dialog = QDialog()
                    dialog.setWindowTitle("Delete")
                    dialog.setModal(True)
                    dialog.setFixedSize(400, 170)
                    layout = QVBoxLayout()
                    username = manager_info['username']
                    user_password = manager_info['userpassword']
                    text_label = QLabel("確定要刪除資料(刪除後即無法復原)")
                    text_label.setAlignment(Qt.AlignCenter)
                    layout.addWidget(text_label)
                    managername_layout = QHBoxLayout()
                    managername_label = QLabel("Manager Name:")
                    managername_display = QLineEdit(username)
                    managername_display.setReadOnly(True)
                    managername_layout.addWidget(managername_label)
                    managername_layout.addWidget(managername_display)
                    manager_password_layout = QHBoxLayout()
                    manager_password_label = QLabel("Manager Password:")
                    manager_password_display = QLineEdit(user_password)
                    manager_password_display.setReadOnly(True)
                    manager_password_layout.addWidget(manager_password_label)
                    manager_password_layout.addWidget(manager_password_display)
                    layout.addLayout(managername_layout)
                    layout.addLayout(manager_password_layout)
                    delete_button = QPushButton("Delete")
                    layout.addWidget(delete_button, alignment=Qt.AlignCenter)
                    dialog.setLayout(layout)
                    def delete_manager_data():
                        try:
                            deleteManagerDataInToSql(username)
                            print("success")
                            success_msg= f"資料刪除成功!"
                            dialog.accept()
                            show_success_message(success_msg)
                            self.refresh_table(table_name) 
                            self.set_tableButtonSelected(self.Manager_Button)
                        except Exception as e:
                            print("Error delete data:", e)
                            error_msg= f"刪除資料錯誤，請先確認資料有無錯誤"
                            dialog.accept()
                            show_error_message(error_msg)
                            self.set_tableButtonSelected(self.Manager_Button)
                    delete_button.clicked.connect(delete_manager_data)
                    dialog.exec_()
                else:
                    self.set_tableButtonSelected(self.Manager_Button)
                    pass
        elif table_name == "user":
            if self.row == -1:                
                dialog = QDialog()
                dialog.setWindowTitle("提示")
                dialog.setModal(True)
                dialog.resize(192, 108)
                layout = QVBoxLayout()
                text_label = QLabel("請先選擇要更改的資料")
                text_label.setAlignment(Qt.AlignCenter)
                layout.addWidget(text_label)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(dialog.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                layout.addWidget(ok_button, alignment=Qt.AlignCenter)            
                dialog.setLayout(layout)            
                dialog.exec_()
                self.set_tableButtonSelected(self.User_Button)
            self.dialog = QDialog()
            for index, user_info in enumerate(self.user_data):
                if index == self.row:
                    dialog = QDialog()
                    dialog.setWindowTitle("Delete")
                    dialog.setModal(True)
                    dialog.setFixedSize(400, 300)
                    layout = QVBoxLayout()
                    user_email = user_info['email']
                    username = user_info['username']
                    user_password = user_info['userpassword']
                    text_label = QLabel("確定要刪除資料(刪除後即無法復原)")
                    text_label.setAlignment(Qt.AlignCenter)
                    layout.addWidget(text_label)
                    user_email_label = QLabel("User_email:")
                    user_email_pisplay = QLineEdit(user_email)
                    user_email_pisplay.setReadOnly(True)
                    layout.addWidget(user_email_label)
                    layout.addWidget(user_email_pisplay)
                    username_label = QLabel("User_name:")
                    username_display = QLineEdit(username)
                    username_display.setReadOnly(True)
                    layout.addWidget(username_label)
                    layout.addWidget(username_display)
                    user_password_label = QLabel("User_password:")
                    user_password_display = QLineEdit(user_password)
                    user_password_display.setReadOnly(True)
                    layout.addWidget(user_password_label)
                    layout.addWidget(user_password_display)
                    delete_button = QPushButton("Delete")
                    layout.addWidget(delete_button, alignment=Qt.AlignCenter)
                    dialog.setLayout(layout)
                    def delete_user_data():    
                        try:
                            deleteUserDataInToSql(user_email)
                            print("success")
                            success_msg= f"資料刪除成功!"
                            dialog.accept()
                            show_success_message(success_msg) 
                            self.refresh_table(table_name)
                            self.set_tableButtonSelected(self.User_Button)
                        except Exception as e:
                            print("Error delete data:", e)
                            error_msg= f"刪除資料錯誤，請先確認資料有無錯誤"
                            dialog.accept()
                            show_error_message(error_msg)
                            self.set_tableButtonSelected(self.User_Button)
                    delete_button.clicked.connect(delete_user_data)
                    dialog.exec_()
                    break
                else:
                    self.set_tableButtonSelected(self.User_Button)
        elif table_name == "city":
            if self.row == -1:                
                dialog = QDialog()
                dialog.setWindowTitle("提示")
                dialog.setModal(True)
                dialog.resize(192, 108)
                layout = QVBoxLayout()
                text_label = QLabel("請先選擇要刪除的資料")
                text_label.setAlignment(Qt.AlignCenter)
                layout.addWidget(text_label)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(dialog.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                layout.addWidget(ok_button, alignment=Qt.AlignCenter)            
                dialog.setLayout(layout)            
                dialog.exec_()
                self.set_tableButtonSelected(self.City_Button)
            for index, city_info in enumerate(self.city_data):
                if index == self.row:
                    dialog = QDialog()
                    dialog.setWindowTitle("Delete")
                    dialog.setModal(True)
                    dialog.setFixedSize(380, 150)
                    layout = QVBoxLayout()
                    city_id = city_info['city_id']
                    text_label = QLabel("確定要刪除資料(刪除後即無法復原)")
                    text_label.setAlignment(Qt.AlignCenter)
                    layout.addWidget(text_label)
                    city_id_label = QLabel("City_Name")
                    city_id_display = QLineEdit(city_id)
                    city_id_display.setReadOnly(True)
                    layout.addWidget(city_id_label)
                    layout.addWidget(city_id_display)
                    delete_button = QPushButton("Delete")
                    layout.addWidget(delete_button, alignment=Qt.AlignCenter)
                    dialog.setLayout(layout)
                    def delete_city_data():
                        try:
                            deleteCityDataInToSql(city_id)
                            print("success")
                            success_msg= f"資料刪除成功!"
                            dialog.accept()
                            show_success_message(success_msg)
                            self.refresh_table(table_name)
                            self.set_tableButtonSelected(self.City_Button)
                        except Exception as e:
                            print("Error delete data:", e)
                            error_msg= f"刪除資料錯誤，請先確認資料有無錯誤"
                            dialog.accept()
                            show_error_message(error_msg)
                            self.set_tableButtonSelected(self.City_Button)
                    delete_button.clicked.connect(delete_city_data)
                    dialog.exec_()
                else:
                    self.set_tableButtonSelected(self.City_Button)
        elif table_name == "site": 
            if self.row == -1:                
                dialog = QDialog()
                dialog.setWindowTitle("提示")
                dialog.setModal(True)
                dialog.resize(192, 108)
                layout = QVBoxLayout()
                text_label = QLabel("請先選擇要刪除的資料")
                text_label.setAlignment(Qt.AlignCenter)
                layout.addWidget(text_label)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(dialog.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                layout.addWidget(ok_button, alignment=Qt.AlignCenter)            
                dialog.setLayout(layout)            
                dialog.exec_()
                self.set_tableButtonSelected(self.Site_Button)
            for index, site_info in enumerate(self.site_data):
                if index == self.row:
                    dialog = QDialog()
                    dialog.setWindowTitle("Delete")
                    dialog.setModal(True)
                    dialog.setFixedSize(380, 230)
                    layout = QVBoxLayout()
                    city_id = site_info['city_id']
                    site_id = site_info['site_id']
                    text_label = QLabel("確定要刪除資料(刪除後即無法復原)")
                    text_label.setAlignment(Qt.AlignCenter)
                    layout.addWidget(text_label)
                    city_id_label = QLabel("City_id:")
                    city_id_display = QLineEdit(city_id)
                    city_id_display.setReadOnly(True)
                    layout.addWidget(city_id_label)
                    layout.addWidget(city_id_display)
                    site_id_label = QLabel("Site_id:")
                    site_id_display = QLineEdit(site_id)
                    site_id_display.setReadOnly(True)
                    layout.addWidget(site_id_label)
                    layout.addWidget(site_id_display)
                    delete_button = QPushButton("Delete")
                    layout.addWidget(delete_button, alignment=Qt.AlignCenter)
                    dialog.setLayout(layout)
                    def delete_site_data():
                        try:
                            deleteSiteDataInToSql(site_id)
                            print("success")
                            success_msg= f"資料刪除成功!"
                            dialog.accept()
                            show_success_message(success_msg)
                            self.refresh_table(table_name)
                            self.set_tableButtonSelected(self.Site_Button)
                        except Exception as e:
                            print("Error delete data:", e)
                            error_msg= f"刪除資料錯誤，請先確認資料有無錯誤"
                            dialog.accept()
                            show_error_message(error_msg)
                            self.set_tableButtonSelected(self.Site_Button)
                    delete_button.clicked.connect(delete_site_data)
                    dialog.exec_()
                else:
                    self.set_tableButtonSelected(self.Site_Button)
        elif table_name == "weather_36hours":
            dialog = QDialog()
            dialog.setWindowTitle("提示")
            dialog.setModal(True)
            dialog.adjustSize()
            layout = QVBoxLayout()
            text_label = QLabel("此資料庫為預測資料，無法直接插入、修改、刪除")
            text_label.setAlignment(Qt.AlignCenter)
            layout.addWidget(text_label)
            layout.addStretch(1)
            ok_button = QPushButton("確定")
            ok_button.clicked.connect(dialog.accept)
            ok_button.setFixedWidth(100)
            ok_button.setFixedHeight(30)
            button_layout = QHBoxLayout()
            button_layout.addStretch(1)
            button_layout.addWidget(ok_button)
            button_layout.addStretch(1)
            layout.addLayout(button_layout)
            dialog.setLayout(layout)
            dialog.exec_()
            self.set_tableButtonSelected(self.Weather_36hours_Button)
        elif table_name == "weather_2days":
            dialog = QDialog()
            dialog.setWindowTitle("提示")
            dialog.setModal(True)
            dialog.adjustSize()
            layout = QVBoxLayout()
            text_label = QLabel("此資料庫為預測資料，無法直接插入、修改、刪除")
            text_label.setAlignment(Qt.AlignCenter)
            layout.addWidget(text_label)
            layout.addStretch(1)
            ok_button = QPushButton("確定")
            ok_button.clicked.connect(dialog.accept)
            ok_button.setFixedWidth(100)
            ok_button.setFixedHeight(30)
            button_layout = QHBoxLayout()
            button_layout.addStretch(1)
            button_layout.addWidget(ok_button)
            button_layout.addStretch(1)
            layout.addLayout(button_layout)
            dialog.setLayout(layout)
            dialog.exec_()
            self.set_tableButtonSelected(self.Weather_2days_Button)
        elif table_name == "weather_week":
            dialog = QDialog()
            dialog.setWindowTitle("提示")
            dialog.setModal(True)
            dialog.adjustSize()
            layout = QVBoxLayout()
            text_label = QLabel("此資料庫為預測資料，無法直接插入、修改、刪除")
            text_label.setAlignment(Qt.AlignCenter)
            layout.addWidget(text_label)
            layout.addStretch(1)
            ok_button = QPushButton("確定")
            ok_button.clicked.connect(dialog.accept)
            ok_button.setFixedWidth(100)
            ok_button.setFixedHeight(30)
            button_layout = QHBoxLayout()
            button_layout.addStretch(1)
            button_layout.addWidget(ok_button)
            button_layout.addStretch(1)
            layout.addLayout(button_layout)
            dialog.setLayout(layout)
            dialog.exec_()
            self.set_tableButtonSelected(self.Weather_week_Button)
        elif table_name == "type":
            dialog = QDialog()
            dialog.setWindowTitle("提示")
            dialog.setModal(True)
            dialog.adjustSize()
            layout = QVBoxLayout()
            text_label = QLabel("此資料庫無法直接插入、修改、刪除")
            text_label.setAlignment(Qt.AlignCenter)
            layout.addWidget(text_label)
            layout.addStretch(1)
            ok_button = QPushButton("確定")
            ok_button.clicked.connect(dialog.accept)
            ok_button.setFixedWidth(100)
            ok_button.setFixedHeight(30)
            button_layout = QHBoxLayout()
            button_layout.addStretch(1)
            button_layout.addWidget(ok_button)
            button_layout.addStretch(1)
            layout.addLayout(button_layout)
            dialog.setLayout(layout)
            dialog.exec_()
            self.set_tableButtonSelected(self.Type_Button)
        elif table_name == "ids":
            dialog = QDialog()
            dialog.setWindowTitle("提示")
            dialog.setModal(True)
            dialog.adjustSize()
            layout = QVBoxLayout()
            text_label = QLabel("此資料庫無法直接插入、修改、刪除")
            text_label.setAlignment(Qt.AlignCenter)
            layout.addWidget(text_label)
            layout.addStretch(1)
            ok_button = QPushButton("確定")
            ok_button.clicked.connect(dialog.accept)
            ok_button.setFixedWidth(100)
            ok_button.setFixedHeight(30)
            button_layout = QHBoxLayout()
            button_layout.addStretch(1)
            button_layout.addWidget(ok_button)
            button_layout.addStretch(1)
            layout.addLayout(button_layout)
            dialog.setLayout(layout)
            dialog.exec_()
            self.set_tableButtonSelected(self.Ids_Button)
        elif table_name == "hotel":
            if self.row == -1:                
                dialog = QDialog()
                dialog.setWindowTitle("提示")
                dialog.setModal(True)
                dialog.resize(192, 108)
                layout = QVBoxLayout()
                text_label = QLabel("請先選擇要刪除的資料")
                text_label.setAlignment(Qt.AlignCenter)
                layout.addWidget(text_label)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(dialog.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                layout.addWidget(ok_button, alignment=Qt.AlignCenter)            
                dialog.setLayout(layout)            
                dialog.exec_()
                self.set_tableButtonSelected(self.Hotel_Button)
            for index, hotel_info in enumerate(self.hotel_data):
                if index == self.row:
                    dialog = QDialog()
                    dialog.setWindowTitle("Delete")
                    dialog.setModal(True)
                    dialog.setFixedSize(425, 500)
                    main_layout = QVBoxLayout()
                    scroll_area = QScrollArea()
                    scroll_area.setWidgetResizable(True)
                    content_widget = QWidget()
                    layout = QVBoxLayout(content_widget)
                    u_id = hotel_info['ID']
                    city = hotel_info['城市']
                    site = hotel_info['鄉鎮']
                    add = hotel_info['地址']
                    name = hotel_info['名字']
                    hotel = hotel_info['旅館類別']
                    toldescribe = hotel_info['描述']
                    web = hotel_info['網址']
                    tex = hotel_info['電話']
                    serviceinfo = hotel_info['服務資訊']
                    room = hotel_info['房型']
                    parkinginfo = hotel_info['停車資訊']
                    picture1 = hotel_info['照片1']
                    pic_describe1 = hotel_info['照片描述1']
                    picture2 = hotel_info['照片2']
                    pic_describe2 = hotel_info['照片描述2']
                    picture3 = hotel_info['照片3']
                    pic_describe3 = hotel_info['照片描述3']
                    lowestprice = hotel_info['最低價格']
                    ceilingprice = hotel_info['最高價格']
                    people = hotel_info['可容納人數']
                    Px = hotel_info['經度']
                    Py = hotel_info['緯度']
                    text_label = QLabel("確定要刪除資料(刪除後即無法復原)")
                    text_label.setAlignment(Qt.AlignCenter)
                    layout.addWidget(text_label)
                    id_label = QLabel("ID:")
                    id_display = QLineEdit(u_id)
                    id_display.setReadOnly(True)
                    layout.addWidget(id_label)
                    layout.addWidget(id_display)
                    city_label = QLabel("城市:")
                    city_display = QLineEdit(city)
                    city_display.setReadOnly(True)
                    layout.addWidget(city_label)
                    layout.addWidget(city_display)
                    site_label = QLabel("鄉鎮:")
                    site_display = QLineEdit(site)
                    site_display.setReadOnly(True)
                    layout.addWidget(site_label)
                    layout.addWidget(site_display)
                    add_label = QLabel("地址:")
                    add_display = QLineEdit(add)
                    add_display.setReadOnly(True)
                    layout.addWidget(add_label)
                    layout.addWidget(add_display)
                    name_label = QLabel("名字:")
                    name_display = QLineEdit(name)
                    name_display.setReadOnly(True)
                    layout.addWidget(name_label)
                    layout.addWidget(name_display)
                    hotel_label = QLabel("旅館類別:")
                    cndata1 = get_hotel_class_query()
                    for idx, class_ in enumerate(cndata1):
                        if class_['class'] == hotel:
                            hotel = class_['name']
                    hotel_display = QLineEdit(hotel)
                    hotel_display.setReadOnly(True)
                    layout.addWidget(hotel_label)
                    layout.addWidget(hotel_display)
                    toldescribe_label = QLabel("描述:")
                    toldescribe_display = QLineEdit(toldescribe)
                    toldescribe_display.setReadOnly(True)
                    layout.addWidget(toldescribe_label)
                    layout.addWidget(toldescribe_display)
                    web_label = QLabel("網址:")
                    web_display = QLineEdit(web)
                    web_display.setReadOnly(True)
                    layout.addWidget(web_label)
                    layout.addWidget(web_display)
                    tex_label = QLabel("電話:")
                    tex_display = QLineEdit(tex)
                    tex_display.setReadOnly(True)
                    layout.addWidget(tex_label)
                    layout.addWidget(tex_display)
                    serviceinfo_label = QLabel("服務資訊:")
                    serviceinfo_display = QLineEdit(serviceinfo)
                    serviceinfo_display.setReadOnly(True)
                    layout.addWidget(serviceinfo_label)
                    layout.addWidget(serviceinfo_display)
                    room_label = QLabel("房型:")
                    room_display = QLineEdit(room)
                    room_display.setReadOnly(True)
                    layout.addWidget(room_label)
                    layout.addWidget(room_display)
                    parkinginfo_label = QLabel("停車資訊:")
                    parkinginfo_display = QLineEdit(parkinginfo)
                    parkinginfo_display.setReadOnly(True)
                    layout.addWidget(parkinginfo_label)
                    layout.addWidget(parkinginfo_display)
                    picture1_label = QLabel("照片1:")
                    picture1_display = QLineEdit(picture1)
                    picture1_display.setReadOnly(True)
                    layout.addWidget(picture1_label)
                    layout.addWidget(picture1_display)
                    pic_describe1_label = QLabel("照片描述1:")
                    pic_describe1_display = QLineEdit(pic_describe1)
                    pic_describe1_display.setReadOnly(True)
                    layout.addWidget(pic_describe1_label)
                    layout.addWidget(pic_describe1_display)
                    picture2_label = QLabel("照片2:")
                    picture2_display = QLineEdit(picture2)
                    picture2_display.setReadOnly(True)
                    layout.addWidget(picture2_label)
                    layout.addWidget(picture2_display)
                    pic_describe2_label = QLabel("照片描述2:")
                    pic_describe2_display = QLineEdit(pic_describe2)
                    pic_describe2_display.setReadOnly(True)
                    layout.addWidget(pic_describe2_label)
                    layout.addWidget(pic_describe2_display)
                    picture3_label = QLabel("照片3:")
                    picture3_display = QLineEdit(picture3)
                    picture3_display.setReadOnly(True)
                    layout.addWidget(picture3_label)
                    layout.addWidget(picture3_display)
                    pic_describe3_label = QLabel("照片描述3:")
                    pic_describe3_display = QLineEdit(pic_describe3)
                    pic_describe3_display.setReadOnly(True)
                    layout.addWidget(pic_describe3_label)
                    layout.addWidget(pic_describe3_display)
                    lowestprice_label = QLabel("最低價格:")
                    lowestprice_display = QLineEdit(lowestprice)
                    lowestprice_display.setReadOnly(True)
                    layout.addWidget(lowestprice_label)
                    layout.addWidget(lowestprice_display)
                    ceilingprice_label = QLabel("最高價格:")
                    ceilingprice_display = QLineEdit(ceilingprice)
                    ceilingprice_display.setReadOnly(True)
                    layout.addWidget(ceilingprice_label)
                    layout.addWidget(ceilingprice_display)
                    people_label = QLabel("可容納人數:")
                    people_display = QLineEdit(people)
                    people_display.setReadOnly(True)
                    layout.addWidget(people_label)
                    layout.addWidget(people_display)
                    Px_label = QLabel("經度:")
                    Px_display = QLineEdit(Px)
                    Px_display.setReadOnly(True)
                    layout.addWidget(Px_label)
                    layout.addWidget(Px_display)
                    Py_label = QLabel("緯度:")
                    Py_display = QLineEdit(Py)
                    Py_display.setReadOnly(True)
                    layout.addWidget(Py_label)
                    layout.addWidget(Py_display)
                    scroll_area.setWidget(content_widget)
                    main_layout.addWidget(scroll_area)
                    delete_button = QPushButton("Delete")
                    main_layout.addWidget(delete_button, alignment=Qt.AlignCenter)
                    dialog.setLayout(main_layout)
                    def delete_hotel_data():
                        try:
                            deleteHotelDataInToSql(u_id)
                            print("success")
                            success_msg= f"資料刪除成功!"
                            dialog.accept()
                            show_success_message(success_msg)
                            self.refresh_table(table_name)
                            self.set_tableButtonSelected(self.Hotel_Button)
                        except Exception as e:
                            print("Error delete data:", e)
                            error_msg= f"刪除資料錯誤，請先確認資料有無錯誤"
                            dialog.accept()
                            show_error_message(error_msg)
                            self.set_tableButtonSelected(self.Hotel_Button)
                    delete_button.clicked.connect(delete_hotel_data)
                    dialog.exec_()
                else:
                    self.set_tableButtonSelected(self.Hotel_Button)
        elif table_name == "restaurant":
            if self.row == -1:                
                dialog = QDialog()
                dialog.setWindowTitle("提示")
                dialog.setModal(True)
                dialog.resize(192, 108)
                layout = QVBoxLayout()
                text_label = QLabel("請先選擇要刪除的資料")
                text_label.setAlignment(Qt.AlignCenter)
                layout.addWidget(text_label)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(dialog.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                layout.addWidget(ok_button, alignment=Qt.AlignCenter)            
                dialog.setLayout(layout)            
                dialog.exec_()
                self.set_tableButtonSelected(self.Restaurant_Button)
            for index, restaurant_info in enumerate(self.restaurant_data):
                if index == self.row:
                    dialog = QDialog()
                    dialog.setWindowTitle("Delete")
                    dialog.setModal(True)
                    dialog.setFixedSize(425, 500)
                    main_layout = QVBoxLayout()
                    scroll_area = QScrollArea()
                    scroll_area.setWidgetResizable(True)
                    content_widget = QWidget()
                    layout = QVBoxLayout(content_widget)
                    u_id = restaurant_info['ID']
                    city = restaurant_info['城市']
                    site = restaurant_info['鄉鎮']
                    zipcode = restaurant_info['郵遞區號']
                    add = restaurant_info['地址']
                    name = restaurant_info['名字']
                    description = restaurant_info['簡述']
                    tex = restaurant_info['電話']
                    picture1 = restaurant_info['照片1']
                    pic_describe1 = restaurant_info['照片描述1']
                    picture2 = restaurant_info['照片2']
                    pic_describe2 = restaurant_info['照片描述2']
                    picture3 = restaurant_info['照片3']
                    pic_describe3 = restaurant_info['照片描述3']
                    class1 = restaurant_info['餐廳類型1']
                    class2 = restaurant_info['餐廳類型2']
                    class3 = restaurant_info['餐廳類型3']
                    web = restaurant_info['網址']
                    Px = restaurant_info['經度']
                    Py = restaurant_info['緯度']
                    parkinginfo = restaurant_info['停車資訊']
                    time = restaurant_info['服務時間']
                    text_label = QLabel("確定要刪除資料(刪除後即無法復原)")
                    text_label.setAlignment(Qt.AlignCenter)
                    layout.addWidget(text_label)
                    id_label = QLabel("ID:")
                    id_display = QLineEdit(u_id)
                    id_display.setReadOnly(True)
                    layout.addWidget(id_label)
                    layout.addWidget(id_display)
                    city_label = QLabel("城市:")
                    city_display = QLineEdit(city)
                    city_display.setReadOnly(True)
                    layout.addWidget(city_label)
                    layout.addWidget(city_display)
                    site_label = QLabel("鄉鎮:")
                    site_display = QLineEdit(site)
                    site_display.setReadOnly(True)
                    layout.addWidget(site_label)
                    layout.addWidget(site_display)
                    zipcode_label = QLabel("郵遞區號:")
                    zipcode_display = QLineEdit(zipcode)
                    zipcode_display.setReadOnly(True)
                    layout.addWidget(zipcode_label)
                    layout.addWidget(zipcode_display)
                    add_label = QLabel("地址:")
                    add_display = QLineEdit(add)
                    add_display.setReadOnly(True)
                    layout.addWidget(add_label)
                    layout.addWidget(add_display)
                    name_label = QLabel("名字:")
                    name_display = QLineEdit(name)
                    name_display.setReadOnly(True)
                    layout.addWidget(name_label)
                    layout.addWidget(name_display)
                    description_label = QLabel("簡述:")
                    description_display = QLineEdit(description)
                    description_display.setReadOnly(True)
                    layout.addWidget(description_label)
                    layout.addWidget(description_display)
                    tex_label = QLabel("電話:")
                    tex_display = QLineEdit(tex)
                    tex_display.setReadOnly(True)
                    layout.addWidget(tex_label)
                    layout.addWidget(tex_display)
                    picture1_label = QLabel("照片1:")
                    picture1_display = QLineEdit(picture1)
                    picture1_display.setReadOnly(True)
                    layout.addWidget(picture1_label)
                    layout.addWidget(picture1_display)
                    pic_describe1_label = QLabel("照片描述1:")
                    pic_describe1_display = QLineEdit(pic_describe1)
                    pic_describe1_display.setReadOnly(True)
                    layout.addWidget(pic_describe1_label)
                    layout.addWidget(pic_describe1_display)
                    picture2_label = QLabel("照片2:")
                    picture2_display = QLineEdit(picture2)
                    picture2_display.setReadOnly(True)
                    layout.addWidget(picture2_label)
                    layout.addWidget(picture2_display)
                    pic_describe2_label = QLabel("照片描述2:")
                    pic_describe2_display = QLineEdit(pic_describe2)
                    pic_describe2_display.setReadOnly(True)
                    layout.addWidget(pic_describe2_label)
                    layout.addWidget(pic_describe2_display)
                    picture3_label = QLabel("照片3:")
                    picture3_display = QLineEdit(picture3)
                    picture3_display.setReadOnly(True)
                    layout.addWidget(picture3_label)
                    layout.addWidget(picture3_display)
                    pic_describe3_label = QLabel("照片描述3:")
                    pic_describe3_display = QLineEdit(pic_describe3)
                    pic_describe3_display.setReadOnly(True)
                    layout.addWidget(pic_describe3_label)
                    layout.addWidget(pic_describe3_display)
                    class1_label = QLabel("餐廳類型1:")
                    cndata1 = get_restaurant_class_query()
                    for idx, class_ in enumerate(cndata1):
                        if class_['class'] == class1:
                            class1 = class_['name']
                    class1_display = QLineEdit(class1)
                    class1_display.setReadOnly(True)
                    layout.addWidget(class1_label)
                    layout.addWidget(class1_display)
                    class2_label = QLabel("餐廳類型2:")
                    cndata2 = get_restaurant_class_query()
                    for idx, class_ in enumerate(cndata2):
                        if class_['class'] == class2:
                            class2 = class_['name']
                    class2_display = QLineEdit(class2)
                    class2_display.setReadOnly(True)
                    layout.addWidget(class2_label)
                    layout.addWidget(class2_display)
                    class3_label = QLabel("餐廳類型3:")
                    cndata3 = get_restaurant_class_query()
                    for idx, class_ in enumerate(cndata3):
                        if class_['class'] == class3:
                            class3 = class_['name']
                    class3_display = QLineEdit(class3)
                    class3_display.setReadOnly(True)
                    layout.addWidget(class3_label)
                    layout.addWidget(class3_display)
                    web_label = QLabel("網址:")
                    web_display = QLineEdit(web)
                    web_display.setReadOnly(True)
                    layout.addWidget(web_label)
                    layout.addWidget(web_display)
                    Px_label = QLabel("經度:")
                    Px_display = QLineEdit(Px)
                    Px_display.setReadOnly(True)
                    layout.addWidget(Px_label)
                    layout.addWidget(Px_display)
                    Py_label = QLabel("緯度:")
                    Py_display = QLineEdit(Py)
                    Py_display.setReadOnly(True)
                    layout.addWidget(Py_label)
                    layout.addWidget(Py_display)
                    parkinginfo_label = QLabel("停車資訊:")
                    parkinginfo_display = QLineEdit(parkinginfo)
                    parkinginfo_display.setReadOnly(True)
                    layout.addWidget(parkinginfo_label)
                    layout.addWidget(parkinginfo_display)
                    time_label = QLabel("服務時間:")
                    time_display = QLineEdit(time)
                    time_display.setReadOnly(True)
                    layout.addWidget(time_label)
                    layout.addWidget(time_display)
                    scroll_area.setWidget(content_widget)
                    main_layout.addWidget(scroll_area)
                    delete_button = QPushButton("Delete")
                    main_layout.addWidget(delete_button, alignment=Qt.AlignCenter)
                    dialog.setLayout(main_layout)
                    def delete_restaurant_data():
                        try:
                            deleteRestaurantDataInToSql(u_id)
                            print("success")
                            success_msg= f"資料刪除成功!"
                            dialog.accept()
                            show_success_message(success_msg)
                            self.refresh_table(table_name)
                            self.set_tableButtonSelected(self.Restaurant_Button)
                        except Exception as e:
                            print("Error delete data:", e)
                            error_msg= f"刪除資料錯誤，請先確認資料有無錯誤"
                            dialog.accept()
                            show_error_message(error_msg)
                            self.set_tableButtonSelected(self.Restaurant_Button)
                    delete_button.clicked.connect(delete_restaurant_data)
                    dialog.exec_()
                else:
                    self.set_tableButtonSelected(self.Restaurant_Button)
        elif table_name == "view":
            if self.row == -1:                
                dialog = QDialog()
                dialog.setWindowTitle("提示")
                dialog.setModal(True)
                dialog.resize(192, 108)
                layout = QVBoxLayout()
                text_label = QLabel("請先選擇要刪除的資料")
                text_label.setAlignment(Qt.AlignCenter)
                layout.addWidget(text_label)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(dialog.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                layout.addWidget(ok_button, alignment=Qt.AlignCenter)            
                dialog.setLayout(layout)            
                dialog.exec_()
                self.set_tableButtonSelected(self.View_Button)
            for index, view_info in enumerate(self.view_data):
                if index == self.row:
                    dialog = QDialog()
                    dialog.setWindowTitle("Delete")
                    dialog.setModal(True)
                    dialog.setFixedSize(425, 500)
                    main_layout = QVBoxLayout()
                    scroll_area = QScrollArea()
                    scroll_area.setWidgetResizable(True)
                    content_widget = QWidget()
                    layout = QVBoxLayout(content_widget)
                    u_id = view_info['ID']
                    city = view_info['城市']
                    site = view_info['鄉鎮']
                    zipcode = view_info['郵遞區號']
                    add = view_info['地址']
                    name = view_info['名字']
                    web = view_info['網址']
                    toldescribe = view_info['描述']
                    tex = view_info['電話']
                    travellinginfo = view_info['旅遊資訊']
                    parkinginfo = view_info['停車資訊']
                    picture1 = view_info['照片1']
                    pic_describe1 = view_info['照片描述1']
                    picture2 = view_info['照片2']
                    pic_describe2 = view_info['照片描述2']
                    picture3 = view_info['照片3']
                    pic_describe3 = view_info['照片描述3']
                    Px = view_info['經度']
                    Py = view_info['緯度']
                    class1 = view_info['景點類型1']
                    class2 = view_info['景點類型2']
                    class3 = view_info['景點類型3']
                    high_money = view_info['最高價格']
                    low_money = view_info['最低價格']
                    money = view_info['詳細價格描述']
                    time = view_info['服務時間']
                    text_label = QLabel("確定要刪除資料(刪除後即無法復原)")
                    text_label.setAlignment(Qt.AlignCenter)
                    layout.addWidget(text_label)
                    id_label = QLabel("ID:")
                    id_display = QLineEdit(u_id)
                    id_display.setReadOnly(True)
                    layout.addWidget(id_label)
                    layout.addWidget(id_display)
                    city_label = QLabel("城市:")
                    city_display = QLineEdit(city)
                    city_display.setReadOnly(True)
                    layout.addWidget(city_label)
                    layout.addWidget(city_display)
                    site_label = QLabel("鄉鎮:")
                    site_display = QLineEdit(site)
                    site_display.setReadOnly(True)
                    layout.addWidget(site_label)
                    layout.addWidget(site_display)
                    zipcode_label = QLabel("郵遞區號:")
                    zipcode_display = QLineEdit(zipcode)
                    zipcode_display.setReadOnly(True)
                    layout.addWidget(zipcode_label)
                    layout.addWidget(zipcode_display)
                    add_label = QLabel("地址:")
                    add_display = QLineEdit(add)
                    add_display.setReadOnly(True)
                    layout.addWidget(add_label)
                    layout.addWidget(add_display)
                    name_label = QLabel("名字:")
                    name_display = QLineEdit(name)
                    name_display.setReadOnly(True)
                    layout.addWidget(name_label)
                    layout.addWidget(name_display)
                    web_label = QLabel("網址:")
                    web_display = QLineEdit(web)
                    web_display.setReadOnly(True)
                    layout.addWidget(web_label)
                    layout.addWidget(web_display)
                    toldescribe_label = QLabel("描述:")
                    toldescribe_display = QLineEdit(toldescribe)
                    toldescribe_display.setReadOnly(True)
                    layout.addWidget(toldescribe_label)
                    layout.addWidget(toldescribe_display)
                    tex_label = QLabel("電話:")
                    tex_display = QLineEdit(tex)
                    tex_display.setReadOnly(True)
                    layout.addWidget(tex_label)
                    layout.addWidget(tex_display)
                    travellinginfo_label = QLabel("旅遊資訊:")
                    travellinginfo_display = QLineEdit(travellinginfo)
                    travellinginfo_display.setReadOnly(True)
                    layout.addWidget(travellinginfo_label)
                    layout.addWidget(travellinginfo_display)
                    parkinginfo_label = QLabel("停車資訊:")
                    parkinginfo_display = QLineEdit(parkinginfo)
                    parkinginfo_display.setReadOnly(True)
                    layout.addWidget(parkinginfo_label)
                    layout.addWidget(parkinginfo_display)
                    picture1_label = QLabel("照片1:")
                    picture1_display = QLineEdit(picture1)
                    picture1_display.setReadOnly(True)
                    layout.addWidget(picture1_label)
                    layout.addWidget(picture1_display)
                    pic_describe1_label = QLabel("照片描述1:")
                    pic_describe1_display = QLineEdit(pic_describe1)
                    pic_describe1_display.setReadOnly(True)
                    layout.addWidget(pic_describe1_label)
                    layout.addWidget(pic_describe1_display)
                    picture2_label = QLabel("照片2:")
                    picture2_display = QLineEdit(picture2)
                    picture2_display.setReadOnly(True)
                    layout.addWidget(picture2_label)
                    layout.addWidget(picture2_display)
                    pic_describe2_label = QLabel("照片描述2:")
                    pic_describe2_display = QLineEdit(pic_describe2)
                    pic_describe2_display.setReadOnly(True)
                    layout.addWidget(pic_describe2_label)
                    layout.addWidget(pic_describe2_display)
                    picture3_label = QLabel("照片3:")
                    picture3_display = QLineEdit(picture3)
                    picture3_display.setReadOnly(True)
                    layout.addWidget(picture3_label)
                    layout.addWidget(picture3_display)
                    pic_describe3_label = QLabel("照片描述3:")
                    pic_describe3_display = QLineEdit(pic_describe3)
                    pic_describe3_display.setReadOnly(True)
                    layout.addWidget(pic_describe3_label)
                    layout.addWidget(pic_describe3_display)
                    Px_label = QLabel("經度:")
                    Px_display = QLineEdit(Px)
                    Px_display.setReadOnly(True)
                    layout.addWidget(Px_label)
                    layout.addWidget(Px_display)
                    Py_label = QLabel("緯度:")
                    Py_display = QLineEdit(Py)
                    Py_display.setReadOnly(True)
                    layout.addWidget(Py_label)
                    layout.addWidget(Py_display)
                    class1_label = QLabel("景點類型1:")
                    cndata1 = get_view_class_query()
                    for idx, class_ in enumerate(cndata1):
                        if class_['class'] == class1:
                            class1 = class_['name']
                    class1_display = QLineEdit(class1)
                    class1_display.setReadOnly(True)
                    layout.addWidget(class1_label)
                    layout.addWidget(class1_display)
                    class2_label = QLabel("景點類型2:")
                    cndata2 = get_view_class_query()
                    for idx, class_ in enumerate(cndata2):
                        if class_['class'] == class2:
                            class2 = class_['name']
                    class2_display = QLineEdit(class2)
                    class2_display.setReadOnly(True)
                    layout.addWidget(class2_label)
                    layout.addWidget(class2_display)
                    class3_label = QLabel("景點類型3:")
                    cndata3 = get_view_class_query()
                    for idx, class_ in enumerate(cndata3):
                        if class_['class'] == class3:
                            class3 = class_['name']
                    class3_display = QLineEdit(class3)
                    class3_display.setReadOnly(True)
                    layout.addWidget(class3_label)
                    layout.addWidget(class3_display)
                    high_money_label = QLabel("最高價格:")
                    high_money_display = QLineEdit(high_money)
                    high_money_display.setReadOnly(True)
                    layout.addWidget(high_money_label)
                    layout.addWidget(high_money_display)
                    low_money_label = QLabel("最低價格:")
                    low_money_display = QLineEdit(low_money)
                    low_money_display.setReadOnly(True)
                    layout.addWidget(low_money_label)
                    layout.addWidget(low_money_display)
                    money_label = QLabel("詳細價格描述:")
                    money_display = QLineEdit(money)
                    money_display.setReadOnly(True)
                    layout.addWidget(money_label)
                    layout.addWidget(money_display)
                    time_label = QLabel("服務時間:")
                    time_display = QLineEdit(time)
                    time_display.setReadOnly(True)
                    layout.addWidget(time_label)
                    layout.addWidget(time_display)
                    scroll_area.setWidget(content_widget)
                    main_layout.addWidget(scroll_area)
                    delete_button = QPushButton("Delete")
                    main_layout.addWidget(delete_button, alignment=Qt.AlignCenter)
                    dialog.setLayout(main_layout)
                    def delete_view_data():
                        try:
                            deleteViewDataInToSql(u_id)
                            print("success")
                            success_msg= f"資料刪除成功!"
                            dialog.accept()
                            show_success_message(success_msg)
                            self.refresh_table(table_name)
                            self.set_tableButtonSelected(self.View_Button)
                        except Exception as e:
                            print("Error delete data:", e)
                            error_msg= f"刪除資料錯誤，請先確認資料有無錯誤"
                            dialog.accept()
                            show_error_message(error_msg)
                            self.set_tableButtonSelected(self.View_Button)
                    delete_button.clicked.connect(delete_view_data)
                    dialog.exec_()
                else:
                    self.set_tableButtonSelected(self.View_Button)
        elif table_name == "activity":
            if self.row == -1:                
                dialog = QDialog()
                dialog.setWindowTitle("提示")
                dialog.setModal(True)
                dialog.resize(192, 108)
                layout = QVBoxLayout()
                text_label = QLabel("請先選擇要刪除的資料")
                text_label.setAlignment(Qt.AlignCenter)
                layout.addWidget(text_label)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(dialog.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                layout.addWidget(ok_button, alignment=Qt.AlignCenter)            
                dialog.setLayout(layout)            
                dialog.exec_()
                self.set_tableButtonSelected(self.Activity_Button)
            for index, activity_info in enumerate(self.activity_data):
                if index == self.row:
                    dialog = QDialog()
                    dialog.setWindowTitle("Delete")
                    dialog.setModal(True)
                    dialog.setFixedSize(425, 500)
                    main_layout = QVBoxLayout()
                    scroll_area = QScrollArea()
                    scroll_area.setWidgetResizable(True)
                    content_widget = QWidget()
                    layout = QVBoxLayout(content_widget)
                    u_id = activity_info['ID']
                    city = activity_info['城市']
                    site = activity_info['鄉鎮']
                    add = activity_info['地址']
                    name = activity_info['名字']
                    web = activity_info['網址']
                    description = activity_info['簡述']
                    tex = activity_info['電話']
                    org = activity_info['主辦單位']
                    parkinginfo = activity_info['停車資訊']
                    picture1 = activity_info['照片1']
                    pic_describe1 = activity_info['照片描述1']
                    picture2 = activity_info['照片2']
                    pic_describe2 = activity_info['照片描述2']
                    picture3 = activity_info['照片3']
                    pic_describe3 = activity_info['照片描述3']
                    class1 = activity_info['類別1']
                    class2 = activity_info['類別2']
                    class3 = activity_info['類別3']
                    charge = activity_info['收費']
                    Px = activity_info['經度']
                    Py = activity_info['緯度']
                    time_start = activity_info['開始時間']
                    time_end = activity_info['結束時間']
                    participation = activity_info['活動參與對象']
                    travellinginfo = activity_info['交通資訊']
                    text_label = QLabel("確定要刪除資料(刪除後即無法復原)")
                    text_label.setAlignment(Qt.AlignCenter)
                    layout.addWidget(text_label)
                    id_label = QLabel("ID:")
                    id_display = QLineEdit(u_id)
                    id_display.setReadOnly(True)
                    layout.addWidget(id_label)
                    layout.addWidget(id_display)
                    city_label = QLabel("城市:")
                    city_display = QLineEdit(city)
                    city_display.setReadOnly(True)
                    layout.addWidget(city_label)
                    layout.addWidget(city_display)
                    site_label = QLabel("鄉鎮:")
                    site_display = QLineEdit(site)
                    site_display.setReadOnly(True)
                    layout.addWidget(site_label)
                    layout.addWidget(site_display)
                    add_label = QLabel("地址:")
                    add_display = QLineEdit(add)
                    add_display.setReadOnly(True)
                    layout.addWidget(add_label)
                    layout.addWidget(add_display)
                    name_label = QLabel("名字:")
                    name_display = QLineEdit(name)
                    name_display.setReadOnly(True)
                    layout.addWidget(name_label)
                    layout.addWidget(name_display)
                    web_label = QLabel("網址:")
                    web_display = QLineEdit(web)
                    web_display.setReadOnly(True)
                    layout.addWidget(web_label)
                    layout.addWidget(web_display)
                    description_label = QLabel("簡述:")
                    description_display = QLineEdit(description)
                    description_display.setReadOnly(True)
                    layout.addWidget(description_label)
                    layout.addWidget(description_display)
                    tex_label = QLabel("電話:")
                    tex_display = QLineEdit(tex)
                    tex_display.setReadOnly(True)
                    layout.addWidget(tex_label)
                    layout.addWidget(tex_display)
                    org_label = QLabel("主辦單位:")
                    org_display = QLineEdit(org)
                    org_display.setReadOnly(True)
                    layout.addWidget(org_label)
                    layout.addWidget(org_display)
                    parkinginfo_label = QLabel("停車資訊:")
                    parkinginfo_display = QLineEdit(parkinginfo)
                    parkinginfo_display.setReadOnly(True)
                    layout.addWidget(parkinginfo_label)
                    layout.addWidget(parkinginfo_display)
                    picture1_label = QLabel("照片1:")
                    picture1_display = QLineEdit(picture1)
                    picture1_display.setReadOnly(True)
                    layout.addWidget(picture1_label)
                    layout.addWidget(picture1_display)
                    pic_describe1_label = QLabel("照片描述1:")
                    pic_describe1_display = QLineEdit(pic_describe1)
                    pic_describe1_display.setReadOnly(True)
                    layout.addWidget(pic_describe1_label)
                    layout.addWidget(pic_describe1_display)
                    picture2_label = QLabel("照片2:")
                    picture2_display = QLineEdit(picture2)
                    picture2_display.setReadOnly(True)
                    layout.addWidget(picture2_label)
                    layout.addWidget(picture2_display)
                    pic_describe2_label = QLabel("照片描述2:")
                    pic_describe2_display = QLineEdit(pic_describe2)
                    pic_describe2_display.setReadOnly(True)
                    layout.addWidget(pic_describe2_label)
                    layout.addWidget(pic_describe2_display)
                    picture3_label = QLabel("照片3:")
                    picture3_display = QLineEdit(picture3)
                    picture3_display.setReadOnly(True)
                    layout.addWidget(picture3_label)
                    layout.addWidget(picture3_display)
                    pic_describe3_label = QLabel("照片描述3:")
                    pic_describe3_display = QLineEdit(pic_describe3)
                    pic_describe3_display.setReadOnly(True)
                    layout.addWidget(pic_describe3_label)
                    layout.addWidget(pic_describe3_display)
                    class1_label = QLabel("類別1:")
                    cndata1 = get_activity_class_query()
                    for idx, class_ in enumerate(cndata1):
                        if class_['class'] == class1:
                            class1 = class_['name']
                    class1_display = QLineEdit(class1)
                    class1_display.setReadOnly(True)
                    layout.addWidget(class1_label)
                    layout.addWidget(class1_display)
                    class2_label = QLabel("類別2:")
                    cndata2 = get_activity_class_query()
                    for idx, class_ in enumerate(cndata2):
                        if class_['class'] == class2:
                            class2 = class_['name']
                    class2_display = QLineEdit(class2)
                    class2_display.setReadOnly(True)
                    layout.addWidget(class2_label)
                    layout.addWidget(class2_display)
                    class3_label = QLabel("類別3:")
                    cndata3 = get_activity_class_query()
                    for idx, class_ in enumerate(cndata3):
                        if class_['class'] == class3:
                            class3 = class_['name']
                    class3_display = QLineEdit(class3)
                    class3_display.setReadOnly(True)
                    layout.addWidget(class3_label)
                    layout.addWidget(class3_display)
                    charge_label = QLabel("收費:")
                    charge_display = QLineEdit(charge)
                    charge_display.setReadOnly(True)
                    layout.addWidget(charge_label)
                    layout.addWidget(charge_display)
                    Px_label = QLabel("經度:")
                    Px_display = QLineEdit(Px)
                    Px_display.setReadOnly(True)
                    layout.addWidget(Px_label)
                    layout.addWidget(Px_display)
                    Py_label = QLabel("緯度:")
                    Py_display = QLineEdit(Py)
                    Py_display.setReadOnly(True)
                    layout.addWidget(Py_label)
                    layout.addWidget(Py_display)
                    time_start_label = QLabel("開始時間:")
                    time_start_display = QLineEdit(time_start)
                    time_start_display.setReadOnly(True)
                    layout.addWidget(time_start_label)
                    layout.addWidget(time_start_display)
                    time_end_label = QLabel("結束時間:")
                    time_end_display = QLineEdit(time_end)
                    time_end_display.setReadOnly(True)
                    layout.addWidget(time_end_label)
                    layout.addWidget(time_end_display)
                    participation_label = QLabel("活動參與對象:")
                    participation_display = QLineEdit(participation)
                    participation_display.setReadOnly(True)
                    layout.addWidget(participation_label)
                    layout.addWidget(participation_display)
                    travellinginfo_label = QLabel("交通資訊:")
                    travellinginfo_display = QLineEdit(travellinginfo)
                    travellinginfo_display.setReadOnly(True)
                    layout.addWidget(travellinginfo_label)
                    layout.addWidget(travellinginfo_display)
                    scroll_area.setWidget(content_widget)
                    main_layout.addWidget(scroll_area)
                    delete_button = QPushButton("Delete")
                    main_layout.addWidget(delete_button, alignment=Qt.AlignCenter)
                    dialog.setLayout(main_layout)
                    def delete_activity_data():
                        try:
                            deleteActivityDataInToSql(u_id)
                            print("success")
                            success_msg= f"資料刪除成功!"
                            dialog.accept()
                            show_success_message(success_msg)
                            self.refresh_table(table_name)
                            self.set_tableButtonSelected(self.Activity_Button)
                        except Exception as e:
                            print("Error delete data:", e)
                            error_msg= f"刪除資料錯誤，請先確認資料有無錯誤"
                            dialog.accept()
                            show_error_message(error_msg)
                            self.set_tableButtonSelected(self.Activity_Button)
                    delete_button.clicked.connect(delete_activity_data)
                    dialog.exec_()
                else:
                    self.set_tableButtonSelected(self.Activity_Button)
        elif table_name == "route":
            if self.row == -1:                
                dialog = QDialog()
                dialog.setWindowTitle("提示")
                dialog.setModal(True)
                dialog.resize(192, 108)
                layout = QVBoxLayout()
                text_label = QLabel("請先選擇要刪除的資料")
                text_label.setAlignment(Qt.AlignCenter)
                layout.addWidget(text_label)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(dialog.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                layout.addWidget(ok_button, alignment=Qt.AlignCenter)            
                dialog.setLayout(layout)            
                dialog.exec_()
                self.set_tableButtonSelected(self.Route_Button)
            for index, route_info in enumerate(self.route_data):
                if index == self.row:
                    dialog = QDialog()
                    dialog.setWindowTitle("Delete")
                    dialog.setModal(True)
                    dialog.setFixedSize(400, 400)
                    layout = QVBoxLayout()
                    travel_Id = route_info['travelId']
                    Day_Id = route_info['DayId']
                    tripStart_Id = route_info['tripStartId']
                    route_Id = route_info['routeId']
                    route_Name = route_info['routeName'] 
                    text_label = QLabel("確定要刪除資料(刪除後即無法復原)")
                    text_label.setAlignment(Qt.AlignCenter)
                    layout.addWidget(text_label)
                    travel_Id_label = QLabel("Travel_ID:")
                    travel_Id_display = QLineEdit(travel_Id)
                    travel_Id_display.setReadOnly(True)
                    layout.addWidget(travel_Id_label)
                    layout.addWidget(travel_Id_display)
                    Day_Id_label = QLabel("Day_ID:")
                    Day_Id_display = QLineEdit(Day_Id)
                    Day_Id_display.setReadOnly(True)
                    layout.addWidget(Day_Id_label)
                    layout.addWidget(Day_Id_display)
                    tripStart_Id_label = QLabel("Trip_Start_ID:")
                    tripStart_Id_display = QLineEdit(tripStart_Id)
                    tripStart_Id_display.setReadOnly(True)
                    layout.addWidget(tripStart_Id_label)
                    layout.addWidget(tripStart_Id_display)
                    route_Id_label = QLabel("Route_ID:")
                    route_Id_display = QLineEdit(route_Id)
                    route_Id_display.setReadOnly(True)
                    layout.addWidget(route_Id_label)
                    layout.addWidget(route_Id_display)
                    route_Name_label = QLabel("Route_Name:")
                    route_Name_display = QLineEdit(route_Name)
                    route_Name_display.setReadOnly(True)
                    layout.addWidget(route_Name_label)
                    layout.addWidget(route_Name_display)
                    delete_button = QPushButton("Delete")
                    layout.addWidget(delete_button, alignment=Qt.AlignCenter)
                    dialog.setLayout(layout)
                    def delete_route_data():
                        try:
                            deleteRouteDataInToSql(travel_Id, Day_Id, tripStart_Id, route_Id)
                            print("success")
                            success_msg= f"資料刪除成功!"
                            dialog.accept()
                            show_success_message(success_msg)
                            self.refresh_table(table_name)
                            self.set_tableButtonSelected(self.Route_Button)
                        except Exception as e:
                            print("Error delete data:", e)
                            error_msg= f"刪除資料錯誤，請先確認資料有無錯誤"
                            dialog.accept()
                            show_error_message(error_msg)
                            self.set_tableButtonSelected(self.Route_Button)
                    delete_button.clicked.connect(delete_route_data)
                    dialog.exec_()
                else:
                    self.set_tableButtonSelected(self.Route_Button)
        elif table_name == "trip":
            if self.row == -1:                
                dialog = QDialog()
                dialog.setWindowTitle("提示")
                dialog.setModal(True)
                dialog.resize(192, 108)
                layout = QVBoxLayout()
                text_label = QLabel("請先選擇要刪除的資料")
                text_label.setAlignment(Qt.AlignCenter)
                layout.addWidget(text_label)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(dialog.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                layout.addWidget(ok_button, alignment=Qt.AlignCenter)            
                dialog.setLayout(layout)            
                dialog.exec_()
                self.set_tableButtonSelected(self.Trip_Button)
            for index, trip_info in enumerate(self.trip_data):
                if index == self.row:
                    dialog = QDialog()
                    dialog.setWindowTitle("Delete")
                    dialog.setModal(True)
                    dialog.setFixedSize(430, 660)
                    layout = QVBoxLayout()
                    Travel_Id = trip_info['TravelId']
                    Day_Id = trip_info['DayId']
                    View_Id = trip_info['ViewId']
                    Type = trip_info['Type']
                    Trip_Id = trip_info['TripId']
                    Id = trip_info['Id']
                    date = trip_info['date']
                    time = trip_info['time']
                    weather = trip_info['weather']
                    text_label = QLabel("確定要刪除資料(刪除後即無法復原)")
                    text_label.setAlignment(Qt.AlignCenter)
                    layout.addWidget(text_label)
                    Travel_Id_label = QLabel("Travel_ID:")
                    Travel_Id_display = QLineEdit(Travel_Id)
                    Travel_Id_display.setReadOnly(True)
                    layout.addWidget(Travel_Id_label)
                    layout.addWidget(Travel_Id_display)
                    Day_Id_label = QLabel("Day_ID:")
                    Day_Id_display = QLineEdit(Day_Id)
                    Day_Id_display.setReadOnly(True)
                    layout.addWidget(Day_Id_label)
                    layout.addWidget(Day_Id_display)
                    View_Id_label = QLabel("View_ID:")
                    View_Id_display = QLineEdit(View_Id)
                    View_Id_display.setReadOnly(True)
                    layout.addWidget(View_Id_label)
                    layout.addWidget(View_Id_display)
                    Type_label = QLabel("Type:")
                    Type_display = QLineEdit(Type)
                    Type_display.setReadOnly(True)
                    layout.addWidget(Type_label)
                    layout.addWidget(Type_display)
                    Trip_Id_label = QLabel("Trip_ID:")
                    Trip_Id_display = QLineEdit(Trip_Id)
                    Trip_Id_display.setReadOnly(True)
                    layout.addWidget(Trip_Id_label)
                    layout.addWidget(Trip_Id_display)
                    Id_label = QLabel("ID:")
                    Id_display = QLineEdit(Id)
                    Id_display.setReadOnly(True)
                    layout.addWidget(Id_label)
                    layout.addWidget(Id_display)
                    date_label = QLabel("Date:")
                    date_display = QLineEdit(date)
                    date_display.setReadOnly(True)
                    layout.addWidget(date_label)
                    layout.addWidget(date_display)
                    time_label = QLabel("Time:")
                    time_display = QLineEdit(time)
                    time_display.setReadOnly(True)
                    layout.addWidget(time_label)
                    layout.addWidget(time_display)
                    weather_label = QLabel("Weather:")
                    weather_display = QLineEdit(weather)
                    weather_display.setReadOnly(True)
                    layout.addWidget(weather_label)
                    layout.addWidget(weather_display)
                    delete_button = QPushButton("Delete")
                    layout.addWidget(delete_button, alignment=Qt.AlignCenter)
                    dialog.setLayout(layout)
                    def delete_trip_data():
                        try:
                            deleteTripDataInToSql(Travel_Id, Day_Id, View_Id)
                            print("success")
                            success_msg= f"資料刪除成功!"
                            dialog.accept()
                            show_success_message(success_msg)
                            self.refresh_table(table_name)
                            self.set_tableButtonSelected(self.Trip_Button)
                        except Exception as e:
                            print("Error delete data:", e)
                            error_msg= f"刪除資料錯誤，請先確認資料有無錯誤"
                            dialog.accept()
                            show_error_message(error_msg)
                            self.set_tableButtonSelected(self.Trip_Button)
                    delete_button.clicked.connect(delete_trip_data)
                    dialog.exec_()
                else:
                    self.set_tableButtonSelected(self.Trip_Button)
        elif table_name == "user_record_trip":
            if self.row == -1:                
                dialog = QDialog()
                dialog.setWindowTitle("提示")
                dialog.setModal(True)
                dialog.resize(192, 108)
                layout = QVBoxLayout()
                text_label = QLabel("請先選擇要刪除的資料")
                text_label.setAlignment(Qt.AlignCenter)
                layout.addWidget(text_label)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(dialog.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                layout.addWidget(ok_button, alignment=Qt.AlignCenter)            
                dialog.setLayout(layout)            
                dialog.exec_()
                self.set_tableButtonSelected(self.User_Record_Trip_Button)
            for index, user_record_trip_info in enumerate(self.user_record_trip_data):
                if index == self.row:
                    dialog = QDialog()
                    dialog.setWindowTitle("Delete")
                    dialog.setModal(True)
                    dialog.setFixedSize(370, 430)
                    layout = QVBoxLayout()
                    user_Id = user_record_trip_info['userId']
                    Travel_Id = user_record_trip_info['TravelId']
                    Day_Id = user_record_trip_info['DayId']
                    isLike = user_record_trip_info['isLike']
                    isStore = user_record_trip_info['isStore']
                    text_label = QLabel("確定要刪除資料(刪除後即無法復原)")
                    text_label.setAlignment(Qt.AlignCenter)
                    layout.addWidget(text_label)
                    user_Id_label = QLabel("User_ID:")
                    user_Id_display = QLineEdit(user_Id)
                    user_Id_display.setReadOnly(True)
                    layout.addWidget(user_Id_label)
                    layout.addWidget(user_Id_display)
                    Travel_Id_label = QLabel("Travel_ID:")
                    Travel_Id_display = QLineEdit(Travel_Id)
                    Travel_Id_display.setReadOnly(True)
                    layout.addWidget(Travel_Id_label)
                    layout.addWidget(Travel_Id_display)
                    Day_Id_label = QLabel("Day_Id:")
                    Day_Id_display = QLineEdit(Day_Id)
                    Day_Id_display.setReadOnly(True)
                    layout.addWidget(Day_Id_label)
                    layout.addWidget(Day_Id_display)
                    isLike_label = QLabel("is_Like:")
                    isLike_display = QLineEdit(isLike)
                    isLike_display.setReadOnly(True)
                    layout.addWidget(isLike_label)
                    layout.addWidget(isLike_display)
                    isStore_label = QLabel("is_Store:")
                    isStore_display = QLineEdit(isStore)
                    isStore_display.setReadOnly(True)
                    layout.addWidget(isStore_label)
                    layout.addWidget(isStore_display)
                    delete_button = QPushButton("Delete")
                    layout.addWidget(delete_button, alignment=Qt.AlignCenter)
                    dialog.setLayout(layout)
                    def delete_user_record_trip_data():
                        try:
                            deleteRecordTripDataInToSql(user_Id, Travel_Id, Day_Id)
                            print("success")
                            success_msg= f"資料刪除成功!"
                            dialog.accept()
                            show_success_message(success_msg)
                            self.refresh_table(table_name)
                            self.set_tableButtonSelected(self.User_Record_Trip_Button)
                        except Exception as e:
                            print("Error delete data:", e)
                            error_msg= f"刪除資料錯誤，請先確認資料有無錯誤"
                            dialog.accept()
                            show_error_message(error_msg)
                            self.set_tableButtonSelected(self.User_Record_Trip_Button)
                    delete_button.clicked.connect(delete_user_record_trip_data)
                    dialog.exec_()
                else:
                    self.set_tableButtonSelected(self.User_Record_Trip_Button)
        elif table_name == "travel":
            if self.row == -1:                
                dialog = QDialog()
                dialog.setWindowTitle("提示")
                dialog.setModal(True)
                dialog.resize(192, 108)
                layout = QVBoxLayout()
                text_label = QLabel("請先選擇要刪除的資料")
                text_label.setAlignment(Qt.AlignCenter)
                layout.addWidget(text_label)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(dialog.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                layout.addWidget(ok_button, alignment=Qt.AlignCenter)            
                dialog.setLayout(layout)            
                dialog.exec_()
                self.set_tableButtonSelected(self.Travel_Button)
            for index, travel_info in enumerate(self.travel_data):
                if index == self.row:
                    dialog = QDialog()
                    dialog.setWindowTitle("Delete")
                    dialog.setModal(True)
                    dialog.setFixedSize(400, 290)
                    layout = QVBoxLayout()
                    Travel_Id = travel_info['TravelId']
                    Travel_Name = travel_info['TravelName']
                    user_Id = travel_info['userId']
                    text_label = QLabel("確定要刪除資料(刪除後即無法復原)")
                    text_label.setAlignment(Qt.AlignCenter)
                    layout.addWidget(text_label)
                    Travel_Id_label = QLabel("Travel_ID:")
                    Travel_Id_display = QLineEdit(Travel_Id)
                    Travel_Id_display.setReadOnly(True)
                    layout.addWidget(Travel_Id_label)
                    layout.addWidget(Travel_Id_display)
                    Travel_Name_label = QLabel("Travel_Name:")
                    Travel_Name_display = QLineEdit(Travel_Name)
                    Travel_Name_display.setReadOnly(True)
                    layout.addWidget(Travel_Name_label)
                    layout.addWidget(Travel_Name_display)
                    user_Id_label = QLabel("User_ID:")
                    user_Id_display = QLineEdit(user_Id)
                    user_Id_display.setReadOnly(True)
                    layout.addWidget(user_Id_label)
                    layout.addWidget(user_Id_display)
                    delete_button = QPushButton("Delete")
                    layout.addWidget(delete_button, alignment=Qt.AlignCenter)
                    dialog.setLayout(layout)
                    def delete_travel_data():
                        try:
                            deleteTravelDataInToSql(Travel_Id)
                            print("success")
                            success_msg= f"資料刪除成功!"
                            dialog.accept()
                            show_success_message(success_msg)
                            self.refresh_table(table_name)
                            self.set_tableButtonSelected(self.Travel_Button)
                        except Exception as e:
                            print("Error delete data:", e)
                            error_msg= f"刪除資料錯誤，請先確認資料有無錯誤"
                            dialog.accept()
                            show_error_message(error_msg)
                            self.set_tableButtonSelected(self.Travel_Button)
                    delete_button.clicked.connect(delete_travel_data)
                    dialog.exec_()
                else:
                    self.set_tableButtonSelected(self.Travel_Button)
        elif table_name == "user_record_travel":
            if self.row == -1:                
                dialog = QDialog()
                dialog.setWindowTitle("提示")
                dialog.setModal(True)
                dialog.resize(192, 108)
                layout = QVBoxLayout()
                text_label = QLabel("請先選擇要刪除的資料")
                text_label.setAlignment(Qt.AlignCenter)
                layout.addWidget(text_label)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(dialog.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                layout.addWidget(ok_button, alignment=Qt.AlignCenter)            
                dialog.setLayout(layout)            
                dialog.exec_()
                self.set_tableButtonSelected(self.User_Record_Travel_Button)
            for index, user_record_travel_info in enumerate(self.user_record_travel_data):
                if index == self.row:
                    dialog = QDialog()
                    dialog.setWindowTitle("Delete")
                    dialog.setModal(True)
                    dialog.setFixedSize(400, 350)
                    layout = QVBoxLayout()
                    user_Id = user_record_travel_info['userId']
                    Travel_Id = user_record_travel_info['TravelId']
                    isLike = user_record_travel_info['isLike']
                    isStore = user_record_travel_info['isStore']
                    text_label = QLabel("確定要刪除資料(刪除後即無法復原)")
                    text_label.setAlignment(Qt.AlignCenter)
                    layout.addWidget(text_label)
                    user_Id_label = QLabel("User_ID:")
                    user_Id_display = QLineEdit(user_Id)
                    user_Id_display.setReadOnly(True)
                    layout.addWidget(user_Id_label)
                    layout.addWidget(user_Id_display)
                    Travel_Id_label = QLabel("Travel_ID:")
                    Travel_Id_display = QLineEdit(Travel_Id)
                    Travel_Id_display.setReadOnly(True)
                    layout.addWidget(Travel_Id_label)
                    layout.addWidget(Travel_Id_display)
                    isLike_label = QLabel("is_Like:")
                    isLike_display = QLineEdit(isLike)
                    isLike_display.setReadOnly(True)
                    layout.addWidget(isLike_label)
                    layout.addWidget(isLike_display)
                    isStore_label = QLabel("is_Store:")
                    isStore_display = QLineEdit(isStore)
                    isStore_display.setReadOnly(True)
                    layout.addWidget(isStore_label)
                    layout.addWidget(isStore_display)
                    delete_button = QPushButton("Delete")
                    layout.addWidget(delete_button, alignment=Qt.AlignCenter)
                    dialog.setLayout(layout)
                    def delete_user_record_travel_data():
                        try:
                            deleteRecordTravelDataInToSql(user_Id, Travel_Id)
                            print("success")
                            success_msg= f"資料刪除成功!"
                            dialog.accept()
                            show_success_message(success_msg)
                            self.refresh_table(table_name)
                            self.set_tableButtonSelected(self.User_Record_Travel_Button)
                        except Exception as e:
                            print("Error delete data:", e)
                            error_msg= f"刪除資料錯誤，請先確認資料有無錯誤"
                            dialog.accept()
                            show_error_message(error_msg)
                            self.set_tableButtonSelected(self.User_Record_Travel_Button)
                    delete_button.clicked.connect(delete_user_record_travel_data)
                    dialog.exec_()
                else:
                    self.set_tableButtonSelected(self.User_Record_Travel_Button)
        elif table_name == "user_record_view":
            if self.row == -1:                
                dialog = QDialog()
                dialog.setWindowTitle("提示")
                dialog.setModal(True)
                dialog.resize(192, 108)
                layout = QVBoxLayout()
                text_label = QLabel("請先選擇要刪除的資料")
                text_label.setAlignment(Qt.AlignCenter)
                layout.addWidget(text_label)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(dialog.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                layout.addWidget(ok_button, alignment=Qt.AlignCenter)            
                dialog.setLayout(layout)            
                dialog.exec_()
                self.set_tableButtonSelected(self.User_Record_View_Button)
            for index, user_record_view_info in enumerate(self.user_record_view_data):
                if index == self.row:
                    dialog = QDialog()
                    dialog.setWindowTitle("Delete")
                    dialog.setModal(True)
                    dialog.setFixedSize(400, 410)
                    layout = QVBoxLayout()
                    user_Id = user_record_view_info['userId']
                    Type = user_record_view_info['Type']
                    Id = user_record_view_info['ID']
                    is_Like = user_record_view_info['isLike']
                    is_Store = user_record_view_info['isStore']
                    text_label = QLabel("確定要刪除資料(刪除後即無法復原)")
                    text_label.setAlignment(Qt.AlignCenter)
                    layout.addWidget(text_label)
                    user_Id_label = QLabel("User_ID:")
                    user_Id_display = QLineEdit(user_Id)
                    user_Id_display.setReadOnly(True)
                    layout.addWidget(user_Id_label)
                    layout.addWidget(user_Id_display)
                    Type_label = QLabel("Type:")
                    Type_display = QLineEdit(Type)
                    Type_display.setReadOnly(True)
                    layout.addWidget(Type_label)
                    layout.addWidget(Type_display)
                    Id_label = QLabel("ID:")
                    Id_display = QLineEdit(Id)
                    Id_display.setReadOnly(True)
                    layout.addWidget(Id_label)
                    layout.addWidget(Id_display)
                    is_Like_label = QLabel("is_Like:")
                    is_Like_display = QLineEdit(is_Like)
                    is_Like_display.setReadOnly(True)
                    layout.addWidget(is_Like_label)
                    layout.addWidget(is_Like_display)
                    is_Store_label = QLabel("is_Store:")
                    is_Store_display = QLineEdit(is_Store)
                    is_Store_display.setReadOnly(True)
                    layout.addWidget(is_Store_label)
                    layout.addWidget(is_Store_display)
                    delete_button = QPushButton("Delete")
                    layout.addWidget(delete_button, alignment=Qt.AlignCenter)
                    dialog.setLayout(layout)
                    def delete_user_record_view_data():
                        try:
                            deleteRecordViewDataInToSql(user_Id, Type, Id)
                            print("success")
                            success_msg= f"資料刪除成功!"
                            dialog.accept()
                            show_success_message(success_msg)
                            self.refresh_table(table_name)
                            self.set_tableButtonSelected(self.User_Record_View_Button)
                        except Exception as e:
                            print("Error delete data:", e)
                            error_msg= f"刪除資料錯誤，請先確認資料有無錯誤"
                            dialog.accept()
                            show_error_message(error_msg)
                            self.set_tableButtonSelected(self.User_Record_View_Button)
                    delete_button.clicked.connect(delete_user_record_view_data)
                    dialog.exec_()
                else:
                    self.set_tableButtonSelected(self.User_Record_View_Button)
        else:
            dialog = QDialog()
            dialog.setWindowTitle("錯誤")
            dialog.setModal(True)
            dialog.adjustSize()
            layout = QVBoxLayout()
            text_label = QLabel("請先選擇表格")
            text_label.setAlignment(Qt.AlignCenter)
            layout.addWidget(text_label)
            layout.addStretch(1)
            ok_button = QPushButton("確定")
            ok_button.clicked.connect(dialog.accept)
            ok_button.setFixedWidth(100)
            ok_button.setFixedHeight(30)
            button_layout = QHBoxLayout()
            button_layout.addStretch(1)
            button_layout.addWidget(ok_button)
            button_layout.addStretch(1)
            layout.addLayout(button_layout)
            dialog.setLayout(layout)
            dialog.exec_()
    def sync_weather_button_clicked(self):
        dialog = QDialog()
        dialog.setWindowTitle("提示")
        dialog.setModal(True)
        dialog.adjustSize()
        layout = QVBoxLayout()
        text_label = QLabel("確定要重整資料?可能需要花費一點時間")
        text_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(text_label)
        layout.addStretch(1)
        ok_button = QPushButton("確定")
        ok_button.clicked.connect(dialog.accept)
        ok_button.setFixedWidth(100)
        ok_button.setFixedHeight(30)
        button_layout = QHBoxLayout()
        button_layout.addStretch(1)
        button_layout.addWidget(ok_button)
        button_layout.addStretch(1)
        layout.addLayout(button_layout)
        dialog.setLayout(layout)
        if dialog.exec_() == QDialog.Accepted:
            self.show_loading_animation()
            self.start_refresh_weather_thread()
    def sync_table_button_clicked(self):
        dialog = QDialog()
        dialog.setWindowTitle("提示")
        dialog.setModal(True)
        dialog.adjustSize()
        layout = QVBoxLayout()
        text_label = QLabel("確定要重整資料?可能需要花費一點時間")
        text_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(text_label)
        layout.addStretch(1)
        ok_button = QPushButton("確定")
        ok_button.clicked.connect(dialog.accept)
        ok_button.setFixedWidth(100)
        ok_button.setFixedHeight(30)
        button_layout = QHBoxLayout()
        button_layout.addStretch(1)
        button_layout.addWidget(ok_button)
        button_layout.addStretch(1)
        layout.addLayout(button_layout)
        dialog.setLayout(layout)
        if dialog.exec_() == QDialog.Accepted:
            self.show_loading_animation()
            self.start_refresh_table_thread()
    def show_loading_animation(self):
        self.loading_dialog = QDialog(self)
        self.loading_dialog.setFixedSize(400, 300)
        self.loading_dialog.setWindowTitle("加載中")
        self.loading_dialog.setModal(True)
        self.layout = QVBoxLayout()
        self.base_dir = os.path.dirname(os.path.abspath(__file__))
        self.img_dir = os.path.join(self.base_dir, 'source', 'img')
        loading_image = os.path.join(self.img_dir, 'Loading.gif')
        self.loading_label = QtWidgets.QLabel(self)
        self.loading_label.setGeometry(0, 0, 100, 30)
        self.movie = QtGui.QMovie(loading_image)
        self.movie.setScaledSize(QtCore.QSize(300, 300))
        self.loading_label.setMovie(self.movie)
        self.loading_label.setScaledContents(True)
        self.movie.start()
        self.layout.addWidget(self.loading_label)
        self.loading_dialog.setLayout(self.layout)
        self.movie.start()
        self.loading_dialog.show()
    def start_refresh_weather_thread(self):
        self.worker_thread = WorkerThread_Weather()
        self.worker_thread.finished.connect(self.on_worker_finished)
        self.worker_thread.start()
    def start_refresh_table_thread(self):
        self.worker_thread = WorkerThread_Table()
        self.worker_thread.finished.connect(self.on_worker_finished)
        self.worker_thread.start()
    def on_worker_finished(self):
        self.movie.stop()
        self.loading_dialog.close()
        QMessageBox.information(self, "提示", "資料更新完畢")

class WorkerThread_Weather(QThread):
        finished = pyqtSignal()
        def run(self):
            crawler_update_weather_data()
            self.finished.emit()
class WorkerThread_Table(QThread):
        finished = pyqtSignal()
        def run(self):
            crawler_update_table_data()
            self.finished.emit()
class WorkerThread_Initialize(QThread):
        finished = pyqtSignal()
        def run(self):
            initialize()
            self.finished.emit()

class Login_Form(QMainWindow):
    accepted_signal = QtCore.pyqtSignal()
    def __init__(self, app):
        super().__init__()
        self.app = app
        self.db = MySQLDatabase(host='127.0.0.1', user='root', password='', database='city')
        self.setupUi(self)
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.setFixedSize(1440, 810)
        base_dir = os.path.dirname(os.path.abspath(__file__))
        img_dir = os.path.join(base_dir, 'source', 'img')
        background_image = os.path.join(img_dir, 'background.gif')
        self.background_label = QtWidgets.QLabel(self)
        self.background_label.setGeometry(0, 0, 1440, 810)
        self.movie = QtGui.QMovie(background_image)
        self.background_label.setMovie(self.movie)
        self.background_label.setScaledContents(True)
        self.movie.start()
        self.gray_background = QtWidgets.QFrame(Form)
        self.gray_background.setGeometry(QtCore.QRect(570, 270, 300, 250))
        self.gray_background.setStyleSheet("background-color: white; border-radius: 10px;")
        self.gray_background.setObjectName("gray_background")
        id = QtGui.QFontDatabase.addApplicationFont("./source/Font/Cubic.ttf")
        _fontstr = QtGui.QFontDatabase.applicationFontFamilies(id)[0]
        font = QtGui.QFont(_fontstr, 12)
        self.app.setFont(font)
        self.username = QtWidgets.QLabel(self.gray_background)
        self.username.setGeometry(QtCore.QRect(20, 20, 260, 30))
        self.username.setFont(font)
        self.username.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.username.setWordWrap(False)
        self.username.setObjectName("username")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.gray_background)
        self.lineEdit_2.setGeometry(QtCore.QRect(20, 60, 260, 30))
        self.lineEdit_2.setStyleSheet("background-color: white; border: 1px solid lightgray;")
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.label_2 = QtWidgets.QLabel(self.gray_background)
        self.label_2.setGeometry(QtCore.QRect(20, 100, 260, 30))
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.lineEdit = QtWidgets.QLineEdit(self.gray_background)
        self.lineEdit.setGeometry(QtCore.QRect(20, 140, 260, 30))
        self.lineEdit.setStyleSheet("background-color: white; border: 1px solid lightgray;")
        self.lineEdit.setFont(font)
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit.setEchoMode(QLineEdit.Password)
        self.pushButton = QtWidgets.QPushButton(self.gray_background)
        self.pushButton.setGeometry(QtCore.QRect(110, 190, 80, 30))
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.pushButton.setStyleSheet("""
            QPushButton {
                background-color: lightgray; 
                border-radius: 5px;
            }
            QPushButton:pressed {
                background-color: gray;
            }
        """)
        self.pushButton.setDefault(True)
        self.pushButton.clicked.connect(self.on_login_clicked)
        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)
    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "旅人園藝師"))
        self.username.setText(_translate("Form", "請輸入管理者帳號:"))
        self.label_2.setText(_translate("Form", "請輸入管理者密碼:"))
        self.pushButton.setText(_translate("Form", "登入"))
    def initialize_data(self):
        self.worker_thread = WorkerThread_Initialize()
        self.worker_thread.finished.connect(self.on_worker_finished)
        self.worker_thread.start()
    def on_worker_finished(self):
        self.movie.stop()
        self.loading_dialog.close()
        self.close()
        self.accepted_signal.emit() 
        msg_box = QMessageBox()
        msg_box.setIcon(QMessageBox.Information)
        msg_box.setWindowTitle("提示")
        QMessageBox.information(self, "提示", "首次登入請先至Manager表格中刪除預設密碼，以確保系統安全性，並新增自己的管理者密碼!")
        dialog = QDialog()
        dialog.setWindowTitle("請註冊管理者帳號!")
        dialog.setModal(True)
        dialog.setFixedSize(380, 130)
        layout = QVBoxLayout()
        managername_layout = QHBoxLayout()
        managername_label = QLabel("Manager Name:")
        managername_input = QLineEdit()
        managername_layout.addWidget(managername_label)
        managername_layout.addWidget(managername_input)
        manager_password_layout = QHBoxLayout()
        manager_password_label = QLabel("Manager Password:")
        manager_password_input = QLineEdit()
        manager_password_layout.addWidget(manager_password_label)
        manager_password_layout.addWidget(manager_password_input)
        layout.addLayout(managername_layout)
        layout.addLayout(manager_password_layout)
        insert_button = QPushButton("Insert")
        layout.addWidget(insert_button, alignment=Qt.AlignCenter)
        dialog.setLayout(layout)
        def show_error_message(message):
            msg = QDialog()
            msg.setWindowTitle("錯誤")
            msg.setModal(True)
            layout = QVBoxLayout()
            text_label = QLabel(message)
            text_label.setAlignment(Qt.AlignCenter)
            layout.addWidget(text_label)
            ok_button = QPushButton("確定")
            ok_button.clicked.connect(msg.accept)
            ok_button.setFixedWidth(100)
            ok_button.setFixedHeight(30)
            layout.addWidget(ok_button, alignment=Qt.AlignCenter)
            msg.setLayout(layout)
            msg.adjustSize()       
            msg.exec_()
        def show_success_message(message):
            msg = QDialog()
            msg.setWindowTitle("提示")
            msg.setModal(True)
            layout = QVBoxLayout()
            text_label = QLabel(message)
            text_label.setAlignment(Qt.AlignCenter)
            layout.addWidget(text_label)
            ok_button = QPushButton("確定")
            ok_button.clicked.connect(msg.accept)
            ok_button.setFixedWidth(100)
            ok_button.setFixedHeight(30)
            layout.addWidget(ok_button, alignment=Qt.AlignCenter)
            msg.setLayout(layout)
            msg.adjustSize()       
            msg.exec_()
        def insert_manager_data():
            managername = managername_input.text()
            manager_password = manager_password_input.text()
            try:
                insertManagerDataInToSql(managername, manager_password)
                print("success")
                success_msg= f"插入資料成功!"
                dialog.accept()
                show_success_message(success_msg)
            except Exception as e:
                print("Error inserting data:", e)
                error_msg= f"插入資料錯誤，請先確認資料有無錯誤"
                dialog.accept()
                show_error_message(error_msg)
            # except:
            #     dialog.accept()
        insert_button.clicked.connect(insert_manager_data)
        dialog.exec_()        
    def show_loading_animation(self):
            self.loading_dialog = QDialog(self)
            self.loading_dialog.setFixedSize(400, 300)
            self.loading_dialog.setWindowTitle("加載中")
            self.loading_dialog.setModal(True)
            self.loading_dialog.setWindowFlags(self.loading_dialog.windowFlags() & ~Qt.WindowCloseButtonHint)
            self.layout = QVBoxLayout()
            self.base_dir = os.path.dirname(os.path.abspath(__file__))
            self.img_dir = os.path.join(self.base_dir, 'source', 'img')
            loading_image = os.path.join(self.img_dir, 'Loading.gif')
            self.loading_label = QtWidgets.QLabel(self)
            self.loading_label.setGeometry(0, 0, 100, 30)
            self.movie = QtGui.QMovie(loading_image)
            self.movie.setScaledSize(QtCore.QSize(300, 300))
            self.loading_label.setMovie(self.movie)
            self.loading_label.setScaledContents(True)
            self.movie.start()
            self.layout.addWidget(self.loading_label)
            self.loading_dialog.setLayout(self.layout)
            self.movie.start()
            self.loading_dialog.show() 
    def on_login_clicked(self):
        isInit = False
        connection = pymysql.connect(host='127.0.0.1', user='root', password='', database='')
        query_initialize = f"CREATE DATABASE `city`"
        try:
            connection.cursor().execute(query_initialize)
            isInit = True
        except:
            pass
        connection.close()   
        db = MySQLDatabase(host='127.0.0.1', user='root', password='', database='city')
        if not db.check_table_exists('manager'):
            db.create_table('manager', ['username', 'userpassword'])
            insertManagerDataInToSql('root', '1234')  
        username = self.lineEdit_2.text()
        password = self.lineEdit.text()
        print(f"Username: {username}, Password: {password}")
        db = MySQLDatabase(host='127.0.0.1', user='root', password='', database='city')
        query = f"SELECT * FROM `manager` WHERE `username` = \"{username}\" AND `userpassword` = \"{password}\""
        query_ex = f"SELECT * FROM `manager`"
        self.manager_data = db.execute_query(query)
        self.manager_ex_data = self.db.execute_query(query_ex)  
        try:
            if self.manager_ex_data:
                if self.manager_data:
                    if isInit:
                        dialog = QDialog()
                        dialog.setWindowTitle("提示")
                        dialog.setModal(True)
                        dialog.adjustSize()
                        layout = QVBoxLayout()
                        text_label = QLabel("首次登入，需要載入資料庫，可能需要花費一點時間!")
                        text_label.setAlignment(QtCore.Qt.AlignCenter)
                        layout.addWidget(text_label)
                        layout.addStretch(1)
                        ok_button = QPushButton("確定")
                        ok_button.clicked.connect(dialog.accept)
                        ok_button.setFixedWidth(100)
                        ok_button.setFixedHeight(30)
                        button_layout = QHBoxLayout()
                        button_layout.addStretch(1)
                        button_layout.addWidget(ok_button)
                        button_layout.addStretch(1)
                        layout.addLayout(button_layout)
                        dialog.setLayout(layout)
                        if dialog.exec_() == QDialog.Accepted:
                            self.show_loading_animation()
                            self.initialize_data()
                    else:
                        self.close()
                        self.accepted_signal.emit()
                else:
                    dialog = QDialog()
                    dialog.setWindowTitle("提示")
                    dialog.setModal(True)
                    dialog.resize(192, 108)
                    layout = QVBoxLayout()
                    text_label = QLabel("帳號或密碼錯誤，請確認後重新嘗試")
                    text_label.setAlignment(Qt.AlignCenter)
                    layout.addWidget(text_label)
                    ok_button = QPushButton("確定")
                    ok_button.clicked.connect(dialog.accept)
                    ok_button.setFixedWidth(100)
                    ok_button.setFixedHeight(30)
                    layout.addWidget(ok_button, alignment=Qt.AlignCenter)            
                    dialog.setLayout(layout)            
                    dialog.exec_()
            else:
                def show_error_message(message):
                    msg = QDialog()
                    msg.setWindowTitle("錯誤")
                    msg.setModal(True)
                    layout = QVBoxLayout()
                    text_label = QLabel(message)
                    text_label.setAlignment(Qt.AlignCenter)
                    layout.addWidget(text_label)
                    ok_button = QPushButton("確定")
                    ok_button.clicked.connect(msg.accept)
                    ok_button.setFixedWidth(100)
                    ok_button.setFixedHeight(30)
                    layout.addWidget(ok_button, alignment=Qt.AlignCenter)
                    msg.setLayout(layout)
                    msg.adjustSize()       
                    msg.exec_()
                def show_success_message(message):
                    msg = QDialog()
                    msg.setWindowTitle("提示")
                    msg.setModal(True)
                    layout = QVBoxLayout()
                    text_label = QLabel(message)
                    text_label.setAlignment(Qt.AlignCenter)
                    layout.addWidget(text_label)
                    ok_button = QPushButton("確定")
                    ok_button.clicked.connect(msg.accept)
                    ok_button.setFixedWidth(100)
                    ok_button.setFixedHeight(30)
                    layout.addWidget(ok_button, alignment=Qt.AlignCenter)
                    msg.setLayout(layout)
                    msg.adjustSize()       
                    msg.exec_()
                db.create_table('manager', ['username', 'userpassword'])
                insertManagerDataInToSql('root', '1234')
                dialog = QDialog()
                dialog.setWindowTitle("提示")
                dialog.setModal(True)
                dialog.adjustSize()
                layout = QVBoxLayout()
                text_label = QLabel("偵測到Manager為空，已將密碼更新為預設密碼!")
                text_label.setAlignment(QtCore.Qt.AlignCenter)
                layout.addWidget(text_label)
                layout.addStretch(1)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(dialog.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                button_layout = QHBoxLayout()
                button_layout.addStretch(1)
                button_layout.addWidget(ok_button)
                button_layout.addStretch(1)
                layout.addLayout(button_layout)
                dialog.setLayout(layout)
                dialog.exec_()
                self.close()
                self.accepted_signal.emit()
                dialog = QDialog()
                dialog.setWindowTitle("請重新註冊管理者帳號!")
                dialog.setModal(True)
                dialog.setFixedSize(380, 130)
                layout = QVBoxLayout()
                managername_layout = QHBoxLayout()
                managername_label = QLabel("Manager Name:")
                managername_input = QLineEdit()
                managername_layout.addWidget(managername_label)
                managername_layout.addWidget(managername_input)
                manager_password_layout = QHBoxLayout()
                manager_password_label = QLabel("Manager Password:")
                manager_password_input = QLineEdit()
                manager_password_layout.addWidget(manager_password_label)
                manager_password_layout.addWidget(manager_password_input)
                layout.addLayout(managername_layout)
                layout.addLayout(manager_password_layout)
                insert_button = QPushButton("Insert")
                layout.addWidget(insert_button, alignment=Qt.AlignCenter)
                dialog.setLayout(layout)
                def insert_manager_data():
                    managername = managername_input.text()
                    manager_password = manager_password_input.text()
                    try:
                        insertManagerDataInToSql(managername, manager_password)
                        print("success")
                        success_msg= f"插入資料成功!"
                        dialog.accept()
                        show_success_message(success_msg)
                    except Exception as e:
                        print("Error inserting data:", e)
                        error_msg= f"插入資料錯誤，請先確認資料有無錯誤"
                        dialog.accept()
                        show_error_message(error_msg)
                insert_button.clicked.connect(insert_manager_data)
                dialog.exec_()
        except pymysql.MySQLError as e:
            self.show_dialog("錯誤", f"資料庫操作失敗: {e}")

if __name__ == "__main__":
    import sys
    app = QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    login_window = Login_Form(app)
    def show_admin_window():
        admin_window.setupUi(Form)
        Form.show()
    admin_window = Ui_Form()
    login_window.accepted_signal.connect(show_admin_window)
    login_window.show()
    sys.exit(app.exec_())
